/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var t={2129:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=v;var s=i(2274),r=i(4896),n=i(6306),a=i(3766),m=i(5387),h=i(5385),c=i(8850),l=i(5235),u=i(8601),_=i(662),p=(i(2322),v.STATIC="static"),d=v.KINEMATIC="kinematic",y=v.DYNAMIC="dynamic",f={type:p,position:n.zero(),angle:0,linearVelocity:n.zero(),angularVelocity:0,linearDamping:0,angularDamping:0,fixedRotation:!1,bullet:!1,gravityScale:1,allowSleep:!0,awake:!0,active:!0,userData:null};function v(t,e){e=r(e,f),o&&s.assert(n.isValid(e.position)),o&&s.assert(n.isValid(e.linearVelocity)),o&&s.assert(m.isFinite(e.angle)),o&&s.assert(m.isFinite(e.angularVelocity)),o&&s.assert(m.isFinite(e.angularDamping)&&e.angularDamping>=0),o&&s.assert(m.isFinite(e.linearDamping)&&e.linearDamping>=0),this.m_world=t,this.m_awakeFlag=e.awake,this.m_autoSleepFlag=e.allowSleep,this.m_bulletFlag=e.bullet,this.m_fixedRotationFlag=e.fixedRotation,this.m_activeFlag=e.active,this.m_islandFlag=!1,this.m_toiFlag=!1,this.m_userData=e.userData,this.m_type=e.type,this.m_type==y?(this.m_mass=1,this.m_invMass=1):(this.m_mass=0,this.m_invMass=0),this.m_I=0,this.m_invI=0,this.m_xf=c.identity(),this.m_xf.p=n.clone(e.position),this.m_xf.q.setAngle(e.angle),this.m_sweep=new h,this.m_sweep.setTransform(this.m_xf),this.c_velocity=new l,this.c_position=new u,this.m_force=n.zero(),this.m_torque=0,this.m_linearVelocity=n.clone(e.linearVelocity),this.m_angularVelocity=e.angularVelocity,this.m_linearDamping=e.linearDamping,this.m_angularDamping=e.angularDamping,this.m_gravityScale=e.gravityScale,this.m_sleepTime=0,this.m_jointList=null,this.m_contactList=null,this.m_fixtureList=null,this.m_prev=null,this.m_next=null,this.m_destroyed=!1}function g(){this.mass=0,this.center=n.zero(),this.I=0}v.prototype._serialize=function(){for(var t=[],e=this.m_fixtureList;e;e=e.m_next)t.push(e);return{type:this.m_type,bullet:this.m_bulletFlag,position:this.m_xf.p,angle:this.m_xf.q.getAngle(),linearVelocity:this.m_linearVelocity,angularVelocity:this.m_angularVelocity,fixtures:t}},v._deserialize=function(t,e,i){var o=new v(e,t);return t.fixtures.forEach((function(t){var e=i(_,t,o);o._addFixture(e)})),o},v.prototype.isWorldLocked=function(){return!(!this.m_world||!this.m_world.isLocked())},v.prototype.getWorld=function(){return this.m_world},v.prototype.getNext=function(){return this.m_next},v.prototype.setUserData=function(t){this.m_userData=t},v.prototype.getUserData=function(){return this.m_userData},v.prototype.getFixtureList=function(){return this.m_fixtureList},v.prototype.getJointList=function(){return this.m_jointList},v.prototype.getContactList=function(){return this.m_contactList},v.prototype.isStatic=function(){return this.m_type==p},v.prototype.isDynamic=function(){return this.m_type==y},v.prototype.isKinematic=function(){return this.m_type==d},v.prototype.setStatic=function(){return this.setType(p),this},v.prototype.setDynamic=function(){return this.setType(y),this},v.prototype.setKinematic=function(){return this.setType(d),this},v.prototype.getType=function(){return this.m_type},v.prototype.setType=function(t){if(o&&s.assert(t===p||t===d||t===y),o&&s.assert(0==this.isWorldLocked()),1!=this.isWorldLocked()&&this.m_type!=t){this.m_type=t,this.resetMassData(),this.m_type==p&&(this.m_linearVelocity.setZero(),this.m_angularVelocity=0,this.m_sweep.forward(),this.synchronizeFixtures()),this.setAwake(!0),this.m_force.setZero(),this.m_torque=0;for(var e=this.m_contactList;e;){var i=e;e=e.next,this.m_world.destroyContact(i.contact)}this.m_contactList=null;for(var r=this.m_world.m_broadPhase,n=this.m_fixtureList;n;n=n.m_next)for(var a=n.m_proxyCount,m=0;m<a;++m)r.touchProxy(n.m_proxies[m].proxyId)}},v.prototype.isBullet=function(){return this.m_bulletFlag},v.prototype.setBullet=function(t){this.m_bulletFlag=!!t},v.prototype.isSleepingAllowed=function(){return this.m_autoSleepFlag},v.prototype.setSleepingAllowed=function(t){this.m_autoSleepFlag=!!t,0==this.m_autoSleepFlag&&this.setAwake(!0)},v.prototype.isAwake=function(){return this.m_awakeFlag},v.prototype.setAwake=function(t){t?0==this.m_awakeFlag&&(this.m_awakeFlag=!0,this.m_sleepTime=0):(this.m_awakeFlag=!1,this.m_sleepTime=0,this.m_linearVelocity.setZero(),this.m_angularVelocity=0,this.m_force.setZero(),this.m_torque=0)},v.prototype.isActive=function(){return this.m_activeFlag},v.prototype.setActive=function(t){if(o&&s.assert(0==this.isWorldLocked()),t!=this.m_activeFlag)if(this.m_activeFlag=!!t,this.m_activeFlag)for(var e=this.m_world.m_broadPhase,i=this.m_fixtureList;i;i=i.m_next)i.createProxies(e,this.m_xf);else{for(e=this.m_world.m_broadPhase,i=this.m_fixtureList;i;i=i.m_next)i.destroyProxies(e);for(var r=this.m_contactList;r;){var n=r;r=r.next,this.m_world.destroyContact(n.contact)}this.m_contactList=null}},v.prototype.isFixedRotation=function(){return this.m_fixedRotationFlag},v.prototype.setFixedRotation=function(t){this.m_fixedRotationFlag!=t&&(this.m_fixedRotationFlag=!!t,this.m_angularVelocity=0,this.resetMassData())},v.prototype.getTransform=function(){return this.m_xf},v.prototype.setTransform=function(t,e){if(o&&s.assert(0==this.isWorldLocked()),1!=this.isWorldLocked()){this.m_xf.set(t,e),this.m_sweep.setTransform(this.m_xf);for(var i=this.m_world.m_broadPhase,r=this.m_fixtureList;r;r=r.m_next)r.synchronize(i,this.m_xf,this.m_xf)}},v.prototype.synchronizeTransform=function(){this.m_sweep.getTransform(this.m_xf,1)},v.prototype.synchronizeFixtures=function(){var t=c.identity();this.m_sweep.getTransform(t,0);for(var e=this.m_world.m_broadPhase,i=this.m_fixtureList;i;i=i.m_next)i.synchronize(e,t,this.m_xf)},v.prototype.advance=function(t){this.m_sweep.advance(t),this.m_sweep.c.set(this.m_sweep.c0),this.m_sweep.a=this.m_sweep.a0,this.m_sweep.getTransform(this.m_xf,1)},v.prototype.getPosition=function(){return this.m_xf.p},v.prototype.setPosition=function(t){this.setTransform(t,this.m_sweep.a)},v.prototype.getAngle=function(){return this.m_sweep.a},v.prototype.setAngle=function(t){this.setTransform(this.m_xf.p,t)},v.prototype.getWorldCenter=function(){return this.m_sweep.c},v.prototype.getLocalCenter=function(){return this.m_sweep.localCenter},v.prototype.getLinearVelocity=function(){return this.m_linearVelocity},v.prototype.getLinearVelocityFromWorldPoint=function(t){var e=n.sub(t,this.m_sweep.c);return n.add(this.m_linearVelocity,n.cross(this.m_angularVelocity,e))},v.prototype.getLinearVelocityFromLocalPoint=function(t){return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(t))},v.prototype.setLinearVelocity=function(t){this.m_type!=p&&(n.dot(t,t)>0&&this.setAwake(!0),this.m_linearVelocity.set(t))},v.prototype.getAngularVelocity=function(){return this.m_angularVelocity},v.prototype.setAngularVelocity=function(t){this.m_type!=p&&(t*t>0&&this.setAwake(!0),this.m_angularVelocity=t)},v.prototype.getLinearDamping=function(){return this.m_linearDamping},v.prototype.setLinearDamping=function(t){this.m_linearDamping=t},v.prototype.getAngularDamping=function(){return this.m_angularDamping},v.prototype.setAngularDamping=function(t){this.m_angularDamping=t},v.prototype.getGravityScale=function(){return this.m_gravityScale},v.prototype.setGravityScale=function(t){this.m_gravityScale=t},v.prototype.getMass=function(){return this.m_mass},v.prototype.getInertia=function(){return this.m_I+this.m_mass*n.dot(this.m_sweep.localCenter,this.m_sweep.localCenter)},v.prototype.getMassData=function(t){t.mass=this.m_mass,t.I=this.getInertia(),t.center.set(this.m_sweep.localCenter)},v.prototype.resetMassData=function(){if(this.m_mass=0,this.m_invMass=0,this.m_I=0,this.m_invI=0,this.m_sweep.localCenter.setZero(),this.isStatic()||this.isKinematic())return this.m_sweep.c0.set(this.m_xf.p),this.m_sweep.c.set(this.m_xf.p),void(this.m_sweep.a0=this.m_sweep.a);o&&s.assert(this.isDynamic());for(var t=n.zero(),e=this.m_fixtureList;e;e=e.m_next)if(0!=e.m_density){var i=new g;e.getMassData(i),this.m_mass+=i.mass,t.addMul(i.mass,i.center),this.m_I+=i.I}this.m_mass>0?(this.m_invMass=1/this.m_mass,t.mul(this.m_invMass)):(this.m_mass=1,this.m_invMass=1),this.m_I>0&&0==this.m_fixedRotationFlag?(this.m_I-=this.m_mass*n.dot(t,t),o&&s.assert(this.m_I>0),this.m_invI=1/this.m_I):(this.m_I=0,this.m_invI=0);var r=n.clone(this.m_sweep.c);this.m_sweep.setLocalCenter(t,this.m_xf),this.m_linearVelocity.add(n.cross(this.m_angularVelocity,n.sub(this.m_sweep.c,r)))},v.prototype.setMassData=function(t){if(o&&s.assert(0==this.isWorldLocked()),1!=this.isWorldLocked()&&this.m_type==y){this.m_invMass=0,this.m_I=0,this.m_invI=0,this.m_mass=t.mass,this.m_mass<=0&&(this.m_mass=1),this.m_invMass=1/this.m_mass,t.I>0&&0==this.m_fixedRotationFlag&&(this.m_I=t.I-this.m_mass*n.dot(t.center,t.center),o&&s.assert(this.m_I>0),this.m_invI=1/this.m_I);var e=n.clone(this.m_sweep.c);this.m_sweep.setLocalCenter(t.center,this.m_xf),this.m_linearVelocity.add(n.cross(this.m_angularVelocity,n.sub(this.m_sweep.c,e)))}},v.prototype.applyForce=function(t,e,i){this.m_type==y&&(i&&0==this.m_awakeFlag&&this.setAwake(!0),this.m_awakeFlag&&(this.m_force.add(t),this.m_torque+=n.cross(n.sub(e,this.m_sweep.c),t)))},v.prototype.applyForceToCenter=function(t,e){this.m_type==y&&(e&&0==this.m_awakeFlag&&this.setAwake(!0),this.m_awakeFlag&&this.m_force.add(t))},v.prototype.applyTorque=function(t,e){this.m_type==y&&(e&&0==this.m_awakeFlag&&this.setAwake(!0),this.m_awakeFlag&&(this.m_torque+=t))},v.prototype.applyLinearImpulse=function(t,e,i){this.m_type==y&&(i&&0==this.m_awakeFlag&&this.setAwake(!0),this.m_awakeFlag&&(this.m_linearVelocity.addMul(this.m_invMass,t),this.m_angularVelocity+=this.m_invI*n.cross(n.sub(e,this.m_sweep.c),t)))},v.prototype.applyAngularImpulse=function(t,e){this.m_type==y&&(e&&0==this.m_awakeFlag&&this.setAwake(!0),this.m_awakeFlag&&(this.m_angularVelocity+=this.m_invI*t))},v.prototype.shouldCollide=function(t){if(this.m_type!=y&&t.m_type!=y)return!1;for(var e=this.m_jointList;e;e=e.next)if(e.other==t&&0==e.joint.m_collideConnected)return!1;return!0},v.prototype._addFixture=function(t){if(o&&s.assert(0==this.isWorldLocked()),1==this.isWorldLocked())return null;if(this.m_activeFlag){var e=this.m_world.m_broadPhase;t.createProxies(e,this.m_xf)}return t.m_next=this.m_fixtureList,this.m_fixtureList=t,t.m_density>0&&this.resetMassData(),this.m_world.m_newFixture=!0,t},v.prototype.createFixture=function(t,e){if(o&&s.assert(0==this.isWorldLocked()),1==this.isWorldLocked())return null;var i=new _(this,t,e);return this._addFixture(i),i},v.prototype.destroyFixture=function(t){if(o&&s.assert(0==this.isWorldLocked()),1!=this.isWorldLocked()){o&&s.assert(t.m_body==this);var e=!1;if(this.m_fixtureList===t)this.m_fixtureList=t.m_next,e=!0;else for(var i=this.m_fixtureList;null!=i;){if(i.m_next===t){i.m_next=t.m_next,e=!0;break}i=i.m_next}o&&s.assert(e);for(var r=this.m_contactList;r;){var n=r.contact;r=r.next;var a=n.getFixtureA(),m=n.getFixtureB();t!=a&&t!=m||this.m_world.destroyContact(n)}if(this.m_activeFlag){var h=this.m_world.m_broadPhase;t.destroyProxies(h)}t.m_body=null,t.m_next=null,this.m_world.publish("remove-fixture",t),this.resetMassData()}},v.prototype.getWorldPoint=function(t){return c.mulVec2(this.m_xf,t)},v.prototype.getWorldVector=function(t){return a.mulVec2(this.m_xf.q,t)},v.prototype.getLocalPoint=function(t){return c.mulTVec2(this.m_xf,t)},v.prototype.getLocalVector=function(t){return a.mulTVec2(this.m_xf.q,t)}},8730:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=i(5387),n=i(6306),a=i(8850),m=i(6173),h=i(3766),c=i(1099),l=i(226),u=i(8054);function _(t){this.contact=t,this.prev,this.next,this.other}function p(t,e,i,o,s){this.m_nodeA=new _(this),this.m_nodeB=new _(this),this.m_fixtureA=t,this.m_fixtureB=i,this.m_indexA=e,this.m_indexB=o,this.m_evaluateFcn=s,this.m_manifold=new l,this.m_prev=null,this.m_next=null,this.m_toi=1,this.m_toiCount=0,this.m_toiFlag=!1,this.m_friction=y(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction),this.m_restitution=f(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution),this.m_tangentSpeed=0,this.m_enabledFlag=!0,this.m_islandFlag=!1,this.m_touchingFlag=!1,this.m_filterFlag=!1,this.m_bulletHitFlag=!1,this.v_points=[],this.v_normal=n.zero(),this.v_normalMass=new m,this.v_K=new m,this.v_pointCount,this.v_tangentSpeed,this.v_friction,this.v_restitution,this.v_invMassA,this.v_invMassB,this.v_invIA,this.v_invIB,this.p_localPoints=[],this.p_localNormal=n.zero(),this.p_localPoint=n.zero(),this.p_localCenterA=n.zero(),this.p_localCenterB=n.zero(),this.p_type,this.p_radiusA,this.p_radiusB,this.p_pointCount,this.p_invMassA,this.p_invMassB,this.p_invIA,this.p_invIB}function d(){this.rA=n.zero(),this.rB=n.zero(),this.normalImpulse=0,this.tangentImpulse=0,this.normalMass=0,this.tangentMass=0,this.velocityBias=0}function y(t,e){return r.sqrt(t*e)}function f(t,e){return t>e?t:e}t.exports=p,p.prototype.initConstraint=function(t){var e=this.m_fixtureA,i=this.m_fixtureB,r=e.getShape(),a=i.getShape(),m=e.getBody(),h=i.getBody(),c=this.getManifold(),l=c.pointCount;o&&s.assert(l>0),this.v_invMassA=m.m_invMass,this.v_invMassB=h.m_invMass,this.v_invIA=m.m_invI,this.v_invIB=h.m_invI,this.v_friction=this.m_friction,this.v_restitution=this.m_restitution,this.v_tangentSpeed=this.m_tangentSpeed,this.v_pointCount=l,this.v_K.setZero(),this.v_normalMass.setZero(),this.p_invMassA=m.m_invMass,this.p_invMassB=h.m_invMass,this.p_invIA=m.m_invI,this.p_invIB=h.m_invI,this.p_localCenterA=n.clone(m.m_sweep.localCenter),this.p_localCenterB=n.clone(h.m_sweep.localCenter),this.p_radiusA=r.m_radius,this.p_radiusB=a.m_radius,this.p_type=c.type,this.p_localNormal=n.clone(c.localNormal),this.p_localPoint=n.clone(c.localPoint),this.p_pointCount=l;for(var u=0;u<l;++u){var _=c.points[u],p=this.v_points[u]=new d;t.warmStarting?(p.normalImpulse=t.dtRatio*_.normalImpulse,p.tangentImpulse=t.dtRatio*_.tangentImpulse):(p.normalImpulse=0,p.tangentImpulse=0),p.rA.setZero(),p.rB.setZero(),p.normalMass=0,p.tangentMass=0,p.velocityBias=0,this.p_localPoints[u]=n.clone(_.localPoint)}},p.prototype.getManifold=function(){return this.m_manifold},p.prototype.getWorldManifold=function(t){var e=this.m_fixtureA.getBody(),i=this.m_fixtureB.getBody(),o=this.m_fixtureA.getShape(),s=this.m_fixtureB.getShape();return this.m_manifold.getWorldManifold(t,e.getTransform(),o.m_radius,i.getTransform(),s.m_radius)},p.prototype.setEnabled=function(t){this.m_enabledFlag=!!t},p.prototype.isEnabled=function(){return this.m_enabledFlag},p.prototype.isTouching=function(){return this.m_touchingFlag},p.prototype.getNext=function(){return this.m_next},p.prototype.getFixtureA=function(){return this.m_fixtureA},p.prototype.getFixtureB=function(){return this.m_fixtureB},p.prototype.getChildIndexA=function(){return this.m_indexA},p.prototype.getChildIndexB=function(){return this.m_indexB},p.prototype.flagForFiltering=function(){this.m_filterFlag=!0},p.prototype.setFriction=function(t){this.m_friction=t},p.prototype.getFriction=function(){return this.m_friction},p.prototype.resetFriction=function(){this.m_friction=y(this.m_fixtureA.m_friction,this.m_fixtureB.m_friction)},p.prototype.setRestitution=function(t){this.m_restitution=t},p.prototype.getRestitution=function(){return this.m_restitution},p.prototype.resetRestitution=function(){this.m_restitution=f(this.m_fixtureA.m_restitution,this.m_fixtureB.m_restitution)},p.prototype.setTangentSpeed=function(t){this.m_tangentSpeed=t},p.prototype.getTangentSpeed=function(){return this.m_tangentSpeed},p.prototype.evaluate=function(t,e,i){this.m_evaluateFcn(t,e,this.m_fixtureA,this.m_indexA,i,this.m_fixtureB,this.m_indexB)},p.prototype.update=function(t){this.m_enabledFlag=!0;var e=!1,i=this.m_touchingFlag,o=this.m_fixtureA.isSensor(),s=this.m_fixtureB.isSensor(),r=o||s,n=this.m_fixtureA.getBody(),a=this.m_fixtureB.getBody(),m=n.getTransform(),h=a.getTransform();if(r){var c=this.m_fixtureA.getShape(),_=this.m_fixtureB.getShape();e=u.testOverlap(c,this.m_indexA,_,this.m_indexB,m,h),this.m_manifold.pointCount=0}else{var p=this.m_manifold;this.m_manifold=new l,this.evaluate(this.m_manifold,m,h),e=this.m_manifold.pointCount>0;for(var d=0;d<this.m_manifold.pointCount;++d){var y=this.m_manifold.points[d];y.normalImpulse=0,y.tangentImpulse=0;for(var f=0;f<p.pointCount;++f){var v=p.points[f];if(v.id.key==y.id.key){y.normalImpulse=v.normalImpulse,y.tangentImpulse=v.tangentImpulse;break}}}e!=i&&(n.setAwake(!0),a.setAwake(!0))}this.m_touchingFlag=e,0==i&&1==e&&t&&t.beginContact(this),1==i&&0==e&&t&&t.endContact(this),0==r&&e&&t&&t.preSolve(this,p)},p.prototype.solvePositionConstraint=function(t){return this._solvePositionConstraint(t,!1)},p.prototype.solvePositionConstraintTOI=function(t,e,i){return this._solvePositionConstraint(t,!0,e,i)},p.prototype._solvePositionConstraint=function(t,e,i,o){var s=this.m_fixtureA,m=this.m_fixtureB,u=s.getBody(),_=m.getBody(),p=(u.c_velocity,_.c_velocity,u.c_position),d=_.c_position,y=n.clone(this.p_localCenterA),f=n.clone(this.p_localCenterB),v=0,g=0;e&&u!=i&&u!=o||(v=this.p_invMassA,g=this.p_invIA);var x=0,A=0;e&&_!=i&&_!=o||(x=this.p_invMassB,A=this.p_invIB);for(var b=n.clone(p.c),B=p.a,w=n.clone(d.c),S=d.a,C=0,T=0;T<this.p_pointCount;++T){var M,P,E,I=a.identity(),V=a.identity();switch(I.q.set(B),V.q.set(S),I.p=n.sub(b,h.mulVec2(I.q,y)),V.p=n.sub(w,h.mulVec2(V.q,f)),this.p_type){case l.e_circles:var z=a.mulVec2(I,this.p_localPoint),F=a.mulVec2(V,this.p_localPoints[0]);(M=n.sub(F,z)).normalize(),P=n.combine(.5,z,.5,F),E=n.dot(n.sub(F,z),M)-this.p_radiusA-this.p_radiusB;break;case l.e_faceA:M=h.mulVec2(I.q,this.p_localNormal);var R=a.mulVec2(I,this.p_localPoint),L=a.mulVec2(V,this.p_localPoints[T]);E=n.dot(n.sub(L,R),M)-this.p_radiusA-this.p_radiusB,P=L;break;case l.e_faceB:M=h.mulVec2(V.q,this.p_localNormal),R=a.mulVec2(V,this.p_localPoint),L=a.mulVec2(I,this.p_localPoints[T]),E=n.dot(n.sub(L,R),M)-this.p_radiusA-this.p_radiusB,P=L,M.mul(-1)}var D=n.sub(P,b),k=n.sub(P,w);C=r.min(C,E);var q=e?c.toiBaugarte:c.baumgarte,U=c.linearSlop,O=c.maxLinearCorrection,j=r.clamp(q*(E+U),-O,0),N=n.cross(D,M),Y=n.cross(k,M),G=v+x+g*N*N+A*Y*Y,W=G>0?-j/G:0,X=n.mul(W,M);b.subMul(v,X),B-=g*n.cross(D,X),w.addMul(x,X),S+=A*n.cross(k,X)}return p.c.set(b),p.a=B,d.c.set(w),d.a=S,C},p.prototype.initVelocityConstraint=function(t){var e=this.m_fixtureA,i=this.m_fixtureB,r=e.getBody(),m=i.getBody(),l=r.c_velocity,u=m.c_velocity,_=r.c_position,p=m.c_position,d=this.p_radiusA,y=this.p_radiusB,f=this.getManifold(),v=this.v_invMassA,g=this.v_invMassB,x=this.v_invIA,A=this.v_invIB,b=n.clone(this.p_localCenterA),B=n.clone(this.p_localCenterB),w=n.clone(_.c),S=_.a,C=n.clone(l.v),T=l.w,M=n.clone(p.c),P=p.a,E=n.clone(u.v),I=u.w;o&&s.assert(f.pointCount>0);var V=a.identity(),z=a.identity();V.q.set(S),z.q.set(P),V.p.setCombine(1,w,-1,h.mulVec2(V.q,b)),z.p.setCombine(1,M,-1,h.mulVec2(z.q,B));var F=f.getWorldManifold(null,V,d,z,y);this.v_normal.set(F.normal);for(var R=0;R<this.v_pointCount;++R){var L=this.v_points[R];L.rA.set(n.sub(F.points[R],w)),L.rB.set(n.sub(F.points[R],M));var D=n.cross(L.rA,this.v_normal),k=n.cross(L.rB,this.v_normal),q=v+g+x*D*D+A*k*k;L.normalMass=q>0?1/q:0;var U=n.cross(this.v_normal,1),O=n.cross(L.rA,U),j=n.cross(L.rB,U),N=v+g+x*O*O+A*j*j;L.tangentMass=N>0?1/N:0,L.velocityBias=0;var Y=n.dot(this.v_normal,E)+n.dot(this.v_normal,n.cross(I,L.rB))-n.dot(this.v_normal,C)-n.dot(this.v_normal,n.cross(T,L.rA));Y<-c.velocityThreshold&&(L.velocityBias=-this.v_restitution*Y)}if(2==this.v_pointCount&&t.blockSolve){var G=this.v_points[0],W=this.v_points[1],X=n.cross(G.rA,this.v_normal),J=n.cross(G.rB,this.v_normal),Z=n.cross(W.rA,this.v_normal),H=n.cross(W.rB,this.v_normal),K=v+g+x*X*X+A*J*J,Q=v+g+x*Z*Z+A*H*H,$=v+g+x*X*Z+A*J*H;K*K<1e3*(K*Q-$*$)?(this.v_K.ex.set(K,$),this.v_K.ey.set($,Q),this.v_normalMass.set(this.v_K.getInverse())):this.v_pointCount=1}_.c.set(w),_.a=S,l.v.set(C),l.w=T,p.c.set(M),p.a=P,u.v.set(E),u.w=I},p.prototype.warmStartConstraint=function(t){for(var e=this.m_fixtureA,i=this.m_fixtureB,o=e.getBody(),s=i.getBody(),r=o.c_velocity,a=s.c_velocity,m=(o.c_position,s.c_position,this.v_invMassA),h=this.v_invIA,c=this.v_invMassB,l=this.v_invIB,u=n.clone(r.v),_=r.w,p=n.clone(a.v),d=a.w,y=this.v_normal,f=n.cross(y,1),v=0;v<this.v_pointCount;++v){var g=this.v_points[v],x=n.combine(g.normalImpulse,y,g.tangentImpulse,f);_-=h*n.cross(g.rA,x),u.subMul(m,x),d+=l*n.cross(g.rB,x),p.addMul(c,x)}r.v.set(u),r.w=_,a.v.set(p),a.w=d},p.prototype.storeConstraintImpulses=function(t){for(var e=this.m_manifold,i=0;i<this.v_pointCount;++i)e.points[i].normalImpulse=this.v_points[i].normalImpulse,e.points[i].tangentImpulse=this.v_points[i].tangentImpulse},p.prototype.solveVelocityConstraint=function(t){var e=this.m_fixtureA.m_body,i=this.m_fixtureB.m_body,a=e.c_velocity,h=(e.c_position,i.c_velocity),c=(i.c_position,this.v_invMassA),l=this.v_invIA,u=this.v_invMassB,_=this.v_invIB,p=n.clone(a.v),d=a.w,y=n.clone(h.v),f=h.w,v=this.v_normal,g=n.cross(v,1),x=this.v_friction;o&&s.assert(1==this.v_pointCount||2==this.v_pointCount);for(var A=0;A<this.v_pointCount;++A){var b=this.v_points[A];(M=n.zero()).addCombine(1,y,1,n.cross(f,b.rB)),M.subCombine(1,p,1,n.cross(d,b.rA));var B=n.dot(M,g)-this.v_tangentSpeed,w=b.tangentMass*-B,S=x*b.normalImpulse;w=(P=r.clamp(b.tangentImpulse+w,-S,S))-b.tangentImpulse,b.tangentImpulse=P;var C=n.mul(w,g);p.subMul(c,C),d-=l*n.cross(b.rA,C),y.addMul(u,C),f+=_*n.cross(b.rB,C)}if(1==this.v_pointCount||0==t.blockSolve)for(var T=0;T<this.v_pointCount;++T){var M;b=this.v_points[T],(M=n.zero()).addCombine(1,y,1,n.cross(f,b.rB)),M.subCombine(1,p,1,n.cross(d,b.rA));var P,E=n.dot(M,v);w=-b.normalMass*(E-b.velocityBias),w=(P=r.max(b.normalImpulse+w,0))-b.normalImpulse,b.normalImpulse=P,C=n.mul(w,v),p.subMul(c,C),d-=l*n.cross(b.rA,C),y.addMul(u,C),f+=_*n.cross(b.rB,C)}else{var I=this.v_points[0],V=this.v_points[1],z=n.neo(I.normalImpulse,V.normalImpulse);o&&s.assert(z.x>=0&&z.y>=0);var F=n.zero().add(y).add(n.cross(f,I.rB)).sub(p).sub(n.cross(d,I.rA)),R=n.zero().add(y).add(n.cross(f,V.rB)).sub(p).sub(n.cross(d,V.rA)),L=n.dot(F,v),D=n.dot(R,v),k=n.neo(L-I.velocityBias,D-V.velocityBias);for(k.sub(m.mulVec2(this.v_K,z));;){var q=m.mulVec2(this.v_normalMass,k).neg();if(q.x>=0&&q.y>=0){var U=n.sub(q,z),O=n.mul(U.x,v),j=n.mul(U.y,v);p.subCombine(c,O,c,j),d-=l*(n.cross(I.rA,O)+n.cross(V.rA,j)),y.addCombine(u,O,u,j),f+=_*(n.cross(I.rB,O)+n.cross(V.rB,j)),I.normalImpulse=q.x,V.normalImpulse=q.y;break}if(q.x=-I.normalMass*k.x,q.y=0,L=0,D=this.v_K.ex.y*q.x+k.y,q.x>=0&&D>=0){U=n.sub(q,z),O=n.mul(U.x,v),j=n.mul(U.y,v),p.subCombine(c,O,c,j),d-=l*(n.cross(I.rA,O)+n.cross(V.rA,j)),y.addCombine(u,O,u,j),f+=_*(n.cross(I.rB,O)+n.cross(V.rB,j)),I.normalImpulse=q.x,V.normalImpulse=q.y;break}if(q.x=0,q.y=-V.normalMass*k.y,L=this.v_K.ey.x*q.y+k.x,D=0,q.y>=0&&L>=0){U=n.sub(q,z),O=n.mul(U.x,v),j=n.mul(U.y,v),p.subCombine(c,O,c,j),d-=l*(n.cross(I.rA,O)+n.cross(V.rA,j)),y.addCombine(u,O,u,j),f+=_*(n.cross(I.rB,O)+n.cross(V.rB,j)),I.normalImpulse=q.x,V.normalImpulse=q.y;break}if(q.x=0,q.y=0,L=k.x,D=k.y,L>=0&&D>=0){U=n.sub(q,z),O=n.mul(U.x,v),j=n.mul(U.y,v),p.subCombine(c,O,c,j),d-=l*(n.cross(I.rA,O)+n.cross(V.rA,j)),y.addCombine(u,O,u,j),f+=_*(n.cross(I.rB,O)+n.cross(V.rB,j)),I.normalImpulse=q.x,V.normalImpulse=q.y;break}break}}a.v.set(p),a.w=d,h.v.set(y),h.w=f};var v=[];p.addType=function(t,e,i){v[t]=v[t]||{},v[t][e]=i},p.create=function(t,e,i,o){var s,r,n=t.getType(),a=i.getType();if(r=v[n]&&v[n][a])s=new p(t,e,i,o,r);else{if(!(r=v[a]&&v[a][n]))return null;s=new p(i,o,t,e,r)}t=s.getFixtureA(),i=s.getFixtureB(),e=s.getChildIndexA(),o=s.getChildIndexB();var m=t.getBody(),h=i.getBody();return s.m_nodeA.contact=s,s.m_nodeA.other=h,s.m_nodeA.prev=null,s.m_nodeA.next=m.m_contactList,null!=m.m_contactList&&(m.m_contactList.prev=s.m_nodeA),m.m_contactList=s.m_nodeA,s.m_nodeB.contact=s,s.m_nodeB.other=m,s.m_nodeB.prev=null,s.m_nodeB.next=h.m_contactList,null!=h.m_contactList&&(h.m_contactList.prev=s.m_nodeB),h.m_contactList=s.m_nodeB,0==t.isSensor()&&0==i.isSensor()&&(m.setAwake(!0),h.setAwake(!0)),s},p.destroy=function(t,e){var i=t.m_fixtureA,o=t.m_fixtureB,s=i.getBody(),r=o.getBody();t.isTouching()&&e.endContact(t),t.m_nodeA.prev&&(t.m_nodeA.prev.next=t.m_nodeA.next),t.m_nodeA.next&&(t.m_nodeA.next.prev=t.m_nodeA.prev),t.m_nodeA==s.m_contactList&&(s.m_contactList=t.m_nodeA.next),t.m_nodeB.prev&&(t.m_nodeB.prev.next=t.m_nodeB.next),t.m_nodeB.next&&(t.m_nodeB.next.prev=t.m_nodeB.prev),t.m_nodeB==r.m_contactList&&(r.m_contactList=t.m_nodeB.next),t.m_manifold.pointCount>0&&0==i.isSensor()&&0==o.isSensor()&&(s.setAwake(!0),r.setAwake(!0));var n=i.getType(),a=o.getType(),m=v[n][a].destroyFcn;"function"==typeof m&&m(t)}},662:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=u;var s=i(2274),r=i(4896),n=i(5387),a=i(6306),m=i(3406),h=i(2322),c={userData:null,friction:.2,restitution:0,density:0,isSensor:!1,filterGroupIndex:0,filterCategoryBits:1,filterMaskBits:65535};function l(t,e){this.aabb=new m,this.fixture=t,this.childIndex=e,this.proxyId}function u(t,e,i){e.shape?(i=e,e=e.shape):"number"==typeof i&&(i={density:i}),i=r(i,c),this.m_body=t,this.m_friction=i.friction,this.m_restitution=i.restitution,this.m_density=i.density,this.m_isSensor=i.isSensor,this.m_filterGroupIndex=i.filterGroupIndex,this.m_filterCategoryBits=i.filterCategoryBits,this.m_filterMaskBits=i.filterMaskBits,this.m_shape=e,this.m_next=null,this.m_proxies=[],this.m_proxyCount=0;for(var o=this.m_shape.getChildCount(),s=0;s<o;++s)this.m_proxies[s]=new l(this,s);this.m_userData=i.userData}u.prototype._reset=function(){var t=this.getBody(),e=t.m_world.m_broadPhase;this.destroyProxies(e),this.m_shape._reset&&this.m_shape._reset();for(var i=this.m_shape.getChildCount(),o=0;o<i;++o)this.m_proxies[o]=new l(this,o);this.createProxies(e,t.m_xf),t.resetMassData()},u.prototype._serialize=function(){return{friction:this.m_friction,restitution:this.m_restitution,density:this.m_density,isSensor:this.m_isSensor,filterGroupIndex:this.m_filterGroupIndex,filterCategoryBits:this.m_filterCategoryBits,filterMaskBits:this.m_filterMaskBits,shape:this.m_shape}},u._deserialize=function(t,e,i){var o=i(h,t.shape);return o&&new u(e,o,t)},u.prototype.getType=function(){return this.m_shape.getType()},u.prototype.getShape=function(){return this.m_shape},u.prototype.isSensor=function(){return this.m_isSensor},u.prototype.setSensor=function(t){t!=this.m_isSensor&&(this.m_body.setAwake(!0),this.m_isSensor=t)},u.prototype.getUserData=function(){return this.m_userData},u.prototype.setUserData=function(t){this.m_userData=t},u.prototype.getBody=function(){return this.m_body},u.prototype.getNext=function(){return this.m_next},u.prototype.getDensity=function(){return this.m_density},u.prototype.setDensity=function(t){o&&s.assert(n.isFinite(t)&&t>=0),this.m_density=t},u.prototype.getFriction=function(){return this.m_friction},u.prototype.setFriction=function(t){this.m_friction=t},u.prototype.getRestitution=function(){return this.m_restitution},u.prototype.setRestitution=function(t){this.m_restitution=t},u.prototype.testPoint=function(t){return this.m_shape.testPoint(this.m_body.getTransform(),t)},u.prototype.rayCast=function(t,e,i){return this.m_shape.rayCast(t,e,this.m_body.getTransform(),i)},u.prototype.getMassData=function(t){this.m_shape.computeMass(t,this.m_density)},u.prototype.getAABB=function(t){return o&&s.assert(0<=t&&t<this.m_proxyCount),this.m_proxies[t].aabb},u.prototype.createProxies=function(t,e){o&&s.assert(0==this.m_proxyCount),this.m_proxyCount=this.m_shape.getChildCount();for(var i=0;i<this.m_proxyCount;++i){var r=this.m_proxies[i];this.m_shape.computeAABB(r.aabb,e,i),r.proxyId=t.createProxy(r.aabb,r)}},u.prototype.destroyProxies=function(t){for(var e=0;e<this.m_proxyCount;++e){var i=this.m_proxies[e];t.destroyProxy(i.proxyId),i.proxyId=null}this.m_proxyCount=0},u.prototype.synchronize=function(t,e,i){for(var o=0;o<this.m_proxyCount;++o){var s=this.m_proxies[o],r=new m,n=new m;this.m_shape.computeAABB(r,e,s.childIndex),this.m_shape.computeAABB(n,i,s.childIndex),s.aabb.combine(r,n);var h=a.sub(i.p,e.p);t.moveProxy(s.proxyId,s.aabb,h)}},u.prototype.setFilterData=function(t){this.m_filterGroupIndex=t.groupIndex,this.m_filterCategoryBits=t.categoryBits,this.m_filterMaskBits=t.maskBits,this.refilter()},u.prototype.getFilterGroupIndex=function(){return this.m_filterGroupIndex},u.prototype.setFilterGroupIndex=function(t){return this.m_filterGroupIndex=t},u.prototype.getFilterCategoryBits=function(){return this.m_filterCategoryBits},u.prototype.setFilterCategoryBits=function(t){this.m_filterCategoryBits=t},u.prototype.getFilterMaskBits=function(){return this.m_filterMaskBits},u.prototype.setFilterMaskBits=function(t){this.m_filterMaskBits=t},u.prototype.refilter=function(){if(null!=this.m_body){for(var t=this.m_body.getContactList();t;){var e=t.contact,i=e.getFixtureA(),o=e.getFixtureB();i!=this&&o!=this||e.flagForFiltering(),t=t.next}var s=this.m_body.getWorld();if(null!=s)for(var r=s.m_broadPhase,n=0;n<this.m_proxyCount;++n)r.touchProxy(this.m_proxies[n].proxyId)}},u.prototype.shouldCollide=function(t){return t.m_filterGroupIndex==this.m_filterGroupIndex&&0!=t.m_filterGroupIndex?t.m_filterGroupIndex>0:0!=(t.m_filterMaskBits&this.m_filterCategoryBits)&&0!=(t.m_filterCategoryBits&this.m_filterMaskBits)}},5878:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=n;var s=i(2274);function r(){this.other=null,this.joint=null,this.prev=null,this.next=null}function n(t,e,i){e=t.bodyA||e,i=t.bodyB||i,o&&s.assert(e),o&&s.assert(i),o&&s.assert(e!=i),this.m_type="unknown-joint",this.m_bodyA=e,this.m_bodyB=i,this.m_index=0,this.m_collideConnected=!!t.collideConnected,this.m_prev=null,this.m_next=null,this.m_edgeA=new r,this.m_edgeB=new r,this.m_islandFlag=!1,this.m_userData=t.userData}n.TYPES={},n._deserialize=function(t,e,i){var o=n.TYPES[t.type];return o&&i(o,t)},n.prototype.isActive=function(){return this.m_bodyA.isActive()&&this.m_bodyB.isActive()},n.prototype.getType=function(){return this.m_type},n.prototype.getBodyA=function(){return this.m_bodyA},n.prototype.getBodyB=function(){return this.m_bodyB},n.prototype.getNext=function(){return this.m_next},n.prototype.getUserData=function(){return this.m_userData},n.prototype.setUserData=function(t){this.m_userData=t},n.prototype.getCollideConnected=function(){return this.m_collideConnected},n.prototype.getAnchorA=function(){},n.prototype.getAnchorB=function(){},n.prototype.getReactionForce=function(t){},n.prototype.getReactionTorque=function(t){},n.prototype.shiftOrigin=function(t){},n.prototype.initVelocityConstraints=function(t){},n.prototype.solveVelocityConstraints=function(t){},n.prototype.solvePositionConstraints=function(t){}},226:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,i(2274);var o=i(6306),s=i(8850),r=i(5387),n=i(3766);function a(){this.type,this.localNormal=o.zero(),this.localPoint=o.zero(),this.points=[new m,new m],this.pointCount=0}function m(){this.localPoint=o.zero(),this.normalImpulse=0,this.tangentImpulse=0,this.id=new h}function h(){this.cf=new c}function c(){this.indexA,this.indexB,this.typeA,this.typeB}function l(){this.normal,this.points=[],this.separations=[]}t.exports=a,t.exports.clipSegmentToLine=function(t,e,i,s,r){var n=0,m=o.dot(i,e[0].v)-s,h=o.dot(i,e[1].v)-s;if(m<=0&&t[n++].set(e[0]),h<=0&&t[n++].set(e[1]),m*h<0){var c=m/(m-h);t[n].v.setCombine(1-c,e[0].v,c,e[1].v),t[n].id.cf.indexA=r,t[n].id.cf.indexB=e[0].id.cf.indexB,t[n].id.cf.typeA=a.e_vertex,t[n].id.cf.typeB=a.e_face,++n}return n},t.exports.clipVertex=_,t.exports.getPointStates=function(t,e,i,o){for(var s=0;s<i.pointCount;++s){var r=i.points[s].id;t[s]=u.removeState;for(var n=0;n<o.pointCount;++n)if(o.points[n].id.key==r.key){t[s]=u.persistState;break}}for(s=0;s<o.pointCount;++s)for(r=o.points[s].id,e[s]=u.addState,n=0;n<i.pointCount;++n)if(i.points[n].id.key==r.key){e[s]=u.persistState;break}},t.exports.PointState=u,a.e_circles=0,a.e_faceA=1,a.e_faceB=2,a.e_vertex=0,a.e_face=1,Object.defineProperty(h.prototype,"key",{get:function(){return this.cf.indexA+4*this.cf.indexB+16*this.cf.typeA+64*this.cf.typeB},enumerable:!0,configurable:!0}),h.prototype.set=function(t){this.cf.set(t.cf)},c.prototype.set=function(t){this.indexA=t.indexA,this.indexB=t.indexB,this.typeA=t.typeA,this.typeB=t.typeB},a.prototype.getWorldManifold=function(t,e,i,m,h){if(0!=this.pointCount){var c=(t=t||new l).normal,u=t.points,_=t.separations;switch(this.type){case a.e_circles:c=o.neo(1,0);var p=s.mulVec2(e,this.localPoint),d=s.mulVec2(m,this.points[0].localPoint),y=o.sub(d,p);o.lengthSquared(y)>r.EPSILON*r.EPSILON&&(c.set(y),c.normalize());var f=p.clone().addMul(i,c),v=d.clone().addMul(-h,c);u[0]=o.mid(f,v),_[0]=o.dot(o.sub(v,f),c),u.length=1,_.length=1;break;case a.e_faceA:c=n.mulVec2(e.q,this.localNormal);for(var g=s.mulVec2(e,this.localPoint),x=0;x<this.pointCount;++x){var A=s.mulVec2(m,this.points[x].localPoint);f=o.clone(A).addMul(i-o.dot(o.sub(A,g),c),c),v=o.clone(A).subMul(h,c),u[x]=o.mid(f,v),_[x]=o.dot(o.sub(v,f),c)}u.length=this.pointCount,_.length=this.pointCount;break;case a.e_faceB:for(c=n.mulVec2(m.q,this.localNormal),g=s.mulVec2(m,this.localPoint),x=0;x<this.pointCount;++x)A=s.mulVec2(e,this.points[x].localPoint),v=o.combine(1,A,h-o.dot(o.sub(A,g),c),c),f=o.combine(1,A,-i,c),u[x]=o.mid(f,v),_[x]=o.dot(o.sub(f,v),c);u.length=this.pointCount,_.length=this.pointCount,c.mul(-1)}return t.normal=c,t.points=u,t.separations=_,t}};var u={nullState:0,addState:1,persistState:2,removeState:3};function _(){this.v=o.zero(),this.id=new h}_.prototype.set=function(t){this.v.set(t.v),this.id.set(t.id)}},1099:(t,e)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT;var i=e;i.maxManifoldPoints=2,i.maxPolygonVertices=12,i.aabbExtension=.1,i.aabbMultiplier=2,i.linearSlop=.005,i.linearSlopSquared=i.linearSlop*i.linearSlop,i.angularSlop=2/180*Math.PI,i.polygonRadius=2*i.linearSlop,i.maxSubSteps=8,i.maxTOIContacts=32,i.maxTOIIterations=20,i.maxDistnceIterations=20,i.velocityThreshold=1,i.maxLinearCorrection=.2,i.maxAngularCorrection=8/180*Math.PI,i.maxTranslation=2,i.maxTranslationSquared=i.maxTranslation*i.maxTranslation,i.maxRotation=.5*Math.PI,i.maxRotationSquared=i.maxRotation*i.maxRotation,i.baumgarte=.2,i.toiBaugarte=.75,i.timeToSleep=.5,i.linearSleepTolerance=.01,i.linearSleepToleranceSqr=Math.pow(i.linearSleepTolerance,2),i.angularSleepTolerance=2/180*Math.PI,i.angularSleepToleranceSqr=Math.pow(i.angularSleepTolerance,2)},2322:(t,e,i)=>{function o(){this.m_type,this.m_radius}"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=o,i(5387),o.prototype._reset=function(){},o.prototype._serialize=function(){return{}},o.TYPES={},o._deserialize=function(t,e,i){var s=o.TYPES[t.type];return s&&i(s,t)},o.isValid=function(t){return!!t},o.prototype.getRadius=function(){return this.m_radius},o.prototype.getType=function(){return this.m_type},o.prototype._clone=function(){},o.prototype.getChildCount=function(){},o.prototype.testPoint=function(t,e){},o.prototype.rayCast=function(t,e,i,o){},o.prototype.computeAABB=function(t,e,i){},o.prototype.computeMass=function(t,e){},o.prototype.computeDistanceProxy=function(t){}},2260:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=f,t.exports.TimeStep=y;var r=i(1099),n=i(2274),a=i(6306),m=i(5387),h=i(2129),c=i(8730),l=i(5878),u=i(8650),_=u.Input,p=u.Output,d=i(8054);function y(t){this.dt=0,this.inv_dt=0,this.velocityIterations=0,this.positionIterations=0,this.warmStarting=!1,this.blockSolve=!0,this.inv_dt0=0,this.dtRatio=1}function f(t){this.m_world=t,this.m_stack=[],this.m_bodies=[],this.m_contacts=[],this.m_joints=[]}d.Input,d.Output,d.Proxy,d.Cache,y.prototype.reset=function(t){this.dt>0&&(this.inv_dt0=this.inv_dt),this.dt=t,this.inv_dt=0==t?0:1/t,this.dtRatio=t*this.inv_dt0},f.prototype.clear=function(){this.m_stack.length=0,this.m_bodies.length=0,this.m_contacts.length=0,this.m_joints.length=0},f.prototype.addBody=function(t){s&&n.assert(t instanceof h,"Not a Body!",t),this.m_bodies.push(t)},f.prototype.addContact=function(t){s&&n.assert(t instanceof c,"Not a Contact!",t),this.m_contacts.push(t)},f.prototype.addJoint=function(t){s&&n.assert(t instanceof l,"Not a Joint!",t),this.m_joints.push(t)},f.prototype.solveWorld=function(t){for(var e=this.m_world,i=e.m_bodyList;i;i=i.m_next)i.m_islandFlag=!1;for(var o=e.m_contactList;o;o=o.m_next)o.m_islandFlag=!1;for(var r=e.m_jointList;r;r=r.m_next)r.m_islandFlag=!1;for(var a=this.m_stack,m=e.m_bodyList;m;m=m.m_next)if(!m.m_islandFlag&&0!=m.isAwake()&&0!=m.isActive()&&!m.isStatic()){for(this.clear(),a.push(m),m.m_islandFlag=!0;a.length>0;)if(i=a.pop(),s&&n.assert(1==i.isActive()),this.addBody(i),i.setAwake(!0),!i.isStatic()){for(var h=i.m_contactList;h;h=h.next){var c=h.contact;if(!c.m_islandFlag&&0!=c.isEnabled()&&0!=c.isTouching()){var l=c.m_fixtureA.m_isSensor,u=c.m_fixtureB.m_isSensor;l||u||(this.addContact(c),c.m_islandFlag=!0,(p=h.other).m_islandFlag||(a.push(p),p.m_islandFlag=!0))}}for(var _=i.m_jointList;_;_=_.next){var p;1!=_.joint.m_islandFlag&&0!=(p=_.other).isActive()&&(this.addJoint(_.joint),_.joint.m_islandFlag=!0,p.m_islandFlag||(a.push(p),p.m_islandFlag=!0))}}this.solveIsland(t);for(var d=0;d<this.m_bodies.length;++d)(i=this.m_bodies[d]).isStatic()&&(i.m_islandFlag=!1)}},f.prototype.solveIsland=function(t){for(var e=this.m_world,i=e.m_gravity,s=e.m_allowSleep,n=t.dt,h=0;h<this.m_bodies.length;++h){var c=this.m_bodies[h],l=a.clone(c.m_sweep.c),u=c.m_sweep.a,_=a.clone(c.m_linearVelocity),p=c.m_angularVelocity;c.m_sweep.c0.set(c.m_sweep.c),c.m_sweep.a0=c.m_sweep.a,c.isDynamic()&&(_.addMul(n*c.m_gravityScale,i),_.addMul(n*c.m_invMass,c.m_force),p+=n*c.m_invI*c.m_torque,_.mul(1/(1+n*c.m_linearDamping)),p*=1/(1+n*c.m_angularDamping)),c.c_position.c=l,c.c_position.a=u,c.c_velocity.v=_,c.c_velocity.w=p}for(h=0;h<this.m_contacts.length;++h)this.m_contacts[h].initConstraint(t);for(o&&this.printBodies("M: "),h=0;h<this.m_contacts.length;++h)this.m_contacts[h].initVelocityConstraint(t);if(o&&this.printBodies("R: "),t.warmStarting)for(h=0;h<this.m_contacts.length;++h)this.m_contacts[h].warmStartConstraint(t);for(o&&this.printBodies("Q: "),h=0;h<this.m_joints.length;++h)this.m_joints[h].initVelocityConstraints(t);for(o&&this.printBodies("E: "),h=0;h<t.velocityIterations;++h){for(var d=0;d<this.m_joints.length;++d)this.m_joints[d].solveVelocityConstraints(t);for(d=0;d<this.m_contacts.length;++d)this.m_contacts[d].solveVelocityConstraint(t)}for(o&&this.printBodies("D: "),h=0;h<this.m_contacts.length;++h)this.m_contacts[h].storeConstraintImpulses(t);for(o&&this.printBodies("C: "),h=0;h<this.m_bodies.length;++h){c=this.m_bodies[h],l=a.clone(c.c_position.c),u=c.c_position.a,_=a.clone(c.c_velocity.v),p=c.c_velocity.w;var y=a.mul(n,_);if(a.lengthSquared(y)>r.maxTranslationSquared){var f=r.maxTranslation/y.length();_.mul(f)}var v=n*p;v*v>r.maxRotationSquared&&(p*=f=r.maxRotation/m.abs(v)),l.addMul(n,_),u+=n*p,c.c_position.c.set(l),c.c_position.a=u,c.c_velocity.v.set(_),c.c_velocity.w=p}o&&this.printBodies("B: ");var g=!1;for(h=0;h<t.positionIterations;++h){var x=0;for(d=0;d<this.m_contacts.length;++d){var A=this.m_contacts[d].solvePositionConstraint(t);x=m.min(x,A)}var b=x>=-3*r.linearSlop,B=!0;for(d=0;d<this.m_joints.length;++d){var w=this.m_joints[d].solvePositionConstraints(t);B=B&&w}if(b&&B){g=!0;break}}for(o&&this.printBodies("L: "),h=0;h<this.m_bodies.length;++h)(c=this.m_bodies[h]).m_sweep.c.set(c.c_position.c),c.m_sweep.a=c.c_position.a,c.m_linearVelocity.set(c.c_velocity.v),c.m_angularVelocity=c.c_velocity.w,c.synchronizeTransform();if(this.postSolveIsland(),s){var S=1/0,C=r.linearSleepToleranceSqr,T=r.angularSleepToleranceSqr;for(h=0;h<this.m_bodies.length;++h)(c=this.m_bodies[h]).isStatic()||(0==c.m_autoSleepFlag||c.m_angularVelocity*c.m_angularVelocity>T||a.lengthSquared(c.m_linearVelocity)>C?(c.m_sleepTime=0,S=0):(c.m_sleepTime+=n,S=m.min(S,c.m_sleepTime)));if(S>=r.timeToSleep&&g)for(h=0;h<this.m_bodies.length;++h)(c=this.m_bodies[h]).setAwake(!1)}},f.prototype.printBodies=function(t){for(var e=0;e<this.m_bodies.length;++e){var i=this.m_bodies[e];n.debug(t,i.c_position.a,i.c_position.c.x,i.c_position.c.y,i.c_velocity.w,i.c_velocity.v.x,i.c_velocity.v.y)}};var v=new y;function g(){this.normalImpulses=[],this.tangentImpulses=[]}f.prototype.solveWorldTOI=function(t){var e=this.m_world;if(e.m_stepComplete){for(var i=e.m_bodyList;i;i=i.m_next)i.m_islandFlag=!1,i.m_sweep.alpha0=0;for(var a=e.m_contactList;a;a=a.m_next)a.m_toiFlag=!1,a.m_islandFlag=!1,a.m_toiCount=0,a.m_toi=1}for(;;){var h=null,c=1;for(a=e.m_contactList;a;a=a.m_next)if(0!=a.isEnabled()&&!(a.m_toiCount>r.maxSubSteps)){var l=1;if(a.m_toiFlag)l=a.m_toi;else{var d=a.getFixtureA(),y=a.getFixtureB();if(d.isSensor()||y.isSensor())continue;var f=d.getBody(),g=y.getBody();s&&n.assert(f.isDynamic()||g.isDynamic());var x=f.isAwake()&&!f.isStatic(),A=g.isAwake()&&!g.isStatic();if(0==x&&0==A)continue;var b=f.isBullet()||!f.isDynamic(),B=g.isBullet()||!g.isDynamic();if(0==b&&0==B)continue;var w=f.m_sweep.alpha0;f.m_sweep.alpha0<g.m_sweep.alpha0?(w=g.m_sweep.alpha0,f.m_sweep.advance(w)):g.m_sweep.alpha0<f.m_sweep.alpha0&&(w=f.m_sweep.alpha0,g.m_sweep.advance(w)),s&&n.assert(w<1);var S=a.getChildIndexA(),C=a.getChildIndexB(),T=(f.m_sweep,g.m_sweep,new _);T.proxyA.set(d.getShape(),S),T.proxyB.set(y.getShape(),C),T.sweepA.set(f.m_sweep),T.sweepB.set(g.m_sweep),T.tMax=1;var M=new p;u(M,T);var P=M.t;l=M.state==p.e_touching?m.min(w+(1-w)*P,1):1,a.m_toi=l,a.m_toiFlag=!0}l<c&&(h=a,c=l)}if(null==h||1-10*m.EPSILON<c){e.m_stepComplete=!0;break}d=h.getFixtureA(),y=h.getFixtureB(),f=d.getBody(),g=y.getBody();var E=f.m_sweep.clone(),I=g.m_sweep.clone();if(f.advance(c),g.advance(c),h.update(e),h.m_toiFlag=!1,++h.m_toiCount,0!=h.isEnabled()&&0!=h.isTouching()){f.setAwake(!0),g.setAwake(!0),this.clear(),this.addBody(f),this.addBody(g),this.addContact(h),f.m_islandFlag=!0,g.m_islandFlag=!0,h.m_islandFlag=!0;for(var V=[f,g],z=0;z<V.length;++z)if((U=V[z]).isDynamic())for(var F=U.m_contactList;F;F=F.next){var R=F.contact;if(!R.m_islandFlag){var L=F.other;if(!L.isDynamic()||U.isBullet()||L.isBullet()){var D=R.m_fixtureA.m_isSensor,k=R.m_fixtureB.m_isSensor;if(!D&&!k){var q=L.m_sweep.clone();0==L.m_islandFlag&&L.advance(c),R.update(e),0!=R.isEnabled()&&0!=R.isTouching()?(R.m_islandFlag=!0,this.addContact(R),L.m_islandFlag||(L.m_islandFlag=!0,L.isStatic()||L.setAwake(!0),this.addBody(L))):(L.m_sweep.set(q),L.synchronizeTransform())}}}}for(v.reset((1-c)*t.dt),v.dtRatio=1,v.positionIterations=20,v.velocityIterations=t.velocityIterations,v.warmStarting=!1,this.solveIslandTOI(v,f,g),z=0;z<this.m_bodies.length;++z){var U;if((U=this.m_bodies[z]).m_islandFlag=!1,U.isDynamic())for(U.synchronizeFixtures(),F=U.m_contactList;F;F=F.next)F.contact.m_toiFlag=!1,F.contact.m_islandFlag=!1}if(e.findNewContacts(),e.m_subStepping){e.m_stepComplete=!1;break}}else h.setEnabled(!1),f.m_sweep.set(E),g.m_sweep.set(I),f.synchronizeTransform(),g.synchronizeTransform()}if(o)for(i=e.m_bodyList;i;i=i.m_next)a=i.m_sweep.c,i.m_sweep.a,i.m_linearVelocity,i.m_angularVelocity},f.prototype.solveIslandTOI=function(t,e,i){this.m_world;for(var o=0;o<this.m_bodies.length;++o)(l=this.m_bodies[o]).c_position.c.set(l.m_sweep.c),l.c_position.a=l.m_sweep.a,l.c_velocity.v.set(l.m_linearVelocity),l.c_velocity.w=l.m_angularVelocity;for(o=0;o<this.m_contacts.length;++o)this.m_contacts[o].initConstraint(t);for(o=0;o<t.positionIterations;++o){for(var s=0,n=0;n<this.m_contacts.length;++n){var h=this.m_contacts[n].solvePositionConstraintTOI(t,e,i);s=m.min(s,h)}if(s>=-1.5*r.linearSlop)break}for(e.m_sweep.c0.set(e.c_position.c),e.m_sweep.a0=e.c_position.a,i.m_sweep.c0.set(i.c_position.c),i.m_sweep.a0=i.c_position.a,o=0;o<this.m_contacts.length;++o)this.m_contacts[o].initVelocityConstraint(t);for(o=0;o<t.velocityIterations;++o)for(n=0;n<this.m_contacts.length;++n)this.m_contacts[n].solveVelocityConstraint(t);var c=t.dt;for(o=0;o<this.m_bodies.length;++o){var l=this.m_bodies[o],u=a.clone(l.c_position.c),_=l.c_position.a,p=a.clone(l.c_velocity.v),d=l.c_velocity.w,y=a.mul(c,p);if(a.dot(y,y)>r.maxTranslationSquared){var f=r.maxTranslation/y.length();p.mul(f)}var v=c*d;v*v>r.maxRotationSquared&&(d*=f=r.maxRotation/m.abs(v)),u.addMul(c,p),_+=c*d,l.c_position.c=u,l.c_position.a=_,l.c_velocity.v=p,l.c_velocity.w=d,l.m_sweep.c=u,l.m_sweep.a=_,l.m_linearVelocity=p,l.m_angularVelocity=d,l.synchronizeTransform()}this.postSolveIsland()},f.prototype.postSolveIsland=function(){for(var t=new g,e=0;e<this.m_contacts.length;++e){for(var i=this.m_contacts[e],o=0;o<i.v_points.length;++o)t.normalImpulses.push(i.v_points[o].normalImpulse),t.tangentImpulses.push(i.v_points[o].tangentImpulse);this.m_world.postSolve(i,t)}}},6972:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=_;var s=i(4896),r=i(2274),n=i(6306),a=i(7929),m=i(2260),h=i(2129),c=i(5878),l=i(8730),u={gravity:n.zero(),allowSleep:!0,warmStarting:!0,continuousPhysics:!0,subStepping:!1,blockSolve:!0,velocityIterations:8,positionIterations:3};function _(t){if(!(this instanceof _))return new _(t);t&&n.isValid(t)&&(t={gravity:t}),t=s(t,u),this.m_solver=new m(this),this.m_broadPhase=new a,this.m_contactList=null,this.m_contactCount=0,this.m_bodyList=null,this.m_bodyCount=0,this.m_jointList=null,this.m_jointCount=0,this.m_stepComplete=!0,this.m_allowSleep=t.allowSleep,this.m_gravity=n.clone(t.gravity),this.m_clearForces=!0,this.m_newFixture=!1,this.m_locked=!1,this.m_warmStarting=t.warmStarting,this.m_continuousPhysics=t.continuousPhysics,this.m_subStepping=t.subStepping,this.m_blockSolve=t.blockSolve,this.m_velocityIterations=t.velocityIterations,this.m_positionIterations=t.positionIterations,this.m_t=0,this.m_stepCount=0,this.addPair=this.createContact.bind(this)}_.prototype._serialize=function(){for(var t=[],e=[],i=this.getBodyList();i;i=i.getNext())t.push(i);for(var o=this.getJointList();o;o=o.getNext())"function"==typeof o._serialize&&e.push(o);return{gravity:this.m_gravity,bodies:t,joints:e}},_._deserialize=function(t,e,i){if(!t)return new _;var o=new _(t.gravity);if(t.bodies)for(var s=t.bodies.length-1;s>=0;s-=1)o._addBody(i(h,t.bodies[s],o));if(t.joints)for(s=t.joints.length-1;s>=0;s--)o.createJoint(i(c,t.joints[s],o));return o},_.prototype.getBodyList=function(){return this.m_bodyList},_.prototype.getJointList=function(){return this.m_jointList},_.prototype.getContactList=function(){return this.m_contactList},_.prototype.getBodyCount=function(){return this.m_bodyCount},_.prototype.getJointCount=function(){return this.m_jointCount},_.prototype.getContactCount=function(){return this.m_contactCount},_.prototype.setGravity=function(t){this.m_gravity=t},_.prototype.getGravity=function(){return this.m_gravity},_.prototype.isLocked=function(){return this.m_locked},_.prototype.setAllowSleeping=function(t){if(t!=this.m_allowSleep&&(this.m_allowSleep=t,0==this.m_allowSleep))for(var e=this.m_bodyList;e;e=e.m_next)e.setAwake(!0)},_.prototype.getAllowSleeping=function(){return this.m_allowSleep},_.prototype.setWarmStarting=function(t){this.m_warmStarting=t},_.prototype.getWarmStarting=function(){return this.m_warmStarting},_.prototype.setContinuousPhysics=function(t){this.m_continuousPhysics=t},_.prototype.getContinuousPhysics=function(){return this.m_continuousPhysics},_.prototype.setSubStepping=function(t){this.m_subStepping=t},_.prototype.getSubStepping=function(){return this.m_subStepping},_.prototype.setAutoClearForces=function(t){this.m_clearForces=t},_.prototype.getAutoClearForces=function(){return this.m_clearForces},_.prototype.clearForces=function(){for(var t=this.m_bodyList;t;t=t.getNext())t.m_force.setZero(),t.m_torque=0},_.prototype.queryAABB=function(t,e){o&&r.assert("function"==typeof e);var i=this.m_broadPhase;this.m_broadPhase.query(t,(function(t){var o=i.getUserData(t);return e(o.fixture)}))},_.prototype.rayCast=function(t,e,i){o&&r.assert("function"==typeof i);var s=this.m_broadPhase;this.m_broadPhase.rayCast({maxFraction:1,p1:t,p2:e},(function(t,e){var o=s.getUserData(e),r=o.fixture,a=o.childIndex,m={};if(r.rayCast(m,t,a)){var h=m.fraction,c=n.add(n.mul(1-h,t.p1),n.mul(h,t.p2));return i(r,c,m.normal,h)}return t.maxFraction}))},_.prototype.getProxyCount=function(){return this.m_broadPhase.getProxyCount()},_.prototype.getTreeHeight=function(){return this.m_broadPhase.getTreeHeight()},_.prototype.getTreeBalance=function(){return this.m_broadPhase.getTreeBalance()},_.prototype.getTreeQuality=function(){return this.m_broadPhase.getTreeQuality()},_.prototype.shiftOrigin=function(t){if(o&&r.assert(0==this.m_locked),!this.m_locked){for(var e=this.m_bodyList;e;e=e.m_next)e.m_xf.p.sub(t),e.m_sweep.c0.sub(t),e.m_sweep.c.sub(t);for(var i=this.m_jointList;i;i=i.m_next)i.shiftOrigin(t);this.m_broadPhase.shiftOrigin(t)}},_.prototype._addBody=function(t){o&&r.assert(!1===this.isLocked()),this.isLocked()||(t.m_prev=null,t.m_next=this.m_bodyList,this.m_bodyList&&(this.m_bodyList.m_prev=t),this.m_bodyList=t,++this.m_bodyCount)},_.prototype.createBody=function(t,e){if(o&&r.assert(0==this.isLocked()),this.isLocked())return null;t&&n.isValid(t)&&(t={position:t,angle:e});var i=new h(this,t);return this._addBody(i),i},_.prototype.createDynamicBody=function(t,e){return t?n.isValid(t)&&(t={position:t,angle:e}):t={},t.type="dynamic",this.createBody(t)},_.prototype.createKinematicBody=function(t,e){return t?n.isValid(t)&&(t={position:t,angle:e}):t={},t.type="kinematic",this.createBody(t)},_.prototype.destroyBody=function(t){if(o&&r.assert(this.m_bodyCount>0),o&&r.assert(0==this.isLocked()),!this.isLocked()){if(t.m_destroyed)return!1;for(var e=t.m_jointList;e;){var i=e;e=e.next,this.publish("remove-joint",i.joint),this.destroyJoint(i.joint),t.m_jointList=e}t.m_jointList=null;for(var s=t.m_contactList;s;){var n=s;s=s.next,this.destroyContact(n.contact),t.m_contactList=s}t.m_contactList=null;for(var a=t.m_fixtureList;a;){var m=a;a=a.m_next,this.publish("remove-fixture",m),m.destroyProxies(this.m_broadPhase),t.m_fixtureList=a}return t.m_fixtureList=null,t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t==this.m_bodyList&&(this.m_bodyList=t.m_next),t.m_destroyed=!0,--this.m_bodyCount,this.publish("remove-body",t),!0}},_.prototype.createJoint=function(t){if(o&&r.assert(!!t.m_bodyA),o&&r.assert(!!t.m_bodyB),o&&r.assert(0==this.isLocked()),this.isLocked())return null;if(t.m_prev=null,t.m_next=this.m_jointList,this.m_jointList&&(this.m_jointList.m_prev=t),this.m_jointList=t,++this.m_jointCount,t.m_edgeA.joint=t,t.m_edgeA.other=t.m_bodyB,t.m_edgeA.prev=null,t.m_edgeA.next=t.m_bodyA.m_jointList,t.m_bodyA.m_jointList&&(t.m_bodyA.m_jointList.prev=t.m_edgeA),t.m_bodyA.m_jointList=t.m_edgeA,t.m_edgeB.joint=t,t.m_edgeB.other=t.m_bodyA,t.m_edgeB.prev=null,t.m_edgeB.next=t.m_bodyB.m_jointList,t.m_bodyB.m_jointList&&(t.m_bodyB.m_jointList.prev=t.m_edgeB),t.m_bodyB.m_jointList=t.m_edgeB,0==t.m_collideConnected)for(var e=t.m_bodyB.getContactList();e;e=e.next)e.other==t.m_bodyA&&e.contact.flagForFiltering();return t},_.prototype.destroyJoint=function(t){if(o&&r.assert(0==this.isLocked()),!this.isLocked()){t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t==this.m_jointList&&(this.m_jointList=t.m_next);var e=t.m_bodyA,i=t.m_bodyB;if(e.setAwake(!0),i.setAwake(!0),t.m_edgeA.prev&&(t.m_edgeA.prev.next=t.m_edgeA.next),t.m_edgeA.next&&(t.m_edgeA.next.prev=t.m_edgeA.prev),t.m_edgeA==e.m_jointList&&(e.m_jointList=t.m_edgeA.next),t.m_edgeA.prev=null,t.m_edgeA.next=null,t.m_edgeB.prev&&(t.m_edgeB.prev.next=t.m_edgeB.next),t.m_edgeB.next&&(t.m_edgeB.next.prev=t.m_edgeB.prev),t.m_edgeB==i.m_jointList&&(i.m_jointList=t.m_edgeB.next),t.m_edgeB.prev=null,t.m_edgeB.next=null,o&&r.assert(this.m_jointCount>0),--this.m_jointCount,0==t.m_collideConnected)for(var s=i.getContactList();s;)s.other==e&&s.contact.flagForFiltering(),s=s.next;this.publish("remove-joint",t)}};var p=new m.TimeStep;_.prototype.step=function(t,e,i){if((0|e)!==e&&(e=0),e=e||this.m_velocityIterations,i=i||this.m_positionIterations,this.m_stepCount++,this.m_newFixture&&(this.findNewContacts(),this.m_newFixture=!1),this.m_locked=!0,p.reset(t),p.velocityIterations=e,p.positionIterations=i,p.warmStarting=this.m_warmStarting,p.blockSolve=this.m_blockSolve,this.updateContacts(),this.m_stepComplete&&t>0){this.m_solver.solveWorld(p);for(var o=this.m_bodyList;o;o=o.getNext())0!=o.m_islandFlag&&(o.isStatic()||o.synchronizeFixtures());this.findNewContacts()}this.m_continuousPhysics&&t>0&&this.m_solver.solveWorldTOI(p),this.m_clearForces&&this.clearForces(),this.m_locked=!1},_.prototype.findNewContacts=function(){this.m_broadPhase.updatePairs(this.addPair)},_.prototype.createContact=function(t,e){var i=t.fixture,o=e.fixture,s=t.childIndex,r=e.childIndex,n=i.getBody(),a=o.getBody();if(n!=a){for(var m=a.getContactList();m;){if(m.other==n){var h=m.contact.getFixtureA(),c=m.contact.getFixtureB(),u=m.contact.getChildIndexA(),_=m.contact.getChildIndexB();if(h==i&&c==o&&u==s&&_==r)return;if(h==o&&c==i&&u==r&&_==s)return}m=m.next}if(0!=a.shouldCollide(n)&&0!=o.shouldCollide(i)){var p=l.create(i,s,o,r);null!=p&&(p.m_prev=null,null!=this.m_contactList&&(p.m_next=this.m_contactList,this.m_contactList.m_prev=p),this.m_contactList=p,++this.m_contactCount)}}},_.prototype.updateContacts=function(){for(var t,e=this.m_contactList;t=e;){e=t.getNext();var i=t.getFixtureA(),o=t.getFixtureB(),s=t.getChildIndexA(),r=t.getChildIndexB(),n=i.getBody(),a=o.getBody();if(t.m_filterFlag){if(0==a.shouldCollide(n)){this.destroyContact(t);continue}if(0==o.shouldCollide(i)){this.destroyContact(t);continue}t.m_filterFlag=!1}var m=n.isAwake()&&!n.isStatic(),h=a.isAwake()&&!a.isStatic();if(0!=m||0!=h){var c=i.m_proxies[s].proxyId,l=o.m_proxies[r].proxyId;0!=this.m_broadPhase.testOverlap(c,l)?t.update(this):this.destroyContact(t)}}},_.prototype.destroyContact=function(t){l.destroy(t,this),t.m_prev&&(t.m_prev.m_next=t.m_next),t.m_next&&(t.m_next.m_prev=t.m_prev),t==this.m_contactList&&(this.m_contactList=t.m_next),--this.m_contactCount},_.prototype._listeners=null,_.prototype.on=function(t,e){return"string"!=typeof t||"function"!=typeof e||(this._listeners||(this._listeners={}),this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e)),this},_.prototype.off=function(t,e){if("string"!=typeof t||"function"!=typeof e)return this;var i=this._listeners&&this._listeners[t];if(!i||!i.length)return this;var o=i.indexOf(e);return o>=0&&i.splice(o,1),this},_.prototype.publish=function(t,e,i,o){var s=this._listeners&&this._listeners[t];if(!s||!s.length)return 0;for(var r=0;r<s.length;r++)s[r].call(this,e,i,o);return s.length},_.prototype.beginContact=function(t){this.publish("begin-contact",t)},_.prototype.endContact=function(t){this.publish("end-contact",t)},_.prototype.preSolve=function(t,e){this.publish("pre-solve",t,e)},_.prototype.postSolve=function(t,e){this.publish("post-solve",t,e)}},3406:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT,r=(i(1099),i(2274)),n=i(5387),a=i(6306);function m(t,e){if(!(this instanceof m))return new m(t,e);this.lowerBound=a.zero(),this.upperBound=a.zero(),"object"==typeof t&&this.lowerBound.set(t),"object"==typeof e?this.upperBound.set(e):"object"==typeof t&&this.upperBound.set(t)}t.exports=m,m.prototype.isValid=function(){return m.isValid(this)},m.isValid=function(t){var e=a.sub(t.upperBound,t.lowerBound);return e.x>=0&&e.y>=0&&a.isValid(t.lowerBound)&&a.isValid(t.upperBound)},m.assert=function(t){if(s&&!m.isValid(t))throw o&&r.debug(t),new Error("Invalid AABB!")},m.prototype.getCenter=function(){return a.neo(.5*(this.lowerBound.x+this.upperBound.x),.5*(this.lowerBound.y+this.upperBound.y))},m.prototype.getExtents=function(){return a.neo(.5*(this.upperBound.x-this.lowerBound.x),.5*(this.upperBound.y-this.lowerBound.y))},m.prototype.getPerimeter=function(){return 2*(this.upperBound.x-this.lowerBound.x+this.upperBound.y-this.lowerBound.y)},m.prototype.combine=function(t,e){e=e||this;var i=t.lowerBound,o=t.upperBound,s=e.lowerBound,r=e.upperBound,a=n.min(i.x,s.x),m=n.min(i.y,s.y),h=n.max(r.x,o.x),c=n.max(r.y,o.y);this.lowerBound.set(a,m),this.upperBound.set(h,c)},m.prototype.combinePoints=function(t,e){this.lowerBound.set(n.min(t.x,e.x),n.min(t.y,e.y)),this.upperBound.set(n.max(t.x,e.x),n.max(t.y,e.y))},m.prototype.set=function(t){this.lowerBound.set(t.lowerBound.x,t.lowerBound.y),this.upperBound.set(t.upperBound.x,t.upperBound.y)},m.prototype.contains=function(t){var e=!0;return(e=(e=(e=e&&this.lowerBound.x<=t.lowerBound.x)&&this.lowerBound.y<=t.lowerBound.y)&&t.upperBound.x<=this.upperBound.x)&&t.upperBound.y<=this.upperBound.y},m.prototype.extend=function(t){return m.extend(this,t),this},m.extend=function(t,e){t.lowerBound.x-=e,t.lowerBound.y-=e,t.upperBound.x+=e,t.upperBound.y+=e},m.testOverlap=function(t,e){var i=e.lowerBound.x-t.upperBound.x,o=t.lowerBound.x-e.upperBound.x,s=e.lowerBound.y-t.upperBound.y,r=t.lowerBound.y-e.upperBound.y;return!(i>0||s>0||o>0||r>0)},m.areEqual=function(t,e){return a.areEqual(t.lowerBound,e.lowerBound)&&a.areEqual(t.upperBound,e.upperBound)},m.diff=function(t,e){var i=n.max(0,n.min(t.upperBound.x,e.upperBound.x)-n.max(e.lowerBound.x,t.lowerBound.x)),o=n.max(0,n.min(t.upperBound.y,e.upperBound.y)-n.max(e.lowerBound.y,t.lowerBound.y));return(t.upperBound.x-t.lowerBound.x)*(t.upperBound.y-t.lowerBound.y)+(e.upperBound.x-e.lowerBound.x)*(e.upperBound.y-e.lowerBound.y)-i*o},m.prototype.rayCast=function(t,e){for(var i=-1/0,o=1/0,s=e.p1,r=a.sub(e.p2,e.p1),m=a.abs(r),h=a.zero(),c="x";null!==c;c="x"===c?"y":null)if(m.x<n.EPSILON){if(s[c]<this.lowerBound[c]||this.upperBound[c]<s[c])return!1}else{var l=1/r[c],u=(this.lowerBound[c]-s[c])*l,_=(this.upperBound[c]-s[c])*l,p=-1;if(u>_){var d=u;u=_,_=d,p=1}if(u>i&&(h.setZero(),h[c]=p,i=u),i>(o=n.min(o,_)))return!1}return!(i<0||e.maxFraction<i||(t.fraction=i,t.normal=h,0))},m.prototype.toString=function(){return JSON.stringify(this)}},7929:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=(i(1099),i(2274)),r=i(5387),n=i(3406),a=i(2454);function m(){this.m_tree=new a,this.m_proxyCount=0,this.m_moveBuffer=[],this.queryCallback=this.queryCallback.bind(this)}t.exports=m,m.prototype.getUserData=function(t){return this.m_tree.getUserData(t)},m.prototype.testOverlap=function(t,e){var i=this.m_tree.getFatAABB(t),o=this.m_tree.getFatAABB(e);return n.testOverlap(i,o)},m.prototype.getFatAABB=function(t){return this.m_tree.getFatAABB(t)},m.prototype.getProxyCount=function(){return this.m_proxyCount},m.prototype.getTreeHeight=function(){return this.m_tree.getHeight()},m.prototype.getTreeBalance=function(){return this.m_tree.getMaxBalance()},m.prototype.getTreeQuality=function(){return this.m_tree.getAreaRatio()},m.prototype.query=function(t,e){this.m_tree.query(t,e)},m.prototype.rayCast=function(t,e){this.m_tree.rayCast(t,e)},m.prototype.shiftOrigin=function(t){this.m_tree.shiftOrigin(t)},m.prototype.createProxy=function(t,e){o&&s.assert(n.isValid(t));var i=this.m_tree.createProxy(t,e);return this.m_proxyCount++,this.bufferMove(i),i},m.prototype.destroyProxy=function(t){this.unbufferMove(t),this.m_proxyCount--,this.m_tree.destroyProxy(t)},m.prototype.moveProxy=function(t,e,i){o&&s.assert(n.isValid(e)),this.m_tree.moveProxy(t,e,i)&&this.bufferMove(t)},m.prototype.touchProxy=function(t){this.bufferMove(t)},m.prototype.bufferMove=function(t){this.m_moveBuffer.push(t)},m.prototype.unbufferMove=function(t){for(var e=0;e<this.m_moveBuffer.length;++e)this.m_moveBuffer[e]==t&&(this.m_moveBuffer[e]=null)},m.prototype.updatePairs=function(t){for(o&&s.assert("function"==typeof t),this.m_callback=t;this.m_moveBuffer.length>0;)if(this.m_queryProxyId=this.m_moveBuffer.pop(),null!==this.m_queryProxyId){var e=this.m_tree.getFatAABB(this.m_queryProxyId);this.m_tree.query(e,this.queryCallback)}},m.prototype.queryCallback=function(t){if(t==this.m_queryProxyId)return!0;var e=r.min(t,this.m_queryProxyId),i=r.max(t,this.m_queryProxyId),o=this.m_tree.getUserData(e),s=this.m_tree.getUserData(i);return this.m_callback(o,s),!0}},8054:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=p,t.exports.Input=l,t.exports.Output=u,t.exports.Proxy=d,t.exports.Cache=_;var s=i(1099),r=i(2274),n=i(5489),a=i(5387),m=i(6306),h=(i(4470),i(6173),i(7515),i(3766)),c=(i(5385),i(8850));function l(){this.proxyA=new d,this.proxyB=new d,this.transformA=null,this.transformB=null,this.useRadii=!1}function u(){this.pointA=m.zero(),this.pointB=m.zero(),this.distance,this.iterations}function _(){this.metric=0,this.indexA=[],this.indexB=[],this.count=0}function p(t,e,i){++n.gjkCalls;var o=i.proxyA,r=i.proxyB,l=i.transformA,u=i.transformB,_=new f;_.readCache(e,o,l,r,u);for(var p=_.m_v,d=s.maxDistnceIterations,y=[],v=[],g=0,x=0;x<d;){g=_.m_count;for(var A=0;A<g;++A)y[A]=p[A].indexA,v[A]=p[A].indexB;if(_.solve(),3==_.m_count)break;(M=_.getClosestPoint()).lengthSquared();var b=_.getSearchDirection();if(b.lengthSquared()<a.EPSILON*a.EPSILON)break;var B=p[_.m_count];B.indexA=o.getSupport(h.mulTVec2(l.q,m.neg(b))),B.wA=c.mulVec2(l,o.getVertex(B.indexA)),B.indexB=r.getSupport(h.mulTVec2(u.q,b)),B.wB=c.mulVec2(u,r.getVertex(B.indexB)),B.w=m.sub(B.wB,B.wA),++x,++n.gjkIters;var w=!1;for(A=0;A<g;++A)if(B.indexA==y[A]&&B.indexB==v[A]){w=!0;break}if(w)break;++_.m_count}if(n.gjkMaxIters=a.max(n.gjkMaxIters,x),_.getWitnessPoints(t.pointA,t.pointB),t.distance=m.distance(t.pointA,t.pointB),t.iterations=x,_.writeCache(e),i.useRadii){var S=o.m_radius,C=r.m_radius;if(t.distance>S+C&&t.distance>a.EPSILON){t.distance-=S+C;var T=m.sub(t.pointB,t.pointA);T.normalize(),t.pointA.addMul(S,T),t.pointB.subMul(C,T)}else{var M=m.mid(t.pointA,t.pointB);t.pointA.set(M),t.pointB.set(M),t.distance=0}}}function d(){this.m_buffer=[],this.m_vertices=[],this.m_count=0,this.m_radius=0}function y(){this.indexA,this.indexB,this.wA=m.zero(),this.wB=m.zero(),this.w=m.zero(),this.a}function f(){this.m_v1=new y,this.m_v2=new y,this.m_v3=new y,this.m_v=[this.m_v1,this.m_v2,this.m_v3],this.m_count}i(5235),i(8601),n.gjkCalls=0,n.gjkIters=0,n.gjkMaxIters=0,d.prototype.getVertexCount=function(){return this.m_count},d.prototype.getVertex=function(t){return o&&r.assert(0<=t&&t<this.m_count),this.m_vertices[t]},d.prototype.getSupport=function(t){for(var e=0,i=m.dot(this.m_vertices[0],t),o=0;o<this.m_count;++o){var s=m.dot(this.m_vertices[o],t);s>i&&(e=o,i=s)}return e},d.prototype.getSupportVertex=function(t){return this.m_vertices[this.getSupport(t)]},d.prototype.set=function(t,e){o&&r.assert("function"==typeof t.computeDistanceProxy),t.computeDistanceProxy(this,e)},y.prototype.set=function(t){this.indexA=t.indexA,this.indexB=t.indexB,this.wA=m.clone(t.wA),this.wB=m.clone(t.wB),this.w=m.clone(t.w),this.a=t.a},f.prototype.print=function(){return 3==this.m_count?["+"+this.m_count,this.m_v1.a,this.m_v1.wA.x,this.m_v1.wA.y,this.m_v1.wB.x,this.m_v1.wB.y,this.m_v2.a,this.m_v2.wA.x,this.m_v2.wA.y,this.m_v2.wB.x,this.m_v2.wB.y,this.m_v3.a,this.m_v3.wA.x,this.m_v3.wA.y,this.m_v3.wB.x,this.m_v3.wB.y].toString():2==this.m_count?["+"+this.m_count,this.m_v1.a,this.m_v1.wA.x,this.m_v1.wA.y,this.m_v1.wB.x,this.m_v1.wB.y,this.m_v2.a,this.m_v2.wA.x,this.m_v2.wA.y,this.m_v2.wB.x,this.m_v2.wB.y].toString():1==this.m_count?["+"+this.m_count,this.m_v1.a,this.m_v1.wA.x,this.m_v1.wA.y,this.m_v1.wB.x,this.m_v1.wB.y].toString():"+"+this.m_count},f.prototype.readCache=function(t,e,i,s,n){o&&r.assert(t.count<=3),this.m_count=t.count;for(var h=0;h<this.m_count;++h){(d=this.m_v[h]).indexA=t.indexA[h],d.indexB=t.indexB[h];var l=e.getVertex(d.indexA),u=s.getVertex(d.indexB);d.wA=c.mulVec2(i,l),d.wB=c.mulVec2(n,u),d.w=m.sub(d.wB,d.wA),d.a=0}if(this.m_count>1){var _=t.metric,p=this.getMetric();(p<.5*_||2*_<p||p<a.EPSILON)&&(this.m_count=0)}var d;0==this.m_count&&((d=this.m_v[0]).indexA=0,d.indexB=0,l=e.getVertex(0),u=s.getVertex(0),d.wA=c.mulVec2(i,l),d.wB=c.mulVec2(n,u),d.w=m.sub(d.wB,d.wA),d.a=1,this.m_count=1)},f.prototype.writeCache=function(t){t.metric=this.getMetric(),t.count=this.m_count;for(var e=0;e<this.m_count;++e)t.indexA[e]=this.m_v[e].indexA,t.indexB[e]=this.m_v[e].indexB},f.prototype.getSearchDirection=function(){switch(this.m_count){case 1:return m.neg(this.m_v1.w);case 2:var t=m.sub(this.m_v2.w,this.m_v1.w);return m.cross(t,m.neg(this.m_v1.w))>0?m.cross(1,t):m.cross(t,1);default:return o&&r.assert(!1),m.zero()}},f.prototype.getClosestPoint=function(){switch(this.m_count){case 0:return o&&r.assert(!1),m.zero();case 1:return m.clone(this.m_v1.w);case 2:return m.combine(this.m_v1.a,this.m_v1.w,this.m_v2.a,this.m_v2.w);case 3:return m.zero();default:return o&&r.assert(!1),m.zero()}},f.prototype.getWitnessPoints=function(t,e){switch(this.m_count){case 0:o&&r.assert(!1);break;case 1:t.set(this.m_v1.wA),e.set(this.m_v1.wB);break;case 2:t.setCombine(this.m_v1.a,this.m_v1.wA,this.m_v2.a,this.m_v2.wA),e.setCombine(this.m_v1.a,this.m_v1.wB,this.m_v2.a,this.m_v2.wB);break;case 3:t.setCombine(this.m_v1.a,this.m_v1.wA,this.m_v2.a,this.m_v2.wA),t.addMul(this.m_v3.a,this.m_v3.wA),e.set(t);break;default:o&&r.assert(!1)}},f.prototype.getMetric=function(){switch(this.m_count){case 0:return o&&r.assert(!1),0;case 1:return 0;case 2:return m.distance(this.m_v1.w,this.m_v2.w);case 3:return m.cross(m.sub(this.m_v2.w,this.m_v1.w),m.sub(this.m_v3.w,this.m_v1.w));default:return o&&r.assert(!1),0}},f.prototype.solve=function(){switch(this.m_count){case 1:break;case 2:this.solve2();break;case 3:this.solve3();break;default:o&&r.assert(!1)}},f.prototype.solve2=function(){var t=this.m_v1.w,e=this.m_v2.w,i=m.sub(e,t),o=-m.dot(t,i);if(o<=0)return this.m_v1.a=1,void(this.m_count=1);var s=m.dot(e,i);if(s<=0)return this.m_v2.a=1,this.m_count=1,void this.m_v1.set(this.m_v2);var r=1/(s+o);this.m_v1.a=s*r,this.m_v2.a=o*r,this.m_count=2},f.prototype.solve3=function(){var t=this.m_v1.w,e=this.m_v2.w,i=this.m_v3.w,o=m.sub(e,t),s=m.dot(t,o),r=m.dot(e,o),n=-s,a=m.sub(i,t),h=m.dot(t,a),c=m.dot(i,a),l=-h,u=m.sub(i,e),_=m.dot(e,u),p=m.dot(i,u),d=-_,y=m.cross(o,a),f=y*m.cross(e,i),v=y*m.cross(i,t),g=y*m.cross(t,e);if(n<=0&&l<=0)return this.m_v1.a=1,void(this.m_count=1);if(r>0&&n>0&&g<=0){var x=1/(r+n);return this.m_v1.a=r*x,this.m_v2.a=n*x,void(this.m_count=2)}if(c>0&&l>0&&v<=0){var A=1/(c+l);return this.m_v1.a=c*A,this.m_v3.a=l*A,this.m_count=2,void this.m_v2.set(this.m_v3)}if(r<=0&&d<=0)return this.m_v2.a=1,this.m_count=1,void this.m_v1.set(this.m_v2);if(c<=0&&p<=0)return this.m_v3.a=1,this.m_count=1,void this.m_v1.set(this.m_v3);if(p>0&&d>0&&f<=0){var b=1/(p+d);return this.m_v2.a=p*b,this.m_v3.a=d*b,this.m_count=2,void this.m_v1.set(this.m_v3)}var B=1/(f+v+g);this.m_v1.a=f*B,this.m_v2.a=v*B,this.m_v3.a=g*B,this.m_count=3},p.testOverlap=function(t,e,i,o,s,r){var n=new l;n.proxyA.set(t,e),n.proxyB.set(i,o),n.transformA=s,n.transformB=r,n.useRadii=!0;var m=new _,h=new u;return p(h,m,n),h.distance<10*a.EPSILON}},2454:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(1099),r=i(2274),n=i(5706),a=i(6306),m=i(5387),h=i(3406);function c(t){this.id=t,this.aabb=new h,this.userData=null,this.parent=null,this.child1=null,this.child2=null,this.height=-1,this.toString=function(){return this.id+": "+this.userData}}function l(){this.m_root=null,this.m_nodes={},this.m_lastProxyId=0,this.m_pool=new n({create:function(){return new c}})}t.exports=l,c.prototype.isLeaf=function(){return null==this.child1},l.prototype.getUserData=function(t){var e=this.m_nodes[t];return o&&r.assert(!!e),e.userData},l.prototype.getFatAABB=function(t){var e=this.m_nodes[t];return o&&r.assert(!!e),e.aabb},l.prototype.allocateNode=function(){var t=this.m_pool.allocate();return t.id=++this.m_lastProxyId,t.userData=null,t.parent=null,t.child1=null,t.child2=null,t.height=-1,this.m_nodes[t.id]=t,t},l.prototype.freeNode=function(t){this.m_pool.release(t),t.height=-1,delete this.m_nodes[t.id]},l.prototype.createProxy=function(t,e){o&&r.assert(h.isValid(t));var i=this.allocateNode();return i.aabb.set(t),h.extend(i.aabb,s.aabbExtension),i.userData=e,i.height=0,this.insertLeaf(i),i.id},l.prototype.destroyProxy=function(t){var e=this.m_nodes[t];o&&r.assert(!!e),o&&r.assert(e.isLeaf()),this.removeLeaf(e),this.freeNode(e)},l.prototype.moveProxy=function(t,e,i){o&&r.assert(h.isValid(e)),o&&r.assert(!i||a.isValid(i));var n=this.m_nodes[t];return o&&r.assert(!!n),o&&r.assert(n.isLeaf()),!n.aabb.contains(e)&&(this.removeLeaf(n),n.aabb.set(e),e=n.aabb,h.extend(e,s.aabbExtension),i.x<0?e.lowerBound.x+=i.x*s.aabbMultiplier:e.upperBound.x+=i.x*s.aabbMultiplier,i.y<0?e.lowerBound.y+=i.y*s.aabbMultiplier:e.upperBound.y+=i.y*s.aabbMultiplier,this.insertLeaf(n),!0)},l.prototype.insertLeaf=function(t){if(o&&r.assert(h.isValid(t.aabb)),null==this.m_root)return this.m_root=t,void(this.m_root.parent=null);for(var e=t.aabb,i=this.m_root;0==i.isLeaf();){var s=i.child1,n=i.child2,a=i.aabb.getPerimeter(),c=new h;c.combine(i.aabb,e);var l,u,_,p=c.getPerimeter(),d=2*p,y=2*(p-a);if(s.isLeaf())(_=new h).combine(e,s.aabb),l=_.getPerimeter()+y;else{(_=new h).combine(e,s.aabb);var f=s.aabb.getPerimeter();l=_.getPerimeter()-f+y}if(n.isLeaf())(_=new h).combine(e,n.aabb),u=_.getPerimeter()+y;else(_=new h).combine(e,n.aabb),f=n.aabb.getPerimeter(),u=_.getPerimeter()-f+y;if(d<l&&d<u)break;i=l<u?s:n}var v=i,g=v.parent,x=this.allocateNode();for(x.parent=g,x.userData=null,x.aabb.combine(e,v.aabb),x.height=v.height+1,null!=g?(g.child1==v?g.child1=x:g.child2=x,x.child1=v,x.child2=t,v.parent=x,t.parent=x):(x.child1=v,x.child2=t,v.parent=x,t.parent=x,this.m_root=x),i=t.parent;null!=i;)s=(i=this.balance(i)).child1,n=i.child2,o&&r.assert(null!=s),o&&r.assert(null!=n),i.height=1+m.max(s.height,n.height),i.aabb.combine(s.aabb,n.aabb),i=i.parent},l.prototype.removeLeaf=function(t){if(t!=this.m_root){var e,i=t.parent,o=i.parent;if(e=i.child1==t?i.child2:i.child1,null!=o){o.child1==i?o.child1=e:o.child2=e,e.parent=o,this.freeNode(i);for(var s=o;null!=s;){var r=(s=this.balance(s)).child1,n=s.child2;s.aabb.combine(r.aabb,n.aabb),s.height=1+m.max(r.height,n.height),s=s.parent}}else this.m_root=e,e.parent=null,this.freeNode(i)}else this.m_root=null},l.prototype.balance=function(t){o&&r.assert(null!=t);var e=t;if(e.isLeaf()||e.height<2)return t;var i=e.child1,s=e.child2,n=s.height-i.height;if(n>1){var a=s.child1,h=s.child2;return s.child1=e,s.parent=e.parent,e.parent=s,null!=s.parent?s.parent.child1==t?s.parent.child1=s:s.parent.child2=s:this.m_root=s,a.height>h.height?(s.child2=a,e.child2=h,h.parent=e,e.aabb.combine(i.aabb,h.aabb),s.aabb.combine(e.aabb,a.aabb),e.height=1+m.max(i.height,h.height),s.height=1+m.max(e.height,a.height)):(s.child2=h,e.child2=a,a.parent=e,e.aabb.combine(i.aabb,a.aabb),s.aabb.combine(e.aabb,h.aabb),e.height=1+m.max(i.height,a.height),s.height=1+m.max(e.height,h.height)),s}if(n<-1){var c=i.child1,l=i.child2;return i.child1=e,i.parent=e.parent,e.parent=i,null!=i.parent?i.parent.child1==e?i.parent.child1=i:i.parent.child2=i:this.m_root=i,c.height>l.height?(i.child2=c,e.child1=l,l.parent=e,e.aabb.combine(s.aabb,l.aabb),i.aabb.combine(e.aabb,c.aabb),e.height=1+m.max(s.height,l.height),i.height=1+m.max(e.height,c.height)):(i.child2=l,e.child1=c,c.parent=e,e.aabb.combine(s.aabb,c.aabb),i.aabb.combine(e.aabb,l.aabb),e.height=1+m.max(s.height,c.height),i.height=1+m.max(e.height,l.height)),i}return e},l.prototype.getHeight=function(){return null==this.m_root?0:this.m_root.height},l.prototype.getAreaRatio=function(){if(null==this.m_root)return 0;for(var t,e=this.m_root.aabb.getPerimeter(),i=0,o=p.allocate().preorder(this.m_root);t=o.next();)t.height<0||(i+=t.aabb.getPerimeter());return p.release(o),i/e},l.prototype.computeHeight=function(t){var e;if((e=void 0!==t?this.m_nodes[t]:this.m_root).isLeaf())return 0;var i=this.computeHeight(e.child1.id),o=this.computeHeight(e.child2.id);return 1+m.max(i,o)},l.prototype.validateStructure=function(t){if(null!=t){t==this.m_root&&o&&r.assert(null==t.parent);var e=t.child1,i=t.child2;if(t.isLeaf())return o&&r.assert(null==e),o&&r.assert(null==i),void(o&&r.assert(0==t.height));o&&r.assert(e.parent==t),o&&r.assert(i.parent==t),this.validateStructure(e),this.validateStructure(i)}},l.prototype.validateMetrics=function(t){if(null!=t){var e=t.child1,i=t.child2;if(t.isLeaf())return o&&r.assert(null==e),o&&r.assert(null==i),void(o&&r.assert(0==t.height));var s=e.height,n=i.height,a=1+m.max(s,n);o&&r.assert(t.height==a);var c=new h;c.combine(e.aabb,i.aabb),o&&r.assert(h.areEqual(c,t.aabb)),this.validateMetrics(e),this.validateMetrics(i)}},l.prototype.validate=function(){this.validateStructure(this.m_root),this.validateMetrics(this.m_root),o&&r.assert(this.getHeight()==this.computeHeight())},l.prototype.getMaxBalance=function(){for(var t,e=0,i=p.allocate().preorder(this.m_root);t=i.next();)if(!(t.height<=1)){o&&r.assert(0==t.isLeaf());var s=m.abs(t.child2.height-t.child1.height);e=m.max(e,s)}return p.release(i),e},l.prototype.rebuildBottomUp=function(){for(var t,e=[],i=0,o=p.allocate().preorder(this.m_root);t=o.next();)t.height<0||(t.isLeaf()?(t.parent=null,e[i]=t,++i):this.freeNode(t));for(p.release(o);i>1;){for(var s=1/0,r=-1,n=-1,a=0;a<i;++a)for(var c=e[a].aabb,l=a+1;l<i;++l){var u=e[l].aabb,_=new h;_.combine(c,u);var d=_.getPerimeter();d<s&&(r=a,n=l,s=d)}var y=e[r],f=e[n],v=this.allocateNode();v.child1=y,v.child2=f,v.height=1+m.max(y.height,f.height),v.aabb.combine(y.aabb,f.aabb),v.parent=null,y.parent=v,f.parent=v,e[n]=e[i-1],e[r]=v,--i}this.m_root=e[0],this.validate()},l.prototype.shiftOrigin=function(t){for(var e,i=p.allocate().preorder(this.m_root);e=i.next();){var o=e.aabb;o.lowerBound.x-=t.x,o.lowerBound.y-=t.y,o.upperBound.x-=t.x,o.upperBound.y-=t.y}p.release(i)},l.prototype.query=function(t,e){o&&r.assert("function"==typeof e);var i=_.allocate();for(i.push(this.m_root);i.length>0;){var s=i.pop();if(null!=s&&h.testOverlap(s.aabb,t))if(s.isLeaf()){if(0==e(s.id))return}else i.push(s.child1),i.push(s.child2)}_.release(i)},l.prototype.rayCast=function(t,e){o&&r.assert("function"==typeof e);var i=t.p1,s=t.p2,n=a.sub(s,i);o&&r.assert(n.lengthSquared()>0),n.normalize();var c=a.cross(1,n),l=a.abs(c),p=t.maxFraction,d=new h,y=a.combine(1-p,i,p,s);d.combinePoints(i,y);var f=_.allocate(),v=u.allocate();for(f.push(this.m_root);f.length>0;){var g=f.pop();if(null!=g&&0!=h.testOverlap(g.aabb,d)){var x=g.aabb.getCenter(),A=g.aabb.getExtents();if(!(m.abs(a.dot(c,a.sub(i,x)))-a.dot(l,A)>0))if(g.isLeaf()){v.p1=a.clone(t.p1),v.p2=a.clone(t.p2),v.maxFraction=p;var b=e(v,g.id);if(0==b)return;b>0&&(p=b,y=a.combine(1-p,i,p,s),d.combinePoints(i,y))}else f.push(g.child1),f.push(g.child2)}}_.release(f),u.release(v)};var u=new n({create:function(){return{}},release:function(t){}}),_=new n({create:function(){return[]},release:function(t){t.length=0}}),p=new n({create:function(){return new d},release:function(t){t.close()}});function d(){var t=[],e=[];return{preorder:function(i){return t.length=0,t.push(i),e.length=0,e.push(0),this},next:function(){for(;t.length>0;){var i=t.length-1,o=t[i];if(0===e[i])return e[i]=1,o;if(1===e[i]&&(e[i]=2,o.child1))return t.push(o.child1),e.push(1),o.child1;if(2===e[i]&&(e[i]=3,o.child2))return t.push(o.child2),e.push(1),o.child2;t.pop(),e.pop()}},close:function(){t.length=0}}}},8650:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=function(t,e){var i=n.now();++a.toiCalls,t.state=v.e_unknown,t.t=e.tMax;var h=e.proxyA,c=e.proxyB,l=e.sweepA,y=e.sweepB;l.normalize(),y.normalize();var x=e.tMax,A=h.m_radius+c.m_radius,b=m.max(s.linearSlop,A-3*s.linearSlop),B=.25*s.linearSlop;o&&r.assert(b>B);var w=0,S=s.maxTOIIterations,C=0,T=new f,M=new p;for(M.proxyA=e.proxyA,M.proxyB=e.proxyB,M.useRadii=!1;;){var P=u.identity(),E=u.identity();l.getTransform(P,w),y.getTransform(E,w),M.transformA=P,M.transformB=E;var I=new d;if(_(I,T,M),I.distance<=0){t.state=v.e_overlapped,t.t=0;break}if(I.distance<b+B){t.state=v.e_touching,t.t=w;break}var V=new g;V.initialize(T,h,l,c,y,w);for(var z=!1,F=x,R=0;;){var L=V.findMinSeparation(F);if(V.indexA,V.indexB,L>b+B){t.state=v.e_separated,t.t=x,z=!0;break}if(L>b-B){w=F;break}var D=V.evaluate(w);if(V.indexA,V.indexB,D<b-B){t.state=v.e_failed,t.t=w,z=!0;break}if(D<=b+B){t.state=v.e_touching,t.t=w,z=!0;break}for(var k=0,q=w,U=F;;){var O;O=1&k?q+(b-D)*(U-q)/(L-D):.5*(q+U),++k,++a.toiRootIters;var j=V.evaluate(O);if(V.indexA,V.indexB,m.abs(j-b)<B){F=O;break}if(j>b?(q=O,D=j):(U=O,L=j),50==k)break}if(a.toiMaxRootIters=m.max(a.toiMaxRootIters,k),++R==s.maxPolygonVertices)break}if(++C,++a.toiIters,z)break;if(C==S){t.state=v.e_failed,t.t=w;break}}a.toiMaxIters=m.max(a.toiMaxIters,C);var N=n.diff(i);a.toiMaxTime=m.max(a.toiMaxTime,N),a.toiTime+=N},t.exports.Input=function(){this.proxyA=new y,this.proxyB=new y,this.sweepA=new l,this.sweepB=new l,this.tMax},t.exports.Output=v;var s=i(1099),r=i(2274),n=i(9205),a=i(5489),m=i(5387),h=i(6306),c=(i(4470),i(6173),i(7515),i(3766)),l=i(5385),u=i(8850),_=(i(5235),i(8601),i(8054)),p=_.Input,d=_.Output,y=_.Proxy,f=_.Cache;function v(){this.state,this.t}function g(){this.m_proxyA=new y,this.m_proxyB=new y,this.m_sweepA,this.m_sweepB,this.indexA,this.indexB,this.m_type,this.m_localPoint=h.zero(),this.m_axis=h.zero()}v.e_unknown=0,v.e_failed=1,v.e_overlapped=2,v.e_touching=3,v.e_separated=4,a.toiTime=0,a.toiMaxTime=0,a.toiCalls=0,a.toiIters=0,a.toiMaxIters=0,a.toiRootIters=0,a.toiMaxRootIters=0,g.prototype.initialize=function(t,e,i,s,n,a){this.m_proxyA=e,this.m_proxyB=s;var m=t.count;o&&r.assert(0<m&&m<3),this.m_sweepA=i,this.m_sweepB=n;var l=u.identity(),_=u.identity();if(this.m_sweepA.getTransform(l,a),this.m_sweepB.getTransform(_,a),1==m){this.m_type=1;var p=this.m_proxyA.getVertex(t.indexA[0]),d=this.m_proxyB.getVertex(t.indexB[0]),y=u.mulVec2(l,p),f=u.mulVec2(_,d);return this.m_axis.setCombine(1,f,-1,y),this.m_axis.normalize()}if(t.indexA[0]==t.indexA[1]){this.m_type=3;var v=s.getVertex(t.indexB[0]),g=s.getVertex(t.indexB[1]);this.m_axis=h.cross(h.sub(g,v),1),this.m_axis.normalize();var x=c.mulVec2(_.q,this.m_axis);return this.m_localPoint=h.mid(v,g),f=u.mulVec2(_,this.m_localPoint),p=e.getVertex(t.indexA[0]),y=u.mulVec2(l,p),(A=h.dot(y,x)-h.dot(f,x))<0&&(this.m_axis=h.neg(this.m_axis),A=-A),A}this.m_type=2;var A,b=this.m_proxyA.getVertex(t.indexA[0]),B=this.m_proxyA.getVertex(t.indexA[1]);return this.m_axis=h.cross(h.sub(B,b),1),this.m_axis.normalize(),x=c.mulVec2(l.q,this.m_axis),this.m_localPoint=h.mid(b,B),y=u.mulVec2(l,this.m_localPoint),d=this.m_proxyB.getVertex(t.indexB[0]),f=u.mulVec2(_,d),(A=h.dot(f,x)-h.dot(y,x))<0&&(this.m_axis=h.neg(this.m_axis),A=-A),A},g.prototype.compute=function(t,e){var i=u.identity(),s=u.identity();switch(this.m_sweepA.getTransform(i,e),this.m_sweepB.getTransform(s,e),this.m_type){case 1:if(t){var n=c.mulTVec2(i.q,this.m_axis),a=c.mulTVec2(s.q,h.neg(this.m_axis));this.indexA=this.m_proxyA.getSupport(n),this.indexB=this.m_proxyB.getSupport(a)}var m=this.m_proxyA.getVertex(this.indexA),l=this.m_proxyB.getVertex(this.indexB),_=u.mulVec2(i,m),p=u.mulVec2(s,l);return h.dot(p,this.m_axis)-h.dot(_,this.m_axis);case 2:var d=c.mulVec2(i.q,this.m_axis);return _=u.mulVec2(i,this.m_localPoint),t&&(a=c.mulTVec2(s.q,h.neg(d)),this.indexA=-1,this.indexB=this.m_proxyB.getSupport(a)),l=this.m_proxyB.getVertex(this.indexB),p=u.mulVec2(s,l),h.dot(p,d)-h.dot(_,d);case 3:return d=c.mulVec2(s.q,this.m_axis),p=u.mulVec2(s,this.m_localPoint),t&&(n=c.mulTVec2(i.q,h.neg(d)),this.indexB=-1,this.indexA=this.m_proxyA.getSupport(n)),m=this.m_proxyA.getVertex(this.indexA),_=u.mulVec2(i,m),h.dot(_,d)-h.dot(p,d);default:return o&&r.assert(!1),t&&(this.indexA=-1,this.indexB=-1),0}},g.prototype.findMinSeparation=function(t){return this.compute(!0,t)},g.prototype.evaluate=function(t){return this.compute(!1,t)}},6173:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=a;var r=i(2274),n=(i(5387),i(6306));function a(t,e,i,o){"object"==typeof t&&null!==t?(this.ex=n.clone(t),this.ey=n.clone(e)):"number"==typeof t?(this.ex=n.neo(t,i),this.ey=n.neo(e,o)):(this.ex=n.zero(),this.ey=n.zero())}a.prototype.toString=function(){return JSON.stringify(this)},a.isValid=function(t){return t&&n.isValid(t.ex)&&n.isValid(t.ey)},a.assert=function(t){if(s&&!a.isValid(t))throw o&&r.debug(t),new Error("Invalid Mat22!")},a.prototype.set=function(t,e,i,o){"number"==typeof t&&"number"==typeof e&&"number"==typeof i&&"number"==typeof o?(this.ex.set(t,i),this.ey.set(e,o)):"object"==typeof t&&"object"==typeof e?(this.ex.set(t),this.ey.set(e)):"object"==typeof t?(s&&a.assert(t),this.ex.set(t.ex),this.ey.set(t.ey)):s&&r.assert(!1)},a.prototype.setIdentity=function(){this.ex.x=1,this.ey.x=0,this.ex.y=0,this.ey.y=1},a.prototype.setZero=function(){this.ex.x=0,this.ey.x=0,this.ex.y=0,this.ey.y=0},a.prototype.getInverse=function(){var t=this.ex.x,e=this.ey.x,i=this.ex.y,o=this.ey.y,s=t*o-e*i;0!=s&&(s=1/s);var r=new a;return r.ex.x=s*o,r.ey.x=-s*e,r.ex.y=-s*i,r.ey.y=s*t,r},a.prototype.solve=function(t){s&&n.assert(t);var e=this.ex.x,i=this.ey.x,o=this.ex.y,r=this.ey.y,a=e*r-i*o;0!=a&&(a=1/a);var m=n.zero();return m.x=a*(r*t.x-i*t.y),m.y=a*(e*t.y-o*t.x),m},a.mul=function(t,e){if(e&&"x"in e&&"y"in e){s&&n.assert(e);var i=t.ex.x*e.x+t.ey.x*e.y,o=t.ex.y*e.x+t.ey.y*e.y;return n.neo(i,o)}if(e&&"ex"in e&&"ey"in e)return s&&a.assert(e),new a(t.ex.x*e.ex.x+t.ey.x*e.ex.y,t.ex.x*e.ey.x+t.ey.x*e.ey.y,t.ex.y*e.ex.x+t.ey.y*e.ex.y,t.ex.y*e.ey.x+t.ey.y*e.ey.y);s&&r.assert(!1)},a.mulVec2=function(t,e){s&&n.assert(e);var i=t.ex.x*e.x+t.ey.x*e.y,o=t.ex.y*e.x+t.ey.y*e.y;return n.neo(i,o)},a.mulMat22=function(t,e){return s&&a.assert(e),new a(t.ex.x*e.ex.x+t.ey.x*e.ex.y,t.ex.x*e.ey.x+t.ey.x*e.ey.y,t.ex.y*e.ex.x+t.ey.y*e.ex.y,t.ex.y*e.ey.x+t.ey.y*e.ey.y)},a.mulT=function(t,e){return e&&"x"in e&&"y"in e?(s&&n.assert(e),n.neo(n.dot(e,t.ex),n.dot(e,t.ey))):e&&"ex"in e&&"ey"in e?(s&&a.assert(e),new a(n.neo(n.dot(t.ex,e.ex),n.dot(t.ey,e.ex)),n.neo(n.dot(t.ex,e.ey),n.dot(t.ey,e.ey)))):void(s&&r.assert(!1))},a.mulTVec2=function(t,e){return s&&a.assert(t),s&&n.assert(e),n.neo(n.dot(e,t.ex),n.dot(e,t.ey))},a.mulTMat22=function(t,e){return s&&a.assert(t),s&&a.assert(e),new a(n.neo(n.dot(t.ex,e.ex),n.dot(t.ey,e.ex)),n.neo(n.dot(t.ex,e.ey),n.dot(t.ey,e.ey)))},a.abs=function(t){return s&&a.assert(t),new a(n.abs(t.ex),n.abs(t.ey))},a.add=function(t,e){return s&&a.assert(t),s&&a.assert(e),new a(n.add(t.ex,e.ex),n.add(t.ey,e.ey))}},7515:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=m;var r=i(2274),n=(i(5387),i(6306)),a=i(4470);function m(t,e,i){"object"==typeof t&&null!==t?(this.ex=a.clone(t),this.ey=a.clone(e),this.ez=a.clone(i)):(this.ex=a(),this.ey=a(),this.ez=a())}m.prototype.toString=function(){return JSON.stringify(this)},m.isValid=function(t){return t&&a.isValid(t.ex)&&a.isValid(t.ey)&&a.isValid(t.ez)},m.assert=function(t){if(s&&!m.isValid(t))throw o&&r.debug(t),new Error("Invalid Mat33!")},m.prototype.setZero=function(){return this.ex.setZero(),this.ey.setZero(),this.ez.setZero(),this},m.prototype.solve33=function(t){var e=a.dot(this.ex,a.cross(this.ey,this.ez));0!=e&&(e=1/e);var i=new a;return i.x=e*a.dot(t,a.cross(this.ey,this.ez)),i.y=e*a.dot(this.ex,a.cross(t,this.ez)),i.z=e*a.dot(this.ex,a.cross(this.ey,t)),i},m.prototype.solve22=function(t){var e=this.ex.x,i=this.ey.x,o=this.ex.y,s=this.ey.y,r=e*s-i*o;0!=r&&(r=1/r);var a=n.zero();return a.x=r*(s*t.x-i*t.y),a.y=r*(e*t.y-o*t.x),a},m.prototype.getInverse22=function(t){var e=this.ex.x,i=this.ey.x,o=this.ex.y,s=this.ey.y,r=e*s-i*o;0!=r&&(r=1/r),t.ex.x=r*s,t.ey.x=-r*i,t.ex.z=0,t.ex.y=-r*o,t.ey.y=r*e,t.ey.z=0,t.ez.x=0,t.ez.y=0,t.ez.z=0},m.prototype.getSymInverse33=function(t){var e=a.dot(this.ex,a.cross(this.ey,this.ez));0!=e&&(e=1/e);var i=this.ex.x,o=this.ey.x,s=this.ez.x,r=this.ey.y,n=this.ez.y,m=this.ez.z;t.ex.x=e*(r*m-n*n),t.ex.y=e*(s*n-o*m),t.ex.z=e*(o*n-s*r),t.ey.x=t.ex.y,t.ey.y=e*(i*m-s*s),t.ey.z=e*(s*o-i*n),t.ez.x=t.ex.z,t.ez.y=t.ey.z,t.ez.z=e*(i*r-o*o)},m.mul=function(t,e){if(s&&m.assert(t),e&&"z"in e&&"y"in e&&"x"in e){s&&a.assert(e);var i=t.ex.x*e.x+t.ey.x*e.y+t.ez.x*e.z,o=t.ex.y*e.x+t.ey.y*e.y+t.ez.y*e.z,h=t.ex.z*e.x+t.ey.z*e.y+t.ez.z*e.z;return new a(i,o,h)}if(e&&"y"in e&&"x"in e)return s&&n.assert(e),i=t.ex.x*e.x+t.ey.x*e.y,o=t.ex.y*e.x+t.ey.y*e.y,n.neo(i,o);s&&r.assert(!1)},m.mulVec3=function(t,e){s&&m.assert(t),s&&a.assert(e);var i=t.ex.x*e.x+t.ey.x*e.y+t.ez.x*e.z,o=t.ex.y*e.x+t.ey.y*e.y+t.ez.y*e.z,r=t.ex.z*e.x+t.ey.z*e.y+t.ez.z*e.z;return new a(i,o,r)},m.mulVec2=function(t,e){s&&m.assert(t),s&&n.assert(e);var i=t.ex.x*e.x+t.ey.x*e.y,o=t.ex.y*e.x+t.ey.y*e.y;return n.neo(i,o)},m.add=function(t,e){return s&&m.assert(t),s&&m.assert(e),new m(a.add(t.ex,e.ex),a.add(t.ey,e.ey),a.add(t.ez,e.ez))}},5387:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT,r=i(2274),n=i(4175),a=Math,m=t.exports=n(a);m.EPSILON=1e-9,m.isFinite=function(t){return"number"==typeof t&&isFinite(t)&&!isNaN(t)},m.assert=function(t){if(s&&!m.isFinite(t))throw o&&r.debug(t),new Error("Invalid Number!")},m.invSqrt=function(t){return 1/a.sqrt(t)},m.nextPowerOfTwo=function(t){return t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16)},m.isPowerOfTwo=function(t){return t>0&&0==(t&t-1)},m.mod=function(t,e,i){return void 0===e?(i=1,e=0):void 0===i&&(i=e,e=0),i>e?(t=(t-e)%(i-e))+(t<0?i:e):(t=(t-i)%(e-i))+(t<=0?e:i)},m.clamp=function(t,e,i){return t<e?e:t>i?i:t},m.random=function(t,e){return void 0===t?(e=1,t=0):void 0===e&&(e=t,t=0),t==e?t:a.random()*(e-t)+t}},8601:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=r;var o=i(6306),s=i(3766);function r(){this.c=o.zero(),this.a=0}r.prototype.getTransform=function(t,e){return t.q.set(this.a),t.p.set(o.sub(this.c,s.mulVec2(t.q,e))),t}},3766:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=m;var r=i(2274),n=i(6306),a=i(5387);function m(t){if(!(this instanceof m))return new m(t);"number"==typeof t?this.setAngle(t):"object"==typeof t?this.set(t):this.setIdentity()}m.neo=function(t){var e=Object.create(m.prototype);return e.setAngle(t),e},m.clone=function(t){s&&m.assert(t);var e=Object.create(m.prototype);return e.s=t.s,e.c=t.c,e},m.identity=function(){var t=Object.create(m.prototype);return t.s=0,t.c=1,t},m.isValid=function(t){return t&&a.isFinite(t.s)&&a.isFinite(t.c)},m.assert=function(t){if(s&&!m.isValid(t))throw o&&r.debug(t),new Error("Invalid Rot!")},m.prototype.setIdentity=function(){this.s=0,this.c=1},m.prototype.set=function(t){"object"==typeof t?(s&&m.assert(t),this.s=t.s,this.c=t.c):(s&&a.assert(t),this.s=a.sin(t),this.c=a.cos(t))},m.prototype.setAngle=function(t){s&&a.assert(t),this.s=a.sin(t),this.c=a.cos(t)},m.prototype.getAngle=function(){return a.atan2(this.s,this.c)},m.prototype.getXAxis=function(){return n.neo(this.c,this.s)},m.prototype.getYAxis=function(){return n.neo(-this.s,this.c)},m.mul=function(t,e){if(s&&m.assert(t),"c"in e&&"s"in e){s&&m.assert(e);var i=m.identity();return i.s=t.s*e.c+t.c*e.s,i.c=t.c*e.c-t.s*e.s,i}if("x"in e&&"y"in e)return s&&n.assert(e),n.neo(t.c*e.x-t.s*e.y,t.s*e.x+t.c*e.y)},m.mulRot=function(t,e){s&&m.assert(t),s&&m.assert(e);var i=m.identity();return i.s=t.s*e.c+t.c*e.s,i.c=t.c*e.c-t.s*e.s,i},m.mulVec2=function(t,e){return s&&m.assert(t),s&&n.assert(e),n.neo(t.c*e.x-t.s*e.y,t.s*e.x+t.c*e.y)},m.mulSub=function(t,e,i){var o=t.c*(e.x-i.x)-t.s*(e.y-i.y),s=t.s*(e.x-i.x)+t.c*(e.y-i.y);return n.neo(o,s)},m.mulT=function(t,e){if("c"in e&&"s"in e){s&&m.assert(e);var i=m.identity();return i.s=t.c*e.s-t.s*e.c,i.c=t.c*e.c+t.s*e.s,i}if("x"in e&&"y"in e)return s&&n.assert(e),n.neo(t.c*e.x+t.s*e.y,-t.s*e.x+t.c*e.y)},m.mulTRot=function(t,e){s&&m.assert(e);var i=m.identity();return i.s=t.c*e.s-t.s*e.c,i.c=t.c*e.c+t.s*e.s,i},m.mulTVec2=function(t,e){return s&&n.assert(e),n.neo(t.c*e.x+t.s*e.y,-t.s*e.x+t.c*e.y)}},5385:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=h;var s=i(2274),r=i(5387),n=i(6306),a=i(3766),m=i(8850);function h(t,e){o&&s.assert(void 0===t),o&&s.assert(void 0===e),this.localCenter=n.zero(),this.c=n.zero(),this.a=0,this.alpha0=0,this.c0=n.zero(),this.a0=0}h.prototype.setTransform=function(t){var e=m.mulVec2(t,this.localCenter);this.c.set(e),this.c0.set(e),this.a=t.q.getAngle(),this.a0=t.q.getAngle()},h.prototype.setLocalCenter=function(t,e){this.localCenter.set(t);var i=m.mulVec2(e,this.localCenter);this.c.set(i),this.c0.set(i)},h.prototype.getTransform=function(t,e){e=void 0===e?0:e,t.q.setAngle((1-e)*this.a0+e*this.a),t.p.setCombine(1-e,this.c0,e,this.c),t.p.sub(a.mulVec2(t.q,this.localCenter))},h.prototype.advance=function(t){o&&s.assert(this.alpha0<1);var e=(t-this.alpha0)/(1-this.alpha0);this.c0.setCombine(e,this.c,1-e,this.c0),this.a0=e*this.a+(1-e)*this.a0,this.alpha0=t},h.prototype.forward=function(){this.a0=this.a,this.c0.set(this.c)},h.prototype.normalize=function(){var t=r.mod(this.a0,-r.PI,+r.PI);this.a-=this.a0-t,this.a0=t},h.prototype.clone=function(){var t=new h;return t.localCenter.set(this.localCenter),t.alpha0=this.alpha0,t.a0=this.a0,t.a=this.a,t.c0.set(this.c0),t.c.set(this.c),t},h.prototype.set=function(t){this.localCenter.set(t.localCenter),this.alpha0=t.alpha0,this.a0=t.a0,this.a=t.a,this.c0.set(t.c0),this.c.set(t.c)}},8850:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=m;var r=i(2274),n=i(6306),a=i(3766);function m(t,e){if(!(this instanceof m))return new m(t,e);this.p=n.zero(),this.q=a.identity(),void 0!==t&&this.p.set(t),void 0!==e&&this.q.set(e)}m.clone=function(t){var e=Object.create(m.prototype);return e.p=n.clone(t.p),e.q=a.clone(t.q),e},m.neo=function(t,e){var i=Object.create(m.prototype);return i.p=n.clone(t),i.q=a.clone(e),i},m.identity=function(){var t=Object.create(m.prototype);return t.p=n.zero(),t.q=a.identity(),t},m.prototype.setIdentity=function(){this.p.setZero(),this.q.setIdentity()},m.prototype.set=function(t,e){void 0===e?(this.p.set(t.p),this.q.set(t.q)):(this.p.set(t),this.q.set(e))},m.isValid=function(t){return t&&n.isValid(t.p)&&a.isValid(t.q)},m.assert=function(t){if(s&&!m.isValid(t))throw o&&r.debug(t),new Error("Invalid Transform!")},m.mul=function(t,e){if(s&&m.assert(t),Array.isArray(e)){for(var i=[],o=0;o<e.length;o++)i[o]=m.mul(t,e[o]);return i}if("x"in e&&"y"in e){s&&n.assert(e);var r=t.q.c*e.x-t.q.s*e.y+t.p.x,h=t.q.s*e.x+t.q.c*e.y+t.p.y;return n.neo(r,h)}if("p"in e&&"q"in e){s&&m.assert(e);var c=m.identity();return c.q=a.mulRot(t.q,e.q),c.p=n.add(a.mulVec2(t.q,e.p),t.p),c}},m.mulAll=function(t,e){s&&m.assert(t);for(var i=[],o=0;o<e.length;o++)i[o]=m.mul(t,e[o]);return i},m.mulFn=function(t){return s&&m.assert(t),function(e){return m.mul(t,e)}},m.mulVec2=function(t,e){s&&m.assert(t),s&&n.assert(e);var i=t.q.c*e.x-t.q.s*e.y+t.p.x,o=t.q.s*e.x+t.q.c*e.y+t.p.y;return n.neo(i,o)},m.mulXf=function(t,e){s&&m.assert(t),s&&m.assert(e);var i=m.identity();return i.q=a.mulRot(t.q,e.q),i.p=n.add(a.mulVec2(t.q,e.p),t.p),i},m.mulT=function(t,e){if(s&&m.assert(t),"x"in e&&"y"in e){s&&n.assert(e);var i=e.x-t.p.x,o=e.y-t.p.y,r=t.q.c*i+t.q.s*o,h=-t.q.s*i+t.q.c*o;return n.neo(r,h)}if("p"in e&&"q"in e){s&&m.assert(e);var c=m.identity();return c.q.set(a.mulTRot(t.q,e.q)),c.p.set(a.mulTVec2(t.q,n.sub(e.p,t.p))),c}},m.mulTVec2=function(t,e){s&&m.assert(t),s&&n.assert(e);var i=e.x-t.p.x,o=e.y-t.p.y,r=t.q.c*i+t.q.s*o,a=-t.q.s*i+t.q.c*o;return n.neo(r,a)},m.mulTXf=function(t,e){s&&m.assert(t),s&&m.assert(e);var i=m.identity();return i.q.set(a.mulTRot(t.q,e.q)),i.p.set(a.mulTVec2(t.q,n.sub(e.p,t.p))),i}},6306:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=a;var r=i(2274),n=i(5387);function a(t,e){if(!(this instanceof a))return new a(t,e);void 0===t?(this.x=0,this.y=0):"object"==typeof t?(this.x=t.x,this.y=t.y):(this.x=t,this.y=e),s&&a.assert(this)}a.prototype._serialize=function(){return{x:this.x,y:this.y}},a._deserialize=function(t){var e=Object.create(a.prototype);return e.x=t.x,e.y=t.y,e},a.zero=function(){var t=Object.create(a.prototype);return t.x=0,t.y=0,t},a.neo=function(t,e){var i=Object.create(a.prototype);return i.x=t,i.y=e,i},a.clone=function(t){return s&&a.assert(t),a.neo(t.x,t.y)},a.prototype.toString=function(){return JSON.stringify(this)},a.isValid=function(t){return t&&n.isFinite(t.x)&&n.isFinite(t.y)},a.assert=function(t){if(s&&!a.isValid(t))throw o&&r.debug(t),new Error("Invalid Vec2!")},a.prototype.clone=function(){return a.clone(this)},a.prototype.setZero=function(){return this.x=0,this.y=0,this},a.prototype.set=function(t,e){return"object"==typeof t?(s&&a.assert(t),this.x=t.x,this.y=t.y):(s&&n.assert(t),s&&n.assert(e),this.x=t,this.y=e),this},a.prototype.wSet=function(t,e,i,o){return void 0!==i||void 0!==o?this.setCombine(t,e,i,o):this.setMul(t,e)},a.prototype.setCombine=function(t,e,i,o){s&&n.assert(t),s&&a.assert(e),s&&n.assert(i),s&&a.assert(o);var r=t*e.x+i*o.x,m=t*e.y+i*o.y;return this.x=r,this.y=m,this},a.prototype.setMul=function(t,e){s&&n.assert(t),s&&a.assert(e);var i=t*e.x,o=t*e.y;return this.x=i,this.y=o,this},a.prototype.add=function(t){return s&&a.assert(t),this.x+=t.x,this.y+=t.y,this},a.prototype.wAdd=function(t,e,i,o){return void 0!==i||void 0!==o?this.addCombine(t,e,i,o):this.addMul(t,e)},a.prototype.addCombine=function(t,e,i,o){s&&n.assert(t),s&&a.assert(e),s&&n.assert(i),s&&a.assert(o);var r=t*e.x+i*o.x,m=t*e.y+i*o.y;return this.x+=r,this.y+=m,this},a.prototype.addMul=function(t,e){s&&n.assert(t),s&&a.assert(e);var i=t*e.x,o=t*e.y;return this.x+=i,this.y+=o,this},a.prototype.wSub=function(t,e,i,o){return void 0!==i||void 0!==o?this.subCombine(t,e,i,o):this.subMul(t,e)},a.prototype.subCombine=function(t,e,i,o){s&&n.assert(t),s&&a.assert(e),s&&n.assert(i),s&&a.assert(o);var r=t*e.x+i*o.x,m=t*e.y+i*o.y;return this.x-=r,this.y-=m,this},a.prototype.subMul=function(t,e){s&&n.assert(t),s&&a.assert(e);var i=t*e.x,o=t*e.y;return this.x-=i,this.y-=o,this},a.prototype.sub=function(t){return s&&a.assert(t),this.x-=t.x,this.y-=t.y,this},a.prototype.mul=function(t){return s&&n.assert(t),this.x*=t,this.y*=t,this},a.prototype.length=function(){return a.lengthOf(this)},a.prototype.lengthSquared=function(){return a.lengthSquared(this)},a.prototype.normalize=function(){var t=this.length();if(t<n.EPSILON)return 0;var e=1/t;return this.x*=e,this.y*=e,t},a.lengthOf=function(t){return s&&a.assert(t),n.sqrt(t.x*t.x+t.y*t.y)},a.lengthSquared=function(t){return s&&a.assert(t),t.x*t.x+t.y*t.y},a.distance=function(t,e){s&&a.assert(t),s&&a.assert(e);var i=t.x-e.x,o=t.y-e.y;return n.sqrt(i*i+o*o)},a.distanceSquared=function(t,e){s&&a.assert(t),s&&a.assert(e);var i=t.x-e.x,o=t.y-e.y;return i*i+o*o},a.areEqual=function(t,e){return s&&a.assert(t),s&&a.assert(e),t==e||"object"==typeof e&&null!==e&&t.x===e.x&&t.y===e.y},a.skew=function(t){return s&&a.assert(t),a.neo(-t.y,t.x)},a.dot=function(t,e){return s&&a.assert(t),s&&a.assert(e),t.x*e.x+t.y*e.y},a.cross=function(t,e){return"number"==typeof e?(s&&a.assert(t),s&&n.assert(e),a.neo(e*t.y,-e*t.x)):"number"==typeof t?(s&&n.assert(t),s&&a.assert(e),a.neo(-t*e.y,t*e.x)):(s&&a.assert(t),s&&a.assert(e),t.x*e.y-t.y*e.x)},a.addCross=function(t,e,i){return"number"==typeof i?(s&&a.assert(e),s&&n.assert(i),a.neo(i*e.y+t.x,-i*e.x+t.y)):"number"==typeof e?(s&&n.assert(e),s&&a.assert(i),a.neo(-e*i.y+t.x,e*i.x+t.y)):void(s&&r.assert(!1))},a.add=function(t,e){return s&&a.assert(t),s&&a.assert(e),a.neo(t.x+e.x,t.y+e.y)},a.wAdd=function(t,e,i,o){return void 0!==i||void 0!==o?a.combine(t,e,i,o):a.mul(t,e)},a.combine=function(t,e,i,o){return a.zero().setCombine(t,e,i,o)},a.sub=function(t,e){return s&&a.assert(t),s&&a.assert(e),a.neo(t.x-e.x,t.y-e.y)},a.mul=function(t,e){return"object"==typeof t?(s&&a.assert(t),s&&n.assert(e),a.neo(t.x*e,t.y*e)):"object"==typeof e?(s&&n.assert(t),s&&a.assert(e),a.neo(t*e.x,t*e.y)):void 0},a.prototype.neg=function(){return this.x=-this.x,this.y=-this.y,this},a.neg=function(t){return s&&a.assert(t),a.neo(-t.x,-t.y)},a.abs=function(t){return s&&a.assert(t),a.neo(n.abs(t.x),n.abs(t.y))},a.mid=function(t,e){return s&&a.assert(t),s&&a.assert(e),a.neo(.5*(t.x+e.x),.5*(t.y+e.y))},a.upper=function(t,e){return s&&a.assert(t),s&&a.assert(e),a.neo(n.max(t.x,e.x),n.max(t.y,e.y))},a.lower=function(t,e){return s&&a.assert(t),s&&a.assert(e),a.neo(n.min(t.x,e.x),n.min(t.y,e.y))},a.prototype.clamp=function(t){var e=this.x*this.x+this.y*this.y;if(e>t*t){var i=n.invSqrt(e);this.x*=i*t,this.y*=i*t}return this},a.clamp=function(t,e){return(t=a.neo(t.x,t.y)).clamp(e),t},a.scaleFn=function(t,e){return function(i){return a.neo(i.x*t,i.y*e)}},a.translateFn=function(t,e){return function(i){return a.neo(i.x+t,i.y+e)}}},4470:(t,e,i)=>{var o="undefined"!=typeof DEBUG&&DEBUG,s="undefined"!=typeof ASSERT&&ASSERT;t.exports=a;var r=i(2274),n=i(5387);function a(t,e,i){if(!(this instanceof a))return new a(t,e,i);void 0===t?(this.x=0,this.y=0,this.z=0):"object"==typeof t?(this.x=t.x,this.y=t.y,this.z=t.z):(this.x=t,this.y=e,this.z=i),s&&a.assert(this)}a.prototype._serialize=function(){return{x:this.x,y:this.y,z:this.z}},a._deserialize=function(t){var e=Object.create(a.prototype);return e.x=t.x,e.y=t.y,e.z=t.z,e},a.neo=function(t,e,i){var o=Object.create(a.prototype);return o.x=t,o.y=e,o.z=i,o},a.clone=function(t){return s&&a.assert(t),a.neo(t.x,t.y,t.z)},a.prototype.toString=function(){return JSON.stringify(this)},a.isValid=function(t){return t&&n.isFinite(t.x)&&n.isFinite(t.y)&&n.isFinite(t.z)},a.assert=function(t){if(s&&!a.isValid(t))throw o&&r.debug(t),new Error("Invalid Vec3!")},a.prototype.setZero=function(){return this.x=0,this.y=0,this.z=0,this},a.prototype.set=function(t,e,i){return this.x=t,this.y=e,this.z=i,this},a.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this},a.prototype.sub=function(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this},a.prototype.mul=function(t){return this.x*=t,this.y*=t,this.z*=t,this},a.areEqual=function(t,e){return s&&a.assert(t),s&&a.assert(e),t==e||"object"==typeof t&&null!==t&&"object"==typeof e&&null!==e&&t.x===e.x&&t.y===e.y&&t.z===e.z},a.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},a.cross=function(t,e){return new a(t.y*e.z-t.z*e.y,t.z*e.x-t.x*e.z,t.x*e.y-t.y*e.x)},a.add=function(t,e){return new a(t.x+e.x,t.y+e.y,t.z+e.z)},a.sub=function(t,e){return new a(t.x-e.x,t.y-e.y,t.z-e.z)},a.mul=function(t,e){return new a(e*t.x,e*t.y,e*t.z)},a.prototype.neg=function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},a.neg=function(t){return new a(-t.x,-t.y,-t.z)}},5235:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=function(){this.v=o.zero(),this.w=0};var o=i(6306)},5489:(t,e)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,e.toString=function(t){t="string"==typeof t?t:"\n";var e="";for(var i in this)"function"!=typeof this[i]&&"object"!=typeof this[i]&&(e+=i+": "+this[i]+t);return e}},3875:(t,e,i)=>{i(2134),i(5387),e.Vec2=i(6306),i(4470),i(6173),i(7515),i(8850),i(3766),i(3406),i(2322),i(662),i(2129),i(8730),i(5878),e.World=i(6972),e.Circle=i(3335),e.Edge=i(3581),i(8901),e.Chain=i(2642),e.Box=i(7639),i(8871),i(1867),i(6891),i(9415),i(9221),i(3343),i(342),i(155),i(2371),i(1952),i(7200),i(9087),i(8087),i(1347),i(1415),e.WheelJoint=i(2707),i(5385),i(5489),i(226),i(8054),i(8650),i(2454),i(1099)},3343:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=u;var o=i(4896),s=i(4175),r=i(1099),n=i(5387),a=i(6306),m=(i(4470),i(6173),i(7515),i(3766)),h=(i(5385),i(8850),i(5235),i(8601),i(5878)),c=i(2129);u.TYPE="distance-joint",h.TYPES[u.TYPE]=u,u._super=h,u.prototype=s(u._super.prototype);var l={frequencyHz:0,dampingRatio:0};function u(t,e,i,s,r){if(!(this instanceof u))return new u(t,e,i,s,r);if(i&&s&&"m_type"in s&&"x"in i&&"y"in i){var m=i;i=s,s=m}t=o(t,l),h.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=u.TYPE,this.m_localAnchorA=a.clone(s?e.getLocalPoint(s):t.localAnchorA||a.zero()),this.m_localAnchorB=a.clone(r?i.getLocalPoint(r):t.localAnchorB||a.zero()),this.m_length=n.isFinite(t.length)?t.length:a.distance(e.getWorldPoint(this.m_localAnchorA),i.getWorldPoint(this.m_localAnchorB)),this.m_frequencyHz=t.frequencyHz,this.m_dampingRatio=t.dampingRatio,this.m_impulse=0,this.m_gamma=0,this.m_bias=0,this.m_u,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_mass}u.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,frequencyHz:this.m_frequencyHz,dampingRatio:this.m_dampingRatio,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,length:this.m_length,impulse:this.m_impulse,gamma:this.m_gamma,bias:this.m_bias}},u._deserialize=function(t,e,i){return(t={...t}).bodyA=i(c,t.bodyA,e),t.bodyB=i(c,t.bodyB,e),new u(t)},u.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB),t.length>0?this.m_length=+t.length:t.length<0||(t.anchorA||t.anchorA||t.anchorA||t.anchorA)&&(this.m_length=a.distance(this.m_bodyA.getWorldPoint(this.m_localAnchorA),this.m_bodyB.getWorldPoint(this.m_localAnchorB)))},u.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},u.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},u.prototype.setLength=function(t){this.m_length=t},u.prototype.getLength=function(){return this.m_length},u.prototype.setFrequency=function(t){this.m_frequencyHz=t},u.prototype.getFrequency=function(){return this.m_frequencyHz},u.prototype.setDampingRatio=function(t){this.m_dampingRatio=t},u.prototype.getDampingRatio=function(){return this.m_dampingRatio},u.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},u.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},u.prototype.getReactionForce=function(t){return a.mul(this.m_impulse,this.m_u).mul(t)},u.prototype.getReactionTorque=function(t){return 0},u.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyA.c_velocity.v,s=this.m_bodyA.c_velocity.w,h=this.m_bodyB.c_position.c,c=this.m_bodyB.c_position.a,l=this.m_bodyB.c_velocity.v,u=this.m_bodyB.c_velocity.w,_=m.neo(i),p=m.neo(c);this.m_rA=m.mulVec2(_,a.sub(this.m_localAnchorA,this.m_localCenterA)),this.m_rB=m.mulVec2(p,a.sub(this.m_localAnchorB,this.m_localCenterB)),this.m_u=a.sub(a.add(h,this.m_rB),a.add(e,this.m_rA));var d=this.m_u.length();d>r.linearSlop?this.m_u.mul(1/d):this.m_u.set(0,0);var y=a.cross(this.m_rA,this.m_u),f=a.cross(this.m_rB,this.m_u),v=this.m_invMassA+this.m_invIA*y*y+this.m_invMassB+this.m_invIB*f*f;if(this.m_mass=0!=v?1/v:0,this.m_frequencyHz>0){var g=d-this.m_length,x=2*n.PI*this.m_frequencyHz,A=2*this.m_mass*this.m_dampingRatio*x,b=this.m_mass*x*x,B=t.dt;this.m_gamma=B*(A+B*b),this.m_gamma=0!=this.m_gamma?1/this.m_gamma:0,this.m_bias=g*B*b*this.m_gamma,v+=this.m_gamma,this.m_mass=0!=v?1/v:0}else this.m_gamma=0,this.m_bias=0;if(t.warmStarting){this.m_impulse*=t.dtRatio;var w=a.mul(this.m_impulse,this.m_u);o.subMul(this.m_invMassA,w),s-=this.m_invIA*a.cross(this.m_rA,w),l.addMul(this.m_invMassB,w),u+=this.m_invIB*a.cross(this.m_rB,w)}else this.m_impulse=0;this.m_bodyA.c_velocity.v.set(o),this.m_bodyA.c_velocity.w=s,this.m_bodyB.c_velocity.v.set(l),this.m_bodyB.c_velocity.w=u},u.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=a.add(e,a.cross(i,this.m_rA)),n=a.add(o,a.cross(s,this.m_rB)),m=a.dot(this.m_u,n)-a.dot(this.m_u,r),h=-this.m_mass*(m+this.m_bias+this.m_gamma*this.m_impulse);this.m_impulse+=h;var c=a.mul(h,this.m_u);e.subMul(this.m_invMassA,c),i-=this.m_invIA*a.cross(this.m_rA,c),o.addMul(this.m_invMassB,c),s+=this.m_invIB*a.cross(this.m_rB,c),this.m_bodyA.c_velocity.v.set(e),this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v.set(o),this.m_bodyB.c_velocity.w=s},u.prototype.solvePositionConstraints=function(t){if(this.m_frequencyHz>0)return!0;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyB.c_position.c,s=this.m_bodyB.c_position.a,h=m.neo(i),c=m.neo(s),l=m.mulSub(h,this.m_localAnchorA,this.m_localCenterA),u=m.mulSub(c,this.m_localAnchorB,this.m_localCenterB),_=a.sub(a.add(o,u),a.add(e,l)),p=_.normalize()-this.m_length;p=n.clamp(p,-r.maxLinearCorrection,r.maxLinearCorrection);var d=-this.m_mass*p,y=a.mul(d,_);return e.subMul(this.m_invMassA,y),i-=this.m_invIA*a.cross(l,y),o.addMul(this.m_invMassB,y),s+=this.m_invIB*a.cross(u,y),this.m_bodyA.c_position.c.set(e),this.m_bodyA.c_position.a=i,this.m_bodyB.c_position.c.set(o),this.m_bodyB.c_position.a=s,n.abs(p)<r.linearSlop}},342:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=p;var s=i(2274),r=i(4896),n=i(4175),a=(i(1099),i(5387)),m=i(6306),h=(i(4470),i(6173)),c=(i(7515),i(3766)),l=(i(5385),i(8850),i(5235),i(8601),i(5878)),u=i(2129);p.TYPE="friction-joint",l.TYPES[p.TYPE]=p,p._super=l,p.prototype=n(p._super.prototype);var _={maxForce:0,maxTorque:0};function p(t,e,i,o){if(!(this instanceof p))return new p(t,e,i,o);t=r(t,_),l.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=p.TYPE,this.m_localAnchorA=m.clone(o?e.getLocalPoint(o):t.localAnchorA||m.zero()),this.m_localAnchorB=m.clone(o?i.getLocalPoint(o):t.localAnchorB||m.zero()),this.m_linearImpulse=m.zero(),this.m_angularImpulse=0,this.m_maxForce=t.maxForce,this.m_maxTorque=t.maxTorque,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_linearMass,this.m_angularMass}p.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,maxForce:this.m_maxForce,maxTorque:this.m_maxTorque,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB}},p._deserialize=function(t,e,i){return(t={...t}).bodyA=i(u,t.bodyA,e),t.bodyB=i(u,t.bodyB,e),new p(t)},p.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB)},p.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},p.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},p.prototype.setMaxForce=function(t){o&&s.assert(a.isFinite(t)&&t>=0),this.m_maxForce=t},p.prototype.getMaxForce=function(){return this.m_maxForce},p.prototype.setMaxTorque=function(t){o&&s.assert(a.isFinite(t)&&t>=0),this.m_maxTorque=t},p.prototype.getMaxTorque=function(){return this.m_maxTorque},p.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},p.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},p.prototype.getReactionForce=function(t){return m.mul(t,this.m_linearImpulse)},p.prototype.getReactionTorque=function(t){return t*this.m_angularImpulse},p.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.a,i=this.m_bodyA.c_velocity.v,o=this.m_bodyA.c_velocity.w,s=this.m_bodyB.c_position.a,r=this.m_bodyB.c_velocity.v,n=this.m_bodyB.c_velocity.w,a=c.neo(e),l=c.neo(s);this.m_rA=c.mulVec2(a,m.sub(this.m_localAnchorA,this.m_localCenterA)),this.m_rB=c.mulVec2(l,m.sub(this.m_localAnchorB,this.m_localCenterB));var u=this.m_invMassA,_=this.m_invMassB,p=this.m_invIA,d=this.m_invIB,y=new h;if(y.ex.x=u+_+p*this.m_rA.y*this.m_rA.y+d*this.m_rB.y*this.m_rB.y,y.ex.y=-p*this.m_rA.x*this.m_rA.y-d*this.m_rB.x*this.m_rB.y,y.ey.x=y.ex.y,y.ey.y=u+_+p*this.m_rA.x*this.m_rA.x+d*this.m_rB.x*this.m_rB.x,this.m_linearMass=y.getInverse(),this.m_angularMass=p+d,this.m_angularMass>0&&(this.m_angularMass=1/this.m_angularMass),t.warmStarting){this.m_linearImpulse.mul(t.dtRatio),this.m_angularImpulse*=t.dtRatio;var f=m.neo(this.m_linearImpulse.x,this.m_linearImpulse.y);i.subMul(u,f),o-=p*(m.cross(this.m_rA,f)+this.m_angularImpulse),r.addMul(_,f),n+=d*(m.cross(this.m_rB,f)+this.m_angularImpulse)}else this.m_linearImpulse.setZero(),this.m_angularImpulse=0;this.m_bodyA.c_velocity.v=i,this.m_bodyA.c_velocity.w=o,this.m_bodyB.c_velocity.v=r,this.m_bodyB.c_velocity.w=n},p.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_invMassA,n=this.m_invMassB,c=this.m_invIA,l=this.m_invIB,u=t.dt,_=s-i,p=-this.m_angularMass*_,d=this.m_angularImpulse,y=u*this.m_maxTorque;this.m_angularImpulse=a.clamp(this.m_angularImpulse+p,-y,y),i-=c*(p=this.m_angularImpulse-d),s+=l*p,_=m.sub(m.add(o,m.cross(s,this.m_rB)),m.add(e,m.cross(i,this.m_rA))),p=m.neg(h.mulVec2(this.m_linearMass,_)),d=this.m_linearImpulse,this.m_linearImpulse.add(p),y=u*this.m_maxForce,this.m_linearImpulse.lengthSquared()>y*y&&(this.m_linearImpulse.normalize(),this.m_linearImpulse.mul(y)),p=m.sub(this.m_linearImpulse,d),e.subMul(r,p),i-=c*m.cross(this.m_rA,p),o.addMul(n,p),s+=l*m.cross(this.m_rB,p),this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},p.prototype.solvePositionConstraints=function(t){return!0}},155:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=y;var s=i(2274),r=i(4896),n=i(4175),a=i(1099),m=i(5387),h=i(6306),c=(i(4470),i(6173),i(7515),i(3766)),l=(i(5385),i(8850),i(5235),i(8601),i(5878)),u=i(2129),_=i(8087),p=i(7200);y.TYPE="gear-joint",l.TYPES[y.TYPE]=y,y._super=l,y.prototype=n(y._super.prototype);var d={ratio:1};function y(t,e,i,n,a,u){if(!(this instanceof y))return new y(t,e,i,n,a,u);var f,v;t=r(t,d),l.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=y.TYPE,o&&s.assert(n.m_type===_.TYPE||n.m_type===p.TYPE),o&&s.assert(a.m_type===_.TYPE||a.m_type===p.TYPE),this.m_joint1=n||t.joint1,this.m_joint2=a||t.joint2,this.m_ratio=m.isFinite(u)?u:t.ratio,this.m_type1=this.m_joint1.getType(),this.m_type2=this.m_joint2.getType(),this.m_bodyC=this.m_joint1.getBodyA(),this.m_bodyA=this.m_joint1.getBodyB();var g=this.m_bodyA.m_xf,x=this.m_bodyA.m_sweep.a,A=this.m_bodyC.m_xf,b=this.m_bodyC.m_sweep.a;if(this.m_type1===_.TYPE){var B=this.m_joint1;this.m_localAnchorC=B.m_localAnchorA,this.m_localAnchorA=B.m_localAnchorB,this.m_referenceAngleA=B.m_referenceAngle,this.m_localAxisC=h.zero(),f=x-b-this.m_referenceAngleA}else{var w=this.m_joint1;this.m_localAnchorC=w.m_localAnchorA,this.m_localAnchorA=w.m_localAnchorB,this.m_referenceAngleA=w.m_referenceAngle,this.m_localAxisC=w.m_localXAxisA;var S=this.m_localAnchorC,C=c.mulTVec2(A.q,h.add(c.mul(g.q,this.m_localAnchorA),h.sub(g.p,A.p)));f=h.dot(C,this.m_localAxisC)-h.dot(S,this.m_localAxisC)}this.m_bodyD=this.m_joint2.getBodyA(),this.m_bodyB=this.m_joint2.getBodyB();var T=this.m_bodyB.m_xf,M=this.m_bodyB.m_sweep.a,P=this.m_bodyD.m_xf,E=this.m_bodyD.m_sweep.a;if(this.m_type2===_.TYPE)B=this.m_joint2,this.m_localAnchorD=B.m_localAnchorA,this.m_localAnchorB=B.m_localAnchorB,this.m_referenceAngleB=B.m_referenceAngle,this.m_localAxisD=h.zero(),v=M-E-this.m_referenceAngleB;else{w=this.m_joint2,this.m_localAnchorD=w.m_localAnchorA,this.m_localAnchorB=w.m_localAnchorB,this.m_referenceAngleB=w.m_referenceAngle,this.m_localAxisD=w.m_localXAxisA;var I=this.m_localAnchorD,V=c.mulTVec2(P.q,h.add(c.mul(T.q,this.m_localAnchorB),h.sub(T.p,P.p)));v=h.dot(V,this.m_localAxisD)-h.dot(I,this.m_localAxisD)}this.m_constant=f+this.m_ratio*v,this.m_impulse=0,this.m_lcA,this.m_lcB,this.m_lcC,this.m_lcD,this.m_mA,this.m_mB,this.m_mC,this.m_mD,this.m_iA,this.m_iB,this.m_iC,this.m_iD,this.m_JvAC,this.m_JvBD,this.m_JwA,this.m_JwB,this.m_JwC,this.m_JwD,this.m_mass}y.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,joint1:this.m_joint1,joint2:this.m_joint2,ratio:this.m_ratio}},y._deserialize=function(t,e,i){return(t={...t}).bodyA=i(u,t.bodyA,e),t.bodyB=i(u,t.bodyB,e),t.joint1=i(l,t.joint1,e),t.joint2=i(l,t.joint2,e),new y(t)},y.prototype.getJoint1=function(){return this.m_joint1},y.prototype.getJoint2=function(){return this.m_joint2},y.prototype.setRatio=function(t){o&&s.assert(m.isFinite(t)),this.m_ratio=t},y.prototype.getRatio=function(){return this.m_ratio},y.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},y.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},y.prototype.getReactionForce=function(t){return h.mul(this.m_impulse,this.m_JvAC).mul(t)},y.prototype.getReactionTorque=function(t){return t*(this.m_impulse*this.m_JwA)},y.prototype.initVelocityConstraints=function(t){this.m_lcA=this.m_bodyA.m_sweep.localCenter,this.m_lcB=this.m_bodyB.m_sweep.localCenter,this.m_lcC=this.m_bodyC.m_sweep.localCenter,this.m_lcD=this.m_bodyD.m_sweep.localCenter,this.m_mA=this.m_bodyA.m_invMass,this.m_mB=this.m_bodyB.m_invMass,this.m_mC=this.m_bodyC.m_invMass,this.m_mD=this.m_bodyD.m_invMass,this.m_iA=this.m_bodyA.m_invI,this.m_iB=this.m_bodyB.m_invI,this.m_iC=this.m_bodyC.m_invI,this.m_iD=this.m_bodyD.m_invI;var e=this.m_bodyA.c_position.a,i=this.m_bodyA.c_velocity.v,o=this.m_bodyA.c_velocity.w,s=this.m_bodyB.c_position.a,r=this.m_bodyB.c_velocity.v,n=this.m_bodyB.c_velocity.w,a=this.m_bodyC.c_position.a,m=this.m_bodyC.c_velocity.v,l=this.m_bodyC.c_velocity.w,u=this.m_bodyD.c_position.a,p=this.m_bodyD.c_velocity.v,d=this.m_bodyD.c_velocity.w,y=c.neo(e),f=c.neo(s),v=c.neo(a),g=c.neo(u);if(this.m_mass=0,this.m_type1==_.TYPE)this.m_JvAC=h.zero(),this.m_JwA=1,this.m_JwC=1,this.m_mass+=this.m_iA+this.m_iC;else{var x=c.mulVec2(v,this.m_localAxisC),A=c.mulSub(v,this.m_localAnchorC,this.m_lcC),b=c.mulSub(y,this.m_localAnchorA,this.m_lcA);this.m_JvAC=x,this.m_JwC=h.cross(A,x),this.m_JwA=h.cross(b,x),this.m_mass+=this.m_mC+this.m_mA+this.m_iC*this.m_JwC*this.m_JwC+this.m_iA*this.m_JwA*this.m_JwA}if(this.m_type2==_.TYPE)this.m_JvBD=h.zero(),this.m_JwB=this.m_ratio,this.m_JwD=this.m_ratio,this.m_mass+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD);else{x=c.mulVec2(g,this.m_localAxisD);var B=c.mulSub(g,this.m_localAnchorD,this.m_lcD),w=c.mulSub(f,this.m_localAnchorB,this.m_lcB);this.m_JvBD=h.mul(this.m_ratio,x),this.m_JwD=this.m_ratio*h.cross(B,x),this.m_JwB=this.m_ratio*h.cross(w,x),this.m_mass+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*this.m_JwD*this.m_JwD+this.m_iB*this.m_JwB*this.m_JwB}this.m_mass=this.m_mass>0?1/this.m_mass:0,t.warmStarting?(i.addMul(this.m_mA*this.m_impulse,this.m_JvAC),o+=this.m_iA*this.m_impulse*this.m_JwA,r.addMul(this.m_mB*this.m_impulse,this.m_JvBD),n+=this.m_iB*this.m_impulse*this.m_JwB,m.subMul(this.m_mC*this.m_impulse,this.m_JvAC),l-=this.m_iC*this.m_impulse*this.m_JwC,p.subMul(this.m_mD*this.m_impulse,this.m_JvBD),d-=this.m_iD*this.m_impulse*this.m_JwD):this.m_impulse=0,this.m_bodyA.c_velocity.v.set(i),this.m_bodyA.c_velocity.w=o,this.m_bodyB.c_velocity.v.set(r),this.m_bodyB.c_velocity.w=n,this.m_bodyC.c_velocity.v.set(m),this.m_bodyC.c_velocity.w=l,this.m_bodyD.c_velocity.v.set(p),this.m_bodyD.c_velocity.w=d},y.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_bodyC.c_velocity.v,n=this.m_bodyC.c_velocity.w,a=this.m_bodyD.c_velocity.v,m=this.m_bodyD.c_velocity.w,c=h.dot(this.m_JvAC,e)-h.dot(this.m_JvAC,r)+h.dot(this.m_JvBD,o)-h.dot(this.m_JvBD,a);c+=this.m_JwA*i-this.m_JwC*n+(this.m_JwB*s-this.m_JwD*m);var l=-this.m_mass*c;this.m_impulse+=l,e.addMul(this.m_mA*l,this.m_JvAC),i+=this.m_iA*l*this.m_JwA,o.addMul(this.m_mB*l,this.m_JvBD),s+=this.m_iB*l*this.m_JwB,r.subMul(this.m_mC*l,this.m_JvAC),n-=this.m_iC*l*this.m_JwC,a.subMul(this.m_mD*l,this.m_JvBD),m-=this.m_iD*l*this.m_JwD,this.m_bodyA.c_velocity.v.set(e),this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v.set(o),this.m_bodyB.c_velocity.w=s,this.m_bodyC.c_velocity.v.set(r),this.m_bodyC.c_velocity.w=n,this.m_bodyD.c_velocity.v.set(a),this.m_bodyD.c_velocity.w=m},y.prototype.solvePositionConstraints=function(t){var e,i,o,s,r,n,m,l,u=this.m_bodyA.c_position.c,p=this.m_bodyA.c_position.a,d=this.m_bodyB.c_position.c,y=this.m_bodyB.c_position.a,f=this.m_bodyC.c_position.c,v=this.m_bodyC.c_position.a,g=this.m_bodyD.c_position.c,x=this.m_bodyD.c_position.a,A=c.neo(p),b=c.neo(y),B=c.neo(v),w=c.neo(x),S=0;if(this.m_type1==_.TYPE)o=h.zero(),r=1,m=1,S+=this.m_iA+this.m_iC,e=p-v-this.m_referenceAngleA;else{var C=c.mulVec2(B,this.m_localAxisC),T=c.mulSub(B,this.m_localAnchorC,this.m_lcC),M=c.mulSub(A,this.m_localAnchorA,this.m_lcA);o=C,m=h.cross(T,C),r=h.cross(M,C),S+=this.m_mC+this.m_mA+this.m_iC*m*m+this.m_iA*r*r;var P=h.sub(this.m_localAnchorC,this.m_lcC),E=c.mulTVec2(B,h.add(M,h.sub(u,f)));e=h.dot(h.sub(E,P),this.m_localAxisC)}if(this.m_type2==_.TYPE)s=h.zero(),n=this.m_ratio,l=this.m_ratio,S+=this.m_ratio*this.m_ratio*(this.m_iB+this.m_iD),i=y-x-this.m_referenceAngleB;else{C=c.mulVec2(w,this.m_localAxisD);var I=c.mulSub(w,this.m_localAnchorD,this.m_lcD),V=c.mulSub(b,this.m_localAnchorB,this.m_lcB);s=h.mul(this.m_ratio,C),l=this.m_ratio*h.cross(I,C),n=this.m_ratio*h.cross(V,C),S+=this.m_ratio*this.m_ratio*(this.m_mD+this.m_mB)+this.m_iD*l*l+this.m_iB*n*n;var z=h.sub(this.m_localAnchorD,this.m_lcD),F=c.mulTVec2(w,h.add(V,h.sub(d,g)));i=h.dot(F,this.m_localAxisD)-h.dot(z,this.m_localAxisD)}var R=e+this.m_ratio*i-this.m_constant,L=0;return S>0&&(L=-R/S),u.addMul(this.m_mA*L,o),p+=this.m_iA*L*r,d.addMul(this.m_mB*L,s),y+=this.m_iB*L*n,f.subMul(this.m_mC*L,o),v-=this.m_iC*L*m,g.subMul(this.m_mD*L,s),x-=this.m_iD*L*l,this.m_bodyA.c_position.c.set(u),this.m_bodyA.c_position.a=p,this.m_bodyB.c_position.c.set(d),this.m_bodyB.c_position.a=y,this.m_bodyC.c_position.c.set(f),this.m_bodyC.c_position.a=v,this.m_bodyD.c_position.c.set(g),this.m_bodyD.c_position.a=x,0<a.linearSlop}},2371:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=p;var s=i(2274),r=i(4896),n=i(4175),a=(i(1099),i(5387)),m=i(6306),h=(i(4470),i(6173)),c=(i(7515),i(3766)),l=(i(5385),i(8850),i(5235),i(8601),i(5878)),u=i(2129);p.TYPE="motor-joint",l.TYPES[p.TYPE]=p,p._super=l,p.prototype=n(p._super.prototype);var _={maxForce:1,maxTorque:1,correctionFactor:.3};function p(t,e,i){if(!(this instanceof p))return new p(t,e,i);t=r(t,_),l.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=p.TYPE,this.m_linearOffset=a.isFinite(t.linearOffset)?t.linearOffset:e.getLocalPoint(i.getPosition()),this.m_angularOffset=a.isFinite(t.angularOffset)?t.angularOffset:i.getAngle()-e.getAngle(),this.m_linearImpulse=m.zero(),this.m_angularImpulse=0,this.m_maxForce=t.maxForce,this.m_maxTorque=t.maxTorque,this.m_correctionFactor=t.correctionFactor,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_linearError,this.m_angularError,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_linearMass,this.m_angularMass}p.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,maxForce:this.m_maxForce,maxTorque:this.m_maxTorque,correctionFactor:this.m_correctionFactor,linearOffset:this.m_linearOffset,angularOffset:this.m_angularOffset}},p._deserialize=function(t,e,i){return(t={...t}).bodyA=i(u,t.bodyA,e),t.bodyB=i(u,t.bodyB,e),new p(t)},p.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB)},p.prototype.setMaxForce=function(t){o&&s.assert(a.isFinite(t)&&t>=0),this.m_maxForce=t},p.prototype.getMaxForce=function(){return this.m_maxForce},p.prototype.setMaxTorque=function(t){o&&s.assert(a.isFinite(t)&&t>=0),this.m_maxTorque=t},p.prototype.getMaxTorque=function(){return this.m_maxTorque},p.prototype.setCorrectionFactor=function(t){o&&s.assert(a.isFinite(t)&&0<=t&&t<=1),this.m_correctionFactor=t},p.prototype.getCorrectionFactor=function(){return this.m_correctionFactor},p.prototype.setLinearOffset=function(t){t.x==this.m_linearOffset.x&&t.y==this.m_linearOffset.y||(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_linearOffset=t)},p.prototype.getLinearOffset=function(){return this.m_linearOffset},p.prototype.setAngularOffset=function(t){t!=this.m_angularOffset&&(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_angularOffset=t)},p.prototype.getAngularOffset=function(){return this.m_angularOffset},p.prototype.getAnchorA=function(){return this.m_bodyA.getPosition()},p.prototype.getAnchorB=function(){return this.m_bodyB.getPosition()},p.prototype.getReactionForce=function(t){return m.mul(t,this.m_linearImpulse)},p.prototype.getReactionTorque=function(t){return t*this.m_angularImpulse},p.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyA.c_velocity.v,s=this.m_bodyA.c_velocity.w,r=this.m_bodyB.c_position.c,n=this.m_bodyB.c_position.a,a=this.m_bodyB.c_velocity.v,l=this.m_bodyB.c_velocity.w,u=c.neo(i),_=c.neo(n);this.m_rA=c.mulVec2(u,m.neg(this.m_localCenterA)),this.m_rB=c.mulVec2(_,m.neg(this.m_localCenterB));var p=this.m_invMassA,d=this.m_invMassB,y=this.m_invIA,f=this.m_invIB,v=new h;if(v.ex.x=p+d+y*this.m_rA.y*this.m_rA.y+f*this.m_rB.y*this.m_rB.y,v.ex.y=-y*this.m_rA.x*this.m_rA.y-f*this.m_rB.x*this.m_rB.y,v.ey.x=v.ex.y,v.ey.y=p+d+y*this.m_rA.x*this.m_rA.x+f*this.m_rB.x*this.m_rB.x,this.m_linearMass=v.getInverse(),this.m_angularMass=y+f,this.m_angularMass>0&&(this.m_angularMass=1/this.m_angularMass),this.m_linearError=m.zero(),this.m_linearError.addCombine(1,r,1,this.m_rB),this.m_linearError.subCombine(1,e,1,this.m_rA),this.m_linearError.sub(c.mulVec2(u,this.m_linearOffset)),this.m_angularError=n-i-this.m_angularOffset,t.warmStarting){this.m_linearImpulse.mul(t.dtRatio),this.m_angularImpulse*=t.dtRatio;var g=m.neo(this.m_linearImpulse.x,this.m_linearImpulse.y);o.subMul(p,g),s-=y*(m.cross(this.m_rA,g)+this.m_angularImpulse),a.addMul(d,g),l+=f*(m.cross(this.m_rB,g)+this.m_angularImpulse)}else this.m_linearImpulse.setZero(),this.m_angularImpulse=0;this.m_bodyA.c_velocity.v=o,this.m_bodyA.c_velocity.w=s,this.m_bodyB.c_velocity.v=a,this.m_bodyB.c_velocity.w=l},p.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_invMassA,n=this.m_invMassB,c=this.m_invIA,l=this.m_invIB,u=t.dt,_=t.inv_dt,p=s-i+_*this.m_correctionFactor*this.m_angularError,d=-this.m_angularMass*p,y=this.m_angularImpulse,f=u*this.m_maxTorque;this.m_angularImpulse=a.clamp(this.m_angularImpulse+d,-f,f),i-=c*(d=this.m_angularImpulse-y),s+=l*d,(p=m.zero()).addCombine(1,o,1,m.cross(s,this.m_rB)),p.subCombine(1,e,1,m.cross(i,this.m_rA)),p.addMul(_*this.m_correctionFactor,this.m_linearError),d=m.neg(h.mulVec2(this.m_linearMass,p)),y=m.clone(this.m_linearImpulse),this.m_linearImpulse.add(d),f=u*this.m_maxForce,this.m_linearImpulse.clamp(f),d=m.sub(this.m_linearImpulse,y),e.subMul(r,d),i-=c*m.cross(this.m_rA,d),o.addMul(n,d),s+=l*m.cross(this.m_rB,d),this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},p.prototype.solvePositionConstraints=function(t){return!0}},1952:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=d;var s=i(2274),r=i(4896),n=i(4175),a=i(5387),m=i(6306),h=(i(4470),i(6173)),c=(i(7515),i(3766)),l=(i(5385),i(8850)),u=(i(5235),i(8601),i(5878)),_=i(2129);d.TYPE="mouse-joint",u.TYPES[d.TYPE]=d,d._super=u,d.prototype=n(d._super.prototype);var p={maxForce:0,frequencyHz:5,dampingRatio:.7};function d(t,e,i,n){if(!(this instanceof d))return new d(t,e,i,n);t=r(t,p),u.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=d.TYPE,o&&s.assert(a.isFinite(t.maxForce)&&t.maxForce>=0),o&&s.assert(a.isFinite(t.frequencyHz)&&t.frequencyHz>=0),o&&s.assert(a.isFinite(t.dampingRatio)&&t.dampingRatio>=0),this.m_targetA=n?m.clone(n):t.target||m.zero(),this.m_localAnchorB=l.mulTVec2(i.getTransform(),this.m_targetA),this.m_maxForce=t.maxForce,this.m_impulse=m.zero(),this.m_frequencyHz=t.frequencyHz,this.m_dampingRatio=t.dampingRatio,this.m_beta=0,this.m_gamma=0,this.m_rB=m.zero(),this.m_localCenterB=m.zero(),this.m_invMassB=0,this.m_invIB=0,this.mass=new h,this.m_C=m.zero()}d.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,target:this.m_targetA,maxForce:this.m_maxForce,frequencyHz:this.m_frequencyHz,dampingRatio:this.m_dampingRatio,_localAnchorB:this.m_localAnchorB}},d._deserialize=function(t,e,i){(t={...t}).bodyA=i(_,t.bodyA,e),t.bodyB=i(_,t.bodyB,e),t.target=m(t.target);var o=new d(t);return t._localAnchorB&&(o.m_localAnchorB=t._localAnchorB),o},d.prototype.setTarget=function(t){0==this.m_bodyB.isAwake()&&this.m_bodyB.setAwake(!0),this.m_targetA=m.clone(t)},d.prototype.getTarget=function(){return this.m_targetA},d.prototype.setMaxForce=function(t){this.m_maxForce=t},d.getMaxForce=function(){return this.m_maxForce},d.prototype.setFrequency=function(t){this.m_frequencyHz=t},d.prototype.getFrequency=function(){return this.m_frequencyHz},d.prototype.setDampingRatio=function(t){this.m_dampingRatio=t},d.prototype.getDampingRatio=function(){return this.m_dampingRatio},d.prototype.getAnchorA=function(){return m.clone(this.m_targetA)},d.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},d.prototype.getReactionForce=function(t){return m.mul(t,this.m_impulse)},d.prototype.getReactionTorque=function(t){return 0*t},d.prototype.shiftOrigin=function(t){this.m_targetA.sub(t)},d.prototype.initVelocityConstraints=function(t){this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyB.c_position,i=this.m_bodyB.c_velocity,r=e.c,n=e.a,l=i.v,u=i.w,_=c.neo(n),p=this.m_bodyB.getMass(),d=2*a.PI*this.m_frequencyHz,y=2*p*this.m_dampingRatio*d,f=p*(d*d),v=t.dt;o&&s.assert(y+v*f>a.EPSILON),this.m_gamma=v*(y+v*f),0!=this.m_gamma&&(this.m_gamma=1/this.m_gamma),this.m_beta=v*f*this.m_gamma,this.m_rB=c.mulVec2(_,m.sub(this.m_localAnchorB,this.m_localCenterB));var g=new h;g.ex.x=this.m_invMassB+this.m_invIB*this.m_rB.y*this.m_rB.y+this.m_gamma,g.ex.y=-this.m_invIB*this.m_rB.x*this.m_rB.y,g.ey.x=g.ex.y,g.ey.y=this.m_invMassB+this.m_invIB*this.m_rB.x*this.m_rB.x+this.m_gamma,this.m_mass=g.getInverse(),this.m_C.set(r),this.m_C.addCombine(1,this.m_rB,-1,this.m_targetA),this.m_C.mul(this.m_beta),u*=.98,t.warmStarting?(this.m_impulse.mul(t.dtRatio),l.addMul(this.m_invMassB,this.m_impulse),u+=this.m_invIB*m.cross(this.m_rB,this.m_impulse)):this.m_impulse.setZero(),i.v.set(l),i.w=u},d.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyB.c_velocity,i=m.clone(e.v),o=e.w,s=m.cross(o,this.m_rB);s.add(i),s.addCombine(1,this.m_C,this.m_gamma,this.m_impulse),s.neg();var r=h.mulVec2(this.m_mass,s),n=m.clone(this.m_impulse);this.m_impulse.add(r);var a=t.dt*this.m_maxForce;this.m_impulse.clamp(a),r=m.sub(this.m_impulse,n),i.addMul(this.m_invMassB,r),o+=this.m_invIB*m.cross(this.m_rB,r),e.v.set(i),e.w=o},d.prototype.solvePositionConstraints=function(t){return!0}},7200:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=f;var s=i(2274),r=i(4896),n=i(4175),a=i(1099),m=i(5387),h=i(6306),c=i(4470),l=i(6173),u=i(7515),_=i(3766),p=(i(5385),i(8850),i(5235),i(8601),i(5878)),d=i(2129);f.TYPE="prismatic-joint",p.TYPES[f.TYPE]=f,f._super=p,f.prototype=n(f._super.prototype);var y={enableLimit:!1,lowerTranslation:0,upperTranslation:0,enableMotor:!1,maxMotorForce:0,motorSpeed:0};function f(t,e,i,o,s){if(!(this instanceof f))return new f(t,e,i,o,s);t=r(t,y),p.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=f.TYPE,this.m_localAnchorA=h.clone(o?e.getLocalPoint(o):t.localAnchorA||h.zero()),this.m_localAnchorB=h.clone(o?i.getLocalPoint(o):t.localAnchorB||h.zero()),this.m_localXAxisA=h.clone(s?e.getLocalVector(s):t.localAxisA||h.neo(1,0)),this.m_localXAxisA.normalize(),this.m_localYAxisA=h.cross(1,this.m_localXAxisA),this.m_referenceAngle=m.isFinite(t.referenceAngle)?t.referenceAngle:i.getAngle()-e.getAngle(),this.m_impulse=c(),this.m_motorMass=0,this.m_motorImpulse=0,this.m_lowerTranslation=t.lowerTranslation,this.m_upperTranslation=t.upperTranslation,this.m_maxMotorForce=t.maxMotorForce,this.m_motorSpeed=t.motorSpeed,this.m_enableLimit=t.enableLimit,this.m_enableMotor=t.enableMotor,this.m_limitState=0,this.m_axis=h.zero(),this.m_perp=h.zero(),this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_axis,this.m_perp,this.m_s1,this.m_s2,this.m_a1,this.m_a2,this.m_K=new u,this.m_motorMass}f.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,lowerTranslation:this.m_lowerTranslation,upperTranslation:this.m_upperTranslation,maxMotorForce:this.m_maxMotorForce,motorSpeed:this.m_motorSpeed,enableLimit:this.m_enableLimit,enableMotor:this.m_enableMotor,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,localAxisA:this.m_localXAxisA,referenceAngle:this.m_referenceAngle}},f._deserialize=function(t,e,i){return(t={...t}).bodyA=i(d,t.bodyA,e),t.bodyB=i(d,t.bodyB,e),t.localAxisA=h(t.localAxisA),new f(t)},f.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB),t.localAxisA&&(this.m_localXAxisA.set(t.localAxisA),this.m_localYAxisA.set(h.cross(1,t.localAxisA)))},f.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},f.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},f.prototype.getLocalAxisA=function(){return this.m_localXAxisA},f.prototype.getReferenceAngle=function(){return this.m_referenceAngle},f.prototype.getJointTranslation=function(){var t=this.m_bodyA.getWorldPoint(this.m_localAnchorA),e=this.m_bodyB.getWorldPoint(this.m_localAnchorB),i=h.sub(e,t),o=this.m_bodyA.getWorldVector(this.m_localXAxisA);return h.dot(i,o)},f.prototype.getJointSpeed=function(){var t=this.m_bodyA,e=this.m_bodyB,i=_.mulVec2(t.m_xf.q,h.sub(this.m_localAnchorA,t.m_sweep.localCenter)),o=_.mulVec2(e.m_xf.q,h.sub(this.m_localAnchorB,e.m_sweep.localCenter)),s=h.add(t.m_sweep.c,i),r=h.add(e.m_sweep.c,o),n=h.sub(r,s),a=_.mulVec2(t.m_xf.q,this.m_localXAxisA),m=t.m_linearVelocity,c=e.m_linearVelocity,l=t.m_angularVelocity,u=e.m_angularVelocity;return h.dot(n,h.cross(l,a))+h.dot(a,h.sub(h.addCross(c,u,o),h.addCross(m,l,i)))},f.prototype.isLimitEnabled=function(){return this.m_enableLimit},f.prototype.enableLimit=function(t){t!=this.m_enableLimit&&(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_enableLimit=t,this.m_impulse.z=0)},f.prototype.getLowerLimit=function(){return this.m_lowerTranslation},f.prototype.getUpperLimit=function(){return this.m_upperTranslation},f.prototype.setLimits=function(t,e){o&&s.assert(t<=e),t==this.m_lowerTranslation&&e==this.m_upperTranslation||(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_lowerTranslation=t,this.m_upperTranslation=e,this.m_impulse.z=0)},f.prototype.isMotorEnabled=function(){return this.m_enableMotor},f.prototype.enableMotor=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_enableMotor=t},f.prototype.setMotorSpeed=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_motorSpeed=t},f.prototype.setMaxMotorForce=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_maxMotorForce=t},f.prototype.getMaxMotorForce=function(){return this.m_maxMotorForce},f.prototype.getMotorSpeed=function(){return this.m_motorSpeed},f.prototype.getMotorForce=function(t){return t*this.m_motorImpulse},f.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},f.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},f.prototype.getReactionForce=function(t){return h.combine(this.m_impulse.x,this.m_perp,this.m_motorImpulse+this.m_impulse.z,this.m_axis).mul(t)},f.prototype.getReactionTorque=function(t){return t*this.m_impulse.y},f.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyA.c_velocity.v,s=this.m_bodyA.c_velocity.w,r=this.m_bodyB.c_position.c,n=this.m_bodyB.c_position.a,c=this.m_bodyB.c_velocity.v,l=this.m_bodyB.c_velocity.w,u=_.neo(i),p=_.neo(n),d=_.mulVec2(u,h.sub(this.m_localAnchorA,this.m_localCenterA)),y=_.mulVec2(p,h.sub(this.m_localAnchorB,this.m_localCenterB)),f=h.zero();f.addCombine(1,r,1,y),f.subCombine(1,e,1,d);var v=this.m_invMassA,g=this.m_invMassB,x=this.m_invIA,A=this.m_invIB;this.m_axis=_.mulVec2(u,this.m_localXAxisA),this.m_a1=h.cross(h.add(f,d),this.m_axis),this.m_a2=h.cross(y,this.m_axis),this.m_motorMass=v+g+x*this.m_a1*this.m_a1+A*this.m_a2*this.m_a2,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass),this.m_perp=_.mulVec2(u,this.m_localYAxisA),this.m_s1=h.cross(h.add(f,d),this.m_perp),this.m_s2=h.cross(y,this.m_perp),h.cross(d,this.m_perp);var b=v+g+x*this.m_s1*this.m_s1+A*this.m_s2*this.m_s2,B=x*this.m_s1+A*this.m_s2,w=x*this.m_s1*this.m_a1+A*this.m_s2*this.m_a2,S=x+A;0==S&&(S=1);var C=x*this.m_a1+A*this.m_a2,T=v+g+x*this.m_a1*this.m_a1+A*this.m_a2*this.m_a2;if(this.m_K.ex.set(b,B,w),this.m_K.ey.set(B,S,C),this.m_K.ez.set(w,C,T),this.m_enableLimit){var M=h.dot(this.m_axis,f);m.abs(this.m_upperTranslation-this.m_lowerTranslation)<2*a.linearSlop?this.m_limitState=3:M<=this.m_lowerTranslation?1!=this.m_limitState&&(this.m_limitState=1,this.m_impulse.z=0):M>=this.m_upperTranslation?2!=this.m_limitState&&(this.m_limitState=2,this.m_impulse.z=0):(this.m_limitState=0,this.m_impulse.z=0)}else this.m_limitState=0,this.m_impulse.z=0;if(0==this.m_enableMotor&&(this.m_motorImpulse=0),t.warmStarting){this.m_impulse.mul(t.dtRatio),this.m_motorImpulse*=t.dtRatio;var P=h.combine(this.m_impulse.x,this.m_perp,this.m_motorImpulse+this.m_impulse.z,this.m_axis),E=this.m_impulse.x*this.m_s1+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a1,I=this.m_impulse.x*this.m_s2+this.m_impulse.y+(this.m_motorImpulse+this.m_impulse.z)*this.m_a2;o.subMul(v,P),s-=x*E,c.addMul(g,P),l+=A*I}else this.m_impulse.setZero(),this.m_motorImpulse=0;this.m_bodyA.c_velocity.v.set(o),this.m_bodyA.c_velocity.w=s,this.m_bodyB.c_velocity.v.set(c),this.m_bodyB.c_velocity.w=l},f.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_invMassA,n=this.m_invMassB,a=this.m_invIA,l=this.m_invIB;if(this.m_enableMotor&&3!=this.m_limitState){var u=h.dot(this.m_axis,h.sub(o,e))+this.m_a2*s-this.m_a1*i,_=this.m_motorMass*(this.m_motorSpeed-u),p=this.m_motorImpulse,d=t.dt*this.m_maxMotorForce;this.m_motorImpulse=m.clamp(this.m_motorImpulse+_,-d,d),_=this.m_motorImpulse-p;var y=h.mul(_,this.m_axis),f=_*this.m_a1,v=_*this.m_a2;e.subMul(r,y),i-=a*f,o.addMul(n,y),s+=l*v}var g=h.zero();if(g.x+=h.dot(this.m_perp,o)+this.m_s2*s,g.x-=h.dot(this.m_perp,e)+this.m_s1*i,g.y=s-i,this.m_enableLimit&&0!=this.m_limitState){var x=0;x+=h.dot(this.m_axis,o)+this.m_a2*s,x-=h.dot(this.m_axis,e)+this.m_a1*i,u=c(g.x,g.y,x);var A=c(this.m_impulse),b=this.m_K.solve33(c.neg(u));this.m_impulse.add(b),1==this.m_limitState?this.m_impulse.z=m.max(this.m_impulse.z,0):2==this.m_limitState&&(this.m_impulse.z=m.min(this.m_impulse.z,0));var B=h.combine(-1,g,-(this.m_impulse.z-A.z),h.neo(this.m_K.ez.x,this.m_K.ez.y)),w=h.add(this.m_K.solve22(B),h.neo(A.x,A.y));this.m_impulse.x=w.x,this.m_impulse.y=w.y,b=c.sub(this.m_impulse,A),y=h.combine(b.x,this.m_perp,b.z,this.m_axis),f=b.x*this.m_s1+b.y+b.z*this.m_a1,v=b.x*this.m_s2+b.y+b.z*this.m_a2,e.subMul(r,y),i-=a*f,o.addMul(n,y),s+=l*v}else b=this.m_K.solve22(h.neg(g)),this.m_impulse.x+=b.x,this.m_impulse.y+=b.y,y=h.mul(b.x,this.m_perp),f=b.x*this.m_s1+b.y,v=b.x*this.m_s2+b.y,e.subMul(r,y),i-=a*f,o.addMul(n,y),s+=l*v;this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},f.prototype.solvePositionConstraints=function(t){var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyB.c_position.c,s=this.m_bodyB.c_position.a,r=_.neo(i),n=_.neo(s),p=this.m_invMassA,d=this.m_invMassB,y=this.m_invIA,f=this.m_invIB,v=_.mulVec2(r,h.sub(this.m_localAnchorA,this.m_localCenterA)),g=_.mulVec2(n,h.sub(this.m_localAnchorB,this.m_localCenterB)),x=h.sub(h.add(o,g),h.add(e,v)),A=_.mulVec2(r,this.m_localXAxisA),b=h.cross(h.add(x,v),A),B=h.cross(g,A),w=_.mulVec2(r,this.m_localYAxisA),S=h.cross(h.add(x,v),w),C=h.cross(g,w),T=c(),M=h.zero();M.x=h.dot(w,x),M.y=s-i-this.m_referenceAngle;var P=m.abs(M.x),E=m.abs(M.y),I=a.linearSlop,V=a.maxLinearCorrection,z=!1,F=0;if(this.m_enableLimit){var R=h.dot(A,x);m.abs(this.m_upperTranslation-this.m_lowerTranslation)<2*I?(F=m.clamp(R,-V,V),P=m.max(P,m.abs(R)),z=!0):R<=this.m_lowerTranslation?(F=m.clamp(R-this.m_lowerTranslation+I,-V,0),P=m.max(P,this.m_lowerTranslation-R),z=!0):R>=this.m_upperTranslation&&(F=m.clamp(R-this.m_upperTranslation-I,0,V),P=m.max(P,R-this.m_upperTranslation),z=!0)}if(z){var L=p+d+y*S*S+f*C*C,D=y*S+f*C,k=y*S*b+f*C*B;0==(j=y+f)&&(j=1);var q=y*b+f*B,U=p+d+y*b*b+f*B*B;(N=new u).ex.set(L,D,k),N.ey.set(D,j,q),N.ez.set(k,q,U);var O=c();O.x=M.x,O.y=M.y,O.z=F,T=N.solve33(c.neg(O))}else{var j,N;L=p+d+y*S*S+f*C*C,D=y*S+f*C,0==(j=y+f)&&(j=1),(N=new l).ex.set(L,D),N.ey.set(D,j);var Y=N.solve(h.neg(M));T.x=Y.x,T.y=Y.y,T.z=0}var G=h.combine(T.x,w,T.z,A),W=T.x*S+T.y+T.z*b,X=T.x*C+T.y+T.z*B;return e.subMul(p,G),i-=y*W,o.addMul(d,G),s+=f*X,this.m_bodyA.c_position.c=e,this.m_bodyA.c_position.a=i,this.m_bodyB.c_position.c=o,this.m_bodyB.c_position.a=s,P<=a.linearSlop&&E<=a.angularSlop}},9087:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=p;var s=i(2274),r=i(4896),n=i(4175),a=i(1099),m=i(5387),h=i(6306),c=(i(4470),i(6173),i(7515),i(3766)),l=(i(5385),i(8850),i(5235),i(8601),i(5878)),u=i(2129);p.TYPE="pulley-joint",p.MIN_PULLEY_LENGTH=2,l.TYPES[p.TYPE]=p,p._super=l,p.prototype=n(p._super.prototype);var _={collideConnected:!0};function p(t,e,i,n,a,c,u,d){if(!(this instanceof p))return new p(t,e,i,n,a,c,u,d);t=r(t,_),l.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=p.TYPE,this.m_groundAnchorA=n||t.groundAnchorA||h.neo(-1,1),this.m_groundAnchorB=a||t.groundAnchorB||h.neo(1,1),this.m_localAnchorA=c?e.getLocalPoint(c):t.localAnchorA||h.neo(-1,0),this.m_localAnchorB=u?i.getLocalPoint(u):t.localAnchorB||h.neo(1,0),this.m_lengthA=m.isFinite(t.lengthA)?t.lengthA:h.distance(c,n),this.m_lengthB=m.isFinite(t.lengthB)?t.lengthB:h.distance(u,a),this.m_ratio=m.isFinite(d)?d:t.ratio,o&&s.assert(d>m.EPSILON),this.m_constant=this.m_lengthA+this.m_ratio*this.m_lengthB,this.m_impulse=0,this.m_uA,this.m_uB,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_mass}p.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,groundAnchorA:this.m_groundAnchorA,groundAnchorB:this.m_groundAnchorB,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,lengthA:this.m_lengthA,lengthB:this.m_lengthB,ratio:this.m_ratio}},p._deserialize=function(t,e,i){return(t={...t}).bodyA=i(u,t.bodyA,e),t.bodyB=i(u,t.bodyB,e),new p(t)},p.prototype.getGroundAnchorA=function(){return this.m_groundAnchorA},p.prototype.getGroundAnchorB=function(){return this.m_groundAnchorB},p.prototype.getLengthA=function(){return this.m_lengthA},p.prototype.getLengthB=function(){return this.m_lengthB},p.prototype.getRatio=function(){return this.m_ratio},p.prototype.getCurrentLengthA=function(){var t=this.m_bodyA.getWorldPoint(this.m_localAnchorA),e=this.m_groundAnchorA;return h.distance(t,e)},p.prototype.getCurrentLengthB=function(){var t=this.m_bodyB.getWorldPoint(this.m_localAnchorB),e=this.m_groundAnchorB;return h.distance(t,e)},p.prototype.shiftOrigin=function(t){this.m_groundAnchorA.sub(t),this.m_groundAnchorB.sub(t)},p.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},p.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},p.prototype.getReactionForce=function(t){return h.mul(this.m_impulse,this.m_uB).mul(t)},p.prototype.getReactionTorque=function(t){return 0},p.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyA.c_velocity.v,s=this.m_bodyA.c_velocity.w,r=this.m_bodyB.c_position.c,n=this.m_bodyB.c_position.a,m=this.m_bodyB.c_velocity.v,l=this.m_bodyB.c_velocity.w,u=c.neo(i),_=c.neo(n);this.m_rA=c.mulVec2(u,h.sub(this.m_localAnchorA,this.m_localCenterA)),this.m_rB=c.mulVec2(_,h.sub(this.m_localAnchorB,this.m_localCenterB)),this.m_uA=h.sub(h.add(e,this.m_rA),this.m_groundAnchorA),this.m_uB=h.sub(h.add(r,this.m_rB),this.m_groundAnchorB);var p=this.m_uA.length(),d=this.m_uB.length();p>10*a.linearSlop?this.m_uA.mul(1/p):this.m_uA.setZero(),d>10*a.linearSlop?this.m_uB.mul(1/d):this.m_uB.setZero();var y=h.cross(this.m_rA,this.m_uA),f=h.cross(this.m_rB,this.m_uB),v=this.m_invMassA+this.m_invIA*y*y,g=this.m_invMassB+this.m_invIB*f*f;if(this.m_mass=v+this.m_ratio*this.m_ratio*g,this.m_mass>0&&(this.m_mass=1/this.m_mass),t.warmStarting){this.m_impulse*=t.dtRatio;var x=h.mul(-this.m_impulse,this.m_uA),A=h.mul(-this.m_ratio*this.m_impulse,this.m_uB);o.addMul(this.m_invMassA,x),s+=this.m_invIA*h.cross(this.m_rA,x),m.addMul(this.m_invMassB,A),l+=this.m_invIB*h.cross(this.m_rB,A)}else this.m_impulse=0;this.m_bodyA.c_velocity.v=o,this.m_bodyA.c_velocity.w=s,this.m_bodyB.c_velocity.v=m,this.m_bodyB.c_velocity.w=l},p.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=h.add(e,h.cross(i,this.m_rA)),n=h.add(o,h.cross(s,this.m_rB)),a=-h.dot(this.m_uA,r)-this.m_ratio*h.dot(this.m_uB,n),m=-this.m_mass*a;this.m_impulse+=m;var c=h.mul(-m,this.m_uA),l=h.mul(-this.m_ratio*m,this.m_uB);e.addMul(this.m_invMassA,c),i+=this.m_invIA*h.cross(this.m_rA,c),o.addMul(this.m_invMassB,l),s+=this.m_invIB*h.cross(this.m_rB,l),this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},p.prototype.solvePositionConstraints=function(t){var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyB.c_position.c,s=this.m_bodyB.c_position.a,r=c.neo(i),n=c.neo(s),l=c.mulVec2(r,h.sub(this.m_localAnchorA,this.m_localCenterA)),u=c.mulVec2(n,h.sub(this.m_localAnchorB,this.m_localCenterB)),_=h.sub(h.add(e,this.m_rA),this.m_groundAnchorA),p=h.sub(h.add(o,this.m_rB),this.m_groundAnchorB),d=_.length(),y=p.length();d>10*a.linearSlop?_.mul(1/d):_.setZero(),y>10*a.linearSlop?p.mul(1/y):p.setZero();var f=h.cross(l,_),v=h.cross(u,p),g=this.m_invMassA+this.m_invIA*f*f,x=this.m_invMassB+this.m_invIB*v*v,A=g+this.m_ratio*this.m_ratio*x;A>0&&(A=1/A);var b=this.m_constant-d-this.m_ratio*y,B=m.abs(b),w=-A*b,S=h.mul(-w,_),C=h.mul(-this.m_ratio*w,p);return e.addMul(this.m_invMassA,S),i+=this.m_invIA*h.cross(l,S),o.addMul(this.m_invMassB,C),s+=this.m_invIB*h.cross(u,C),this.m_bodyA.c_position.c=e,this.m_bodyA.c_position.a=i,this.m_bodyB.c_position.c=o,this.m_bodyB.c_position.a=s,B<a.linearSlop}},8087:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=f;var s=i(2274),r=i(4896),n=i(4175),a=i(1099),m=i(5387),h=i(6306),c=i(4470),l=i(6173),u=i(7515),_=i(3766),p=(i(5385),i(8850),i(5235),i(8601),i(5878)),d=i(2129);f.TYPE="revolute-joint",p.TYPES[f.TYPE]=f,f._super=p,f.prototype=n(f._super.prototype);var y={lowerAngle:0,upperAngle:0,maxMotorTorque:0,motorSpeed:0,enableLimit:!1,enableMotor:!1};function f(t,e,i,o){if(!(this instanceof f))return new f(t,e,i,o);t=r(t,y),p.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=f.TYPE,this.m_localAnchorA=h.clone(o?e.getLocalPoint(o):t.localAnchorA||h.zero()),this.m_localAnchorB=h.clone(o?i.getLocalPoint(o):t.localAnchorB||h.zero()),this.m_referenceAngle=m.isFinite(t.referenceAngle)?t.referenceAngle:i.getAngle()-e.getAngle(),this.m_impulse=c(),this.m_motorImpulse=0,this.m_lowerAngle=t.lowerAngle,this.m_upperAngle=t.upperAngle,this.m_maxMotorTorque=t.maxMotorTorque,this.m_motorSpeed=t.motorSpeed,this.m_enableLimit=t.enableLimit,this.m_enableMotor=t.enableMotor,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_mass=new u,this.m_motorMass,this.m_limitState=0}f.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,lowerAngle:this.m_lowerAngle,upperAngle:this.m_upperAngle,maxMotorTorque:this.m_maxMotorTorque,motorSpeed:this.m_motorSpeed,enableLimit:this.m_enableLimit,enableMotor:this.m_enableMotor,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,referenceAngle:this.m_referenceAngle}},f._deserialize=function(t,e,i){return(t={...t}).bodyA=i(d,t.bodyA,e),t.bodyB=i(d,t.bodyB,e),new f(t)},f.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB)},f.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},f.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},f.prototype.getReferenceAngle=function(){return this.m_referenceAngle},f.prototype.getJointAngle=function(){var t=this.m_bodyA;return this.m_bodyB.m_sweep.a-t.m_sweep.a-this.m_referenceAngle},f.prototype.getJointSpeed=function(){var t=this.m_bodyA;return this.m_bodyB.m_angularVelocity-t.m_angularVelocity},f.prototype.isMotorEnabled=function(){return this.m_enableMotor},f.prototype.enableMotor=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_enableMotor=t},f.prototype.getMotorTorque=function(t){return t*this.m_motorImpulse},f.prototype.setMotorSpeed=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_motorSpeed=t},f.prototype.getMotorSpeed=function(){return this.m_motorSpeed},f.prototype.setMaxMotorTorque=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_maxMotorTorque=t},f.prototype.getMaxMotorTorque=function(){return this.m_maxMotorTorque},f.prototype.isLimitEnabled=function(){return this.m_enableLimit},f.prototype.enableLimit=function(t){t!=this.m_enableLimit&&(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_enableLimit=t,this.m_impulse.z=0)},f.prototype.getLowerLimit=function(){return this.m_lowerAngle},f.prototype.getUpperLimit=function(){return this.m_upperAngle},f.prototype.setLimits=function(t,e){o&&s.assert(t<=e),t==this.m_lowerAngle&&e==this.m_upperAngle||(this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_impulse.z=0,this.m_lowerAngle=t,this.m_upperAngle=e)},f.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},f.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},f.prototype.getReactionForce=function(t){return h.neo(this.m_impulse.x,this.m_impulse.y).mul(t)},f.prototype.getReactionTorque=function(t){return t*this.m_impulse.z},f.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.a,i=this.m_bodyA.c_velocity.v,o=this.m_bodyA.c_velocity.w,s=this.m_bodyB.c_position.a,r=this.m_bodyB.c_velocity.v,n=this.m_bodyB.c_velocity.w,c=_.neo(e),l=_.neo(s);this.m_rA=_.mulVec2(c,h.sub(this.m_localAnchorA,this.m_localCenterA)),this.m_rB=_.mulVec2(l,h.sub(this.m_localAnchorB,this.m_localCenterB));var u=this.m_invMassA,p=this.m_invMassB,d=this.m_invIA,y=this.m_invIB,f=d+y===0;if(this.m_mass.ex.x=u+p+this.m_rA.y*this.m_rA.y*d+this.m_rB.y*this.m_rB.y*y,this.m_mass.ey.x=-this.m_rA.y*this.m_rA.x*d-this.m_rB.y*this.m_rB.x*y,this.m_mass.ez.x=-this.m_rA.y*d-this.m_rB.y*y,this.m_mass.ex.y=this.m_mass.ey.x,this.m_mass.ey.y=u+p+this.m_rA.x*this.m_rA.x*d+this.m_rB.x*this.m_rB.x*y,this.m_mass.ez.y=this.m_rA.x*d+this.m_rB.x*y,this.m_mass.ex.z=this.m_mass.ez.x,this.m_mass.ey.z=this.m_mass.ez.y,this.m_mass.ez.z=d+y,this.m_motorMass=d+y,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass),(0==this.m_enableMotor||f)&&(this.m_motorImpulse=0),this.m_enableLimit&&0==f){var v=s-e-this.m_referenceAngle;m.abs(this.m_upperAngle-this.m_lowerAngle)<2*a.angularSlop?this.m_limitState=3:v<=this.m_lowerAngle?(1!=this.m_limitState&&(this.m_impulse.z=0),this.m_limitState=1):v>=this.m_upperAngle?(2!=this.m_limitState&&(this.m_impulse.z=0),this.m_limitState=2):(this.m_limitState=0,this.m_impulse.z=0)}else this.m_limitState=0;if(t.warmStarting){this.m_impulse.mul(t.dtRatio),this.m_motorImpulse*=t.dtRatio;var g=h.neo(this.m_impulse.x,this.m_impulse.y);i.subMul(u,g),o-=d*(h.cross(this.m_rA,g)+this.m_motorImpulse+this.m_impulse.z),r.addMul(p,g),n+=y*(h.cross(this.m_rB,g)+this.m_motorImpulse+this.m_impulse.z)}else this.m_impulse.setZero(),this.m_motorImpulse=0;this.m_bodyA.c_velocity.v=i,this.m_bodyA.c_velocity.w=o,this.m_bodyB.c_velocity.v=r,this.m_bodyB.c_velocity.w=n},f.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_invMassA,n=this.m_invMassB,a=this.m_invIA,l=this.m_invIB,u=a+l===0;if(this.m_enableMotor&&3!=this.m_limitState&&0==u){var _=s-i-this.m_motorSpeed,p=-this.m_motorMass*_,d=this.m_motorImpulse,y=t.dt*this.m_maxMotorTorque;this.m_motorImpulse=m.clamp(this.m_motorImpulse+p,-y,y),i-=a*(p=this.m_motorImpulse-d),s+=l*p}if(this.m_enableLimit&&0!=this.m_limitState&&0==u){var f=h.zero();f.addCombine(1,o,1,h.cross(s,this.m_rB)),f.subCombine(1,e,1,h.cross(i,this.m_rA));var v=s-i;if(_=c(f.x,f.y,v),p=c.neg(this.m_mass.solve33(_)),3==this.m_limitState)this.m_impulse.add(p);else if(1==this.m_limitState)if(this.m_impulse.z+p.z<0){var g=h.combine(-1,f,this.m_impulse.z,h.neo(this.m_mass.ez.x,this.m_mass.ez.y)),x=this.m_mass.solve22(g);p.x=x.x,p.y=x.y,p.z=-this.m_impulse.z,this.m_impulse.x+=x.x,this.m_impulse.y+=x.y,this.m_impulse.z=0}else this.m_impulse.add(p);else 2==this.m_limitState&&(this.m_impulse.z+p.z>0?(g=h.combine(-1,f,this.m_impulse.z,h.neo(this.m_mass.ez.x,this.m_mass.ez.y)),x=this.m_mass.solve22(g),p.x=x.x,p.y=x.y,p.z=-this.m_impulse.z,this.m_impulse.x+=x.x,this.m_impulse.y+=x.y,this.m_impulse.z=0):this.m_impulse.add(p));var A=h.neo(p.x,p.y);e.subMul(r,A),i-=a*(h.cross(this.m_rA,A)+p.z),o.addMul(n,A),s+=l*(h.cross(this.m_rB,A)+p.z)}else(_=h.zero()).addCombine(1,o,1,h.cross(s,this.m_rB)),_.subCombine(1,e,1,h.cross(i,this.m_rA)),p=this.m_mass.solve22(h.neg(_)),this.m_impulse.x+=p.x,this.m_impulse.y+=p.y,e.subMul(r,p),i-=a*h.cross(this.m_rA,p),o.addMul(n,p),s+=l*h.cross(this.m_rB,p);this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},f.prototype.solvePositionConstraints=function(t){var e,i=this.m_bodyA.c_position.c,o=this.m_bodyA.c_position.a,s=this.m_bodyB.c_position.c,r=this.m_bodyB.c_position.a,n=_.neo(o),c=_.neo(r),u=0,p=this.m_invIA+this.m_invIB==0;if(this.m_enableLimit&&0!=this.m_limitState&&0==p){var d=r-o-this.m_referenceAngle,y=0;if(3==this.m_limitState){var f=m.clamp(d-this.m_lowerAngle,-a.maxAngularCorrection,a.maxAngularCorrection);y=-this.m_motorMass*f,u=m.abs(f)}else 1==this.m_limitState?(u=-(f=d-this.m_lowerAngle),f=m.clamp(f+a.angularSlop,-a.maxAngularCorrection,0),y=-this.m_motorMass*f):2==this.m_limitState&&(u=f=d-this.m_upperAngle,f=m.clamp(f-a.angularSlop,0,a.maxAngularCorrection),y=-this.m_motorMass*f);o-=this.m_invIA*y,r+=this.m_invIB*y}n.set(o),c.set(r);var v=_.mulVec2(n,h.sub(this.m_localAnchorA,this.m_localCenterA)),g=_.mulVec2(c,h.sub(this.m_localAnchorB,this.m_localCenterB));(f=h.zero()).addCombine(1,s,1,g),f.subCombine(1,i,1,v),e=f.length();var x=this.m_invMassA,A=this.m_invMassB,b=this.m_invIA,B=this.m_invIB,w=new l;w.ex.x=x+A+b*v.y*v.y+B*g.y*g.y,w.ex.y=-b*v.x*v.y-B*g.x*g.y,w.ey.x=w.ex.y,w.ey.y=x+A+b*v.x*v.x+B*g.x*g.x;var S=h.neg(w.solve(f));return i.subMul(x,S),o-=b*h.cross(v,S),s.addMul(A,S),r+=B*h.cross(g,S),this.m_bodyA.c_position.c.set(i),this.m_bodyA.c_position.a=o,this.m_bodyB.c_position.c.set(s),this.m_bodyB.c_position.a=r,e<=a.linearSlop&&u<=a.angularSlop}},1347:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=u;var o=i(4896),s=i(4175),r=i(1099),n=i(5387),a=i(6306),m=(i(4470),i(6173),i(7515),i(3766)),h=(i(5385),i(8850),i(5235),i(8601),i(5878)),c=i(2129);u.TYPE="rope-joint",h.TYPES[u.TYPE]=u,u._super=h,u.prototype=s(u._super.prototype);var l={maxLength:0};function u(t,e,i,s){if(!(this instanceof u))return new u(t,e,i,s);t=o(t,l),h.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=u.TYPE,this.m_localAnchorA=s?e.getLocalPoint(s):t.localAnchorA||a.neo(-1,0),this.m_localAnchorB=s?i.getLocalPoint(s):t.localAnchorB||a.neo(1,0),this.m_maxLength=t.maxLength,this.m_mass=0,this.m_impulse=0,this.m_length=0,this.m_state=0,this.m_u,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_mass}u.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,maxLength:this.m_maxLength}},u._deserialize=function(t,e,i){return(t={...t}).bodyA=i(c,t.bodyA,e),t.bodyB=i(c,t.bodyB,e),new u(t)},u.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},u.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},u.prototype.setMaxLength=function(t){this.m_maxLength=t},u.prototype.getMaxLength=function(){return this.m_maxLength},u.prototype.getLimitState=function(){return this.m_state},u.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},u.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},u.prototype.getReactionForce=function(t){return a.mul(this.m_impulse,this.m_u).mul(t)},u.prototype.getReactionTorque=function(t){return 0},u.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyA.c_velocity.v,s=this.m_bodyA.c_velocity.w,n=this.m_bodyB.c_position.c,h=this.m_bodyB.c_position.a,c=this.m_bodyB.c_velocity.v,l=this.m_bodyB.c_velocity.w,u=m.neo(i),_=m.neo(h);this.m_rA=m.mulSub(u,this.m_localAnchorA,this.m_localCenterA),this.m_rB=m.mulSub(_,this.m_localAnchorB,this.m_localCenterB),this.m_u=a.zero(),this.m_u.addCombine(1,n,1,this.m_rB),this.m_u.subCombine(1,e,1,this.m_rA),this.m_length=this.m_u.length();var p=this.m_length-this.m_maxLength;if(this.m_state=p>0?2:0,!(this.m_length>r.linearSlop))return this.m_u.setZero(),this.m_mass=0,void(this.m_impulse=0);this.m_u.mul(1/this.m_length);var d=a.cross(this.m_rA,this.m_u),y=a.cross(this.m_rB,this.m_u),f=this.m_invMassA+this.m_invIA*d*d+this.m_invMassB+this.m_invIB*y*y;if(this.m_mass=0!=f?1/f:0,t.warmStarting){this.m_impulse*=t.dtRatio;var v=a.mul(this.m_impulse,this.m_u);o.subMul(this.m_invMassA,v),s-=this.m_invIA*a.cross(this.m_rA,v),c.addMul(this.m_invMassB,v),l+=this.m_invIB*a.cross(this.m_rB,v)}else this.m_impulse=0;this.m_bodyA.c_velocity.v.set(o),this.m_bodyA.c_velocity.w=s,this.m_bodyB.c_velocity.v.set(c),this.m_bodyB.c_velocity.w=l},u.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=a.addCross(e,i,this.m_rA),m=a.addCross(o,s,this.m_rB),h=this.m_length-this.m_maxLength,c=a.dot(this.m_u,a.sub(m,r));h<0&&(c+=t.inv_dt*h);var l=-this.m_mass*c,u=this.m_impulse;this.m_impulse=n.min(0,this.m_impulse+l),l=this.m_impulse-u;var _=a.mul(l,this.m_u);e.subMul(this.m_invMassA,_),i-=this.m_invIA*a.cross(this.m_rA,_),o.addMul(this.m_invMassB,_),s+=this.m_invIB*a.cross(this.m_rB,_),this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},u.prototype.solvePositionConstraints=function(t){var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyB.c_position.c,s=this.m_bodyB.c_position.a,h=m.neo(i),c=m.neo(s),l=m.mulSub(h,this.m_localAnchorA,this.m_localCenterA),u=m.mulSub(c,this.m_localAnchorB,this.m_localCenterB),_=a.zero();_.addCombine(1,o,1,u),_.subCombine(1,e,1,l);var p=_.normalize(),d=p-this.m_maxLength;d=n.clamp(d,0,r.maxLinearCorrection);var y=-this.m_mass*d,f=a.mul(y,_);return e.subMul(this.m_invMassA,f),i-=this.m_invIA*a.cross(l,f),o.addMul(this.m_invMassB,f),s+=this.m_invIB*a.cross(u,f),this.m_bodyA.c_position.c.set(e),this.m_bodyA.c_position.a=i,this.m_bodyB.c_position.c.set(o),this.m_bodyB.c_position.a=s,p-this.m_maxLength<r.linearSlop}},1415:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=p;var o=i(4896),s=i(4175),r=i(1099),n=i(5387),a=i(6306),m=i(4470),h=(i(6173),i(7515)),c=i(3766),l=(i(5385),i(8850),i(5235),i(8601),i(5878)),u=i(2129);p.TYPE="weld-joint",l.TYPES[p.TYPE]=p,p._super=l,p.prototype=s(p._super.prototype);var _={frequencyHz:0,dampingRatio:0};function p(t,e,i,s){if(!(this instanceof p))return new p(t,e,i,s);t=o(t,_),l.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=p.TYPE,this.m_localAnchorA=a.clone(s?e.getLocalPoint(s):t.localAnchorA||a.zero()),this.m_localAnchorB=a.clone(s?i.getLocalPoint(s):t.localAnchorB||a.zero()),this.m_referenceAngle=n.isFinite(t.referenceAngle)?t.referenceAngle:i.getAngle()-e.getAngle(),this.m_frequencyHz=t.frequencyHz,this.m_dampingRatio=t.dampingRatio,this.m_impulse=m(),this.m_bias=0,this.m_gamma=0,this.m_rA,this.m_rB,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_mass=new h}p.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,frequencyHz:this.m_frequencyHz,dampingRatio:this.m_dampingRatio,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,referenceAngle:this.m_referenceAngle}},p._deserialize=function(t,e,i){return(t={...t}).bodyA=i(u,t.bodyA,e),t.bodyB=i(u,t.bodyB,e),new p(t)},p.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB)},p.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},p.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},p.prototype.getReferenceAngle=function(){return this.m_referenceAngle},p.prototype.setFrequency=function(t){this.m_frequencyHz=t},p.prototype.getFrequency=function(){return this.m_frequencyHz},p.prototype.setDampingRatio=function(t){this.m_dampingRatio=t},p.prototype.getDampingRatio=function(){return this.m_dampingRatio},p.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},p.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},p.prototype.getReactionForce=function(t){return a.neo(this.m_impulse.x,this.m_impulse.y).mul(t)},p.prototype.getReactionTorque=function(t){return t*this.m_impulse.z},p.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_bodyA.c_position.a,i=this.m_bodyA.c_velocity.v,o=this.m_bodyA.c_velocity.w,s=this.m_bodyB.c_position.a,r=this.m_bodyB.c_velocity.v,m=this.m_bodyB.c_velocity.w,l=c.neo(e),u=c.neo(s);this.m_rA=c.mulVec2(l,a.sub(this.m_localAnchorA,this.m_localCenterA)),this.m_rB=c.mulVec2(u,a.sub(this.m_localAnchorB,this.m_localCenterB));var _=this.m_invMassA,p=this.m_invMassB,d=this.m_invIA,y=this.m_invIB,f=new h;if(f.ex.x=_+p+this.m_rA.y*this.m_rA.y*d+this.m_rB.y*this.m_rB.y*y,f.ey.x=-this.m_rA.y*this.m_rA.x*d-this.m_rB.y*this.m_rB.x*y,f.ez.x=-this.m_rA.y*d-this.m_rB.y*y,f.ex.y=f.ey.x,f.ey.y=_+p+this.m_rA.x*this.m_rA.x*d+this.m_rB.x*this.m_rB.x*y,f.ez.y=this.m_rA.x*d+this.m_rB.x*y,f.ex.z=f.ez.x,f.ey.z=f.ez.y,f.ez.z=d+y,this.m_frequencyHz>0){f.getInverse22(this.m_mass);var v=d+y,g=v>0?1/v:0,x=s-e-this.m_referenceAngle,A=2*n.PI*this.m_frequencyHz,b=2*g*this.m_dampingRatio*A,B=g*A*A,w=t.dt;this.m_gamma=w*(b+w*B),this.m_gamma=0!=this.m_gamma?1/this.m_gamma:0,this.m_bias=x*w*B*this.m_gamma,v+=this.m_gamma,this.m_mass.ez.z=0!=v?1/v:0}else 0==f.ez.z?(f.getInverse22(this.m_mass),this.m_gamma=0,this.m_bias=0):(f.getSymInverse33(this.m_mass),this.m_gamma=0,this.m_bias=0);if(t.warmStarting){this.m_impulse.mul(t.dtRatio);var S=a.neo(this.m_impulse.x,this.m_impulse.y);i.subMul(_,S),o-=d*(a.cross(this.m_rA,S)+this.m_impulse.z),r.addMul(p,S),m+=y*(a.cross(this.m_rB,S)+this.m_impulse.z)}else this.m_impulse.setZero();this.m_bodyA.c_velocity.v=i,this.m_bodyA.c_velocity.w=o,this.m_bodyB.c_velocity.v=r,this.m_bodyB.c_velocity.w=m},p.prototype.solveVelocityConstraints=function(t){var e=this.m_bodyA.c_velocity.v,i=this.m_bodyA.c_velocity.w,o=this.m_bodyB.c_velocity.v,s=this.m_bodyB.c_velocity.w,r=this.m_invMassA,n=this.m_invMassB,c=this.m_invIA,l=this.m_invIB;if(this.m_frequencyHz>0){var u=s-i,_=-this.m_mass.ez.z*(u+this.m_bias+this.m_gamma*this.m_impulse.z);this.m_impulse.z+=_,i-=c*_,s+=l*_,(y=a.zero()).addCombine(1,o,1,a.cross(s,this.m_rB)),y.subCombine(1,e,1,a.cross(i,this.m_rA));var p=a.neg(h.mulVec2(this.m_mass,y));this.m_impulse.x+=p.x,this.m_impulse.y+=p.y;var d=a.clone(p);e.subMul(r,d),i-=c*a.cross(this.m_rA,d),o.addMul(n,d),s+=l*a.cross(this.m_rB,d)}else{var y;(y=a.zero()).addCombine(1,o,1,a.cross(s,this.m_rB)),y.subCombine(1,e,1,a.cross(i,this.m_rA)),u=s-i;var f=m(y.x,y.y,u),v=m.neg(h.mulVec3(this.m_mass,f));this.m_impulse.add(v),d=a.neo(v.x,v.y),e.subMul(r,d),i-=c*(a.cross(this.m_rA,d)+v.z),o.addMul(n,d),s+=l*(a.cross(this.m_rB,d)+v.z)}this.m_bodyA.c_velocity.v=e,this.m_bodyA.c_velocity.w=i,this.m_bodyB.c_velocity.v=o,this.m_bodyB.c_velocity.w=s},p.prototype.solvePositionConstraints=function(t){var e,i,o=this.m_bodyA.c_position.c,s=this.m_bodyA.c_position.a,l=this.m_bodyB.c_position.c,u=this.m_bodyB.c_position.a,_=c.neo(s),p=c.neo(u),d=this.m_invMassA,y=this.m_invMassB,f=this.m_invIA,v=this.m_invIB,g=c.mulVec2(_,a.sub(this.m_localAnchorA,this.m_localCenterA)),x=c.mulVec2(p,a.sub(this.m_localAnchorB,this.m_localCenterB)),A=new h;if(A.ex.x=d+y+g.y*g.y*f+x.y*x.y*v,A.ey.x=-g.y*g.x*f-x.y*x.x*v,A.ez.x=-g.y*f-x.y*v,A.ex.y=A.ey.x,A.ey.y=d+y+g.x*g.x*f+x.x*x.x*v,A.ez.y=g.x*f+x.x*v,A.ex.z=A.ez.x,A.ey.z=A.ez.y,A.ez.z=f+v,this.m_frequencyHz>0){(B=a.zero()).addCombine(1,l,1,x),B.subCombine(1,o,1,g),e=B.length(),i=0;var b=a.neg(A.solve22(B));o.subMul(d,b),s-=f*a.cross(g,b),l.addMul(y,b),u+=v*a.cross(x,b)}else{var B;(B=a.zero()).addCombine(1,l,1,x),B.subCombine(1,o,1,g);var w=u-s-this.m_referenceAngle;e=B.length(),i=n.abs(w);var S=m(B.x,B.y,w),C=m();if(A.ez.z>0)C=m.neg(A.solve33(S));else{var T=a.neg(A.solve22(B));C.set(T.x,T.y,0)}b=a.neo(C.x,C.y),o.subMul(d,b),s-=f*(a.cross(g,b)+C.z),l.addMul(y,b),u+=v*(a.cross(x,b)+C.z)}return this.m_bodyA.c_position.c=o,this.m_bodyA.c_position.a=s,this.m_bodyB.c_position.c=l,this.m_bodyB.c_position.a=u,e<=r.linearSlop&&i<=r.angularSlop}},2707:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=u;var o=i(4896),s=i(4175),r=i(1099),n=i(5387),a=i(6306),m=(i(4470),i(6173),i(7515),i(3766)),h=(i(5385),i(8850),i(5235),i(8601),i(5878)),c=i(2129);u.TYPE="wheel-joint",h.TYPES[u.TYPE]=u,u._super=h,u.prototype=s(u._super.prototype);var l={enableMotor:!1,maxMotorTorque:0,motorSpeed:0,frequencyHz:2,dampingRatio:.7};function u(t,e,i,s,r){if(!(this instanceof u))return new u(t,e,i,s,r);t=o(t,l),h.call(this,t,e,i),e=this.m_bodyA,i=this.m_bodyB,this.m_type=u.TYPE,this.m_localAnchorA=a.clone(s?e.getLocalPoint(s):t.localAnchorA||a.zero()),this.m_localAnchorB=a.clone(s?i.getLocalPoint(s):t.localAnchorB||a.zero()),this.m_localXAxisA=a.clone(r?e.getLocalVector(r):t.localAxisA||t.localAxis||a.neo(1,0)),this.m_localYAxisA=a.cross(1,this.m_localXAxisA),this.m_mass=0,this.m_impulse=0,this.m_motorMass=0,this.m_motorImpulse=0,this.m_springMass=0,this.m_springImpulse=0,this.m_maxMotorTorque=t.maxMotorTorque,this.m_motorSpeed=t.motorSpeed,this.m_enableMotor=t.enableMotor,this.m_frequencyHz=t.frequencyHz,this.m_dampingRatio=t.dampingRatio,this.m_bias=0,this.m_gamma=0,this.m_localCenterA,this.m_localCenterB,this.m_invMassA,this.m_invMassB,this.m_invIA,this.m_invIB,this.m_ax=a.zero(),this.m_ay=a.zero(),this.m_sAx,this.m_sBx,this.m_sAy,this.m_sBy}u.prototype._serialize=function(){return{type:this.m_type,bodyA:this.m_bodyA,bodyB:this.m_bodyB,collideConnected:this.m_collideConnected,enableMotor:this.m_enableMotor,maxMotorTorque:this.m_maxMotorTorque,motorSpeed:this.m_motorSpeed,frequencyHz:this.m_frequencyHz,dampingRatio:this.m_dampingRatio,localAnchorA:this.m_localAnchorA,localAnchorB:this.m_localAnchorB,localAxisA:this.m_localXAxisA}},u._deserialize=function(t,e,i){return(t={...t}).bodyA=i(c,t.bodyA,e),t.bodyB=i(c,t.bodyB,e),new u(t)},u.prototype._setAnchors=function(t){t.anchorA?this.m_localAnchorA.set(this.m_bodyA.getLocalPoint(t.anchorA)):t.localAnchorA&&this.m_localAnchorA.set(t.localAnchorA),t.anchorB?this.m_localAnchorB.set(this.m_bodyB.getLocalPoint(t.anchorB)):t.localAnchorB&&this.m_localAnchorB.set(t.localAnchorB),t.localAxisA&&(this.m_localXAxisA.set(t.localAxisA),this.m_localYAxisA.set(a.cross(1,t.localAxisA)))},u.prototype.getLocalAnchorA=function(){return this.m_localAnchorA},u.prototype.getLocalAnchorB=function(){return this.m_localAnchorB},u.prototype.getLocalAxisA=function(){return this.m_localXAxisA},u.prototype.getJointTranslation=function(){var t=this.m_bodyA,e=this.m_bodyB,i=t.getWorldPoint(this.m_localAnchorA),o=e.getWorldPoint(this.m_localAnchorB),s=a.sub(o,i),r=t.getWorldVector(this.m_localXAxisA);return a.dot(s,r)},u.prototype.getJointSpeed=function(){var t=this.m_bodyA.m_angularVelocity;return this.m_bodyB.m_angularVelocity-t},u.prototype.isMotorEnabled=function(){return this.m_enableMotor},u.prototype.enableMotor=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_enableMotor=t},u.prototype.setMotorSpeed=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_motorSpeed=t},u.prototype.getMotorSpeed=function(){return this.m_motorSpeed},u.prototype.setMaxMotorTorque=function(t){this.m_bodyA.setAwake(!0),this.m_bodyB.setAwake(!0),this.m_maxMotorTorque=t},u.prototype.getMaxMotorTorque=function(){return this.m_maxMotorTorque},u.prototype.getMotorTorque=function(t){return t*this.m_motorImpulse},u.prototype.setSpringFrequencyHz=function(t){this.m_frequencyHz=t},u.prototype.getSpringFrequencyHz=function(){return this.m_frequencyHz},u.prototype.setSpringDampingRatio=function(t){this.m_dampingRatio=t},u.prototype.getSpringDampingRatio=function(){return this.m_dampingRatio},u.prototype.getAnchorA=function(){return this.m_bodyA.getWorldPoint(this.m_localAnchorA)},u.prototype.getAnchorB=function(){return this.m_bodyB.getWorldPoint(this.m_localAnchorB)},u.prototype.getReactionForce=function(t){return a.combine(this.m_impulse,this.m_ay,this.m_springImpulse,this.m_ax).mul(t)},u.prototype.getReactionTorque=function(t){return t*this.m_motorImpulse},u.prototype.initVelocityConstraints=function(t){this.m_localCenterA=this.m_bodyA.m_sweep.localCenter,this.m_localCenterB=this.m_bodyB.m_sweep.localCenter,this.m_invMassA=this.m_bodyA.m_invMass,this.m_invMassB=this.m_bodyB.m_invMass,this.m_invIA=this.m_bodyA.m_invI,this.m_invIB=this.m_bodyB.m_invI;var e=this.m_invMassA,i=this.m_invMassB,o=this.m_invIA,s=this.m_invIB,r=this.m_bodyA.c_position.c,h=this.m_bodyA.c_position.a,c=this.m_bodyA.c_velocity.v,l=this.m_bodyA.c_velocity.w,u=this.m_bodyB.c_position.c,_=this.m_bodyB.c_position.a,p=this.m_bodyB.c_velocity.v,d=this.m_bodyB.c_velocity.w,y=m.neo(h),f=m.neo(_),v=m.mulVec2(y,a.sub(this.m_localAnchorA,this.m_localCenterA)),g=m.mulVec2(f,a.sub(this.m_localAnchorB,this.m_localCenterB));if((B=a.zero()).addCombine(1,u,1,g),B.subCombine(1,r,1,v),this.m_ay=m.mulVec2(y,this.m_localYAxisA),this.m_sAy=a.cross(a.add(B,v),this.m_ay),this.m_sBy=a.cross(g,this.m_ay),this.m_mass=e+i+o*this.m_sAy*this.m_sAy+s*this.m_sBy*this.m_sBy,this.m_mass>0&&(this.m_mass=1/this.m_mass),this.m_springMass=0,this.m_bias=0,this.m_gamma=0,this.m_frequencyHz>0){this.m_ax=m.mulVec2(y,this.m_localXAxisA),this.m_sAx=a.cross(a.add(B,v),this.m_ax),this.m_sBx=a.cross(g,this.m_ax);var x=e+i+o*this.m_sAx*this.m_sAx+s*this.m_sBx*this.m_sBx;if(x>0){this.m_springMass=1/x;var A=a.dot(B,this.m_ax),b=2*n.PI*this.m_frequencyHz,B=2*this.m_springMass*this.m_dampingRatio*b,w=this.m_springMass*b*b,S=t.dt;this.m_gamma=S*(B+S*w),this.m_gamma>0&&(this.m_gamma=1/this.m_gamma),this.m_bias=A*S*w*this.m_gamma,this.m_springMass=x+this.m_gamma,this.m_springMass>0&&(this.m_springMass=1/this.m_springMass)}}else this.m_springImpulse=0;if(this.m_enableMotor?(this.m_motorMass=o+s,this.m_motorMass>0&&(this.m_motorMass=1/this.m_motorMass)):(this.m_motorMass=0,this.m_motorImpulse=0),t.warmStarting){this.m_impulse*=t.dtRatio,this.m_springImpulse*=t.dtRatio,this.m_motorImpulse*=t.dtRatio;var C=a.combine(this.m_impulse,this.m_ay,this.m_springImpulse,this.m_ax),T=this.m_impulse*this.m_sAy+this.m_springImpulse*this.m_sAx+this.m_motorImpulse,M=this.m_impulse*this.m_sBy+this.m_springImpulse*this.m_sBx+this.m_motorImpulse;c.subMul(this.m_invMassA,C),l-=this.m_invIA*T,p.addMul(this.m_invMassB,C),d+=this.m_invIB*M}else this.m_impulse=0,this.m_springImpulse=0,this.m_motorImpulse=0;this.m_bodyA.c_velocity.v.set(c),this.m_bodyA.c_velocity.w=l,this.m_bodyB.c_velocity.v.set(p),this.m_bodyB.c_velocity.w=d},u.prototype.solveVelocityConstraints=function(t){var e=this.m_invMassA,i=this.m_invMassB,o=this.m_invIA,s=this.m_invIB,r=this.m_bodyA.c_velocity.v,m=this.m_bodyA.c_velocity.w,h=this.m_bodyB.c_velocity.v,c=this.m_bodyB.c_velocity.w,l=a.dot(this.m_ax,h)-a.dot(this.m_ax,r)+this.m_sBx*c-this.m_sAx*m,u=-this.m_springMass*(l+this.m_bias+this.m_gamma*this.m_springImpulse);this.m_springImpulse+=u;var _=a.mul(u,this.m_ax),p=u*this.m_sAx,d=u*this.m_sBx;r.subMul(e,_),m-=o*p,h.addMul(i,_),l=(c+=s*d)-m-this.m_motorSpeed,u=-this.m_motorMass*l;var y=this.m_motorImpulse,f=t.dt*this.m_maxMotorTorque;this.m_motorImpulse=n.clamp(this.m_motorImpulse+u,-f,f),m-=o*(u=this.m_motorImpulse-y),c+=s*u,l=a.dot(this.m_ay,h)-a.dot(this.m_ay,r)+this.m_sBy*c-this.m_sAy*m,u=-this.m_mass*l,this.m_impulse+=u,_=a.mul(u,this.m_ay),p=u*this.m_sAy,d=u*this.m_sBy,r.subMul(e,_),m-=o*p,h.addMul(i,_),c+=s*d,this.m_bodyA.c_velocity.v.set(r),this.m_bodyA.c_velocity.w=m,this.m_bodyB.c_velocity.v.set(h),this.m_bodyB.c_velocity.w=c},u.prototype.solvePositionConstraints=function(t){var e=this.m_bodyA.c_position.c,i=this.m_bodyA.c_position.a,o=this.m_bodyB.c_position.c,s=this.m_bodyB.c_position.a,h=m.neo(i),c=m.neo(s),l=m.mulVec2(h,a.sub(this.m_localAnchorA,this.m_localCenterA)),u=m.mulVec2(c,a.sub(this.m_localAnchorB,this.m_localCenterB)),_=a.zero();_.addCombine(1,o,1,u),_.subCombine(1,e,1,l);var p,d=m.mulVec2(h,this.m_localYAxisA),y=a.cross(a.add(_,l),d),f=a.cross(u,d),v=a.dot(_,d),g=this.m_invMassA+this.m_invMassB+this.m_invIA*this.m_sAy*this.m_sAy+this.m_invIB*this.m_sBy*this.m_sBy;p=0!=g?-v/g:0;var x=a.mul(p,d),A=p*y,b=p*f;return e.subMul(this.m_invMassA,x),i-=this.m_invIA*A,o.addMul(this.m_invMassB,x),s+=this.m_invIB*b,this.m_bodyA.c_position.c.set(e),this.m_bodyA.c_position.a=i,this.m_bodyB.c_position.c.set(o),this.m_bodyB.c_position.a=s,n.abs(v)<=r.linearSlop}},2134:(t,e,i)=>{var o=i(6972),s=i(2129),r=i(5878),n=i(2322),a=0;function m(t){var e=(t=t||{}).rootClass||o,i=t.preSerialize||function(t){return t},m=t.postSerialize||function(t,e){return t},h=t.preDeserialize||function(t){return t},c=t.postDeserialize||function(t,e){return t},l={World:o,Body:s,Joint:r,Shape:n};this.toJson=function(t){var e=[],o=[t],s={};function r(t,i){if(t.__sid=t.__sid||++a,!s[t.__sid]){o.push(t);var r={refIndex:e.length+o.length,refType:i};s[t.__sid]=r}return s[t.__sid]}function n(t,e){if("object"!=typeof t||null===t)return t;if("function"==typeof t._serialize){if(t!==e)for(var o in l)if(t instanceof l[o])return r(t,o);t=function(t){var e=(t=i(t))._serialize();return m(e,t)}(t)}if(Array.isArray(t)){for(var s=[],a=0;a<t.length;a++)s[a]=n(t[a]);t=s}else{for(var a in s={},t)t.hasOwnProperty(a)&&(s[a]=n(t[a]));t=s}return t}for(;o.length;){var h=o.shift(),c=n(h,h);e.push(c)}return e},this.fromJson=function(t){var i={};function o(t,e,i){e=h(e);var o=t._deserialize(e,i,s);return c(o,e)}function s(e,s,r){if(!s.refIndex)return e&&e._deserialize&&o(e,s,r);e=l[s.refType]||e;var n=s.refIndex;if(!i[n]){var a=o(e,t[n],r);i[n]=a}return i[n]}return e._deserialize(t[0],null,s)}}t.exports=m;var h=new m;t.exports.toJson=h.toJson,t.exports.fromJson=h.fromJson},7639:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=r,i(2274);var o=i(4175),s=i(8901);function r(t,e,i,o){if(!(this instanceof r))return new r(t,e,i,o);r._super.call(this),this._setAsBox(t,e,i,o)}r._super=s,r.prototype=o(r._super.prototype),r.TYPE="polygon"},2642:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=l;var s=i(2274),r=i(4175),n=(i(4896),i(5387),i(8850)),a=(i(3766),i(6306)),m=(i(3406),i(1099)),h=i(2322),c=i(3581);function l(t,e){if(!(this instanceof l))return new l(t,e);l._super.call(this),this.m_type=l.TYPE,this.m_radius=m.polygonRadius,this.m_vertices=[],this.m_count=0,this.m_prevVertex=null,this.m_nextVertex=null,this.m_hasPrevVertex=!1,this.m_hasNextVertex=!1,this.m_isLoop=e,t&&t.length&&(e?this._createLoop(t):this._createChain(t))}l._super=h,l.prototype=r(l._super.prototype),l.TYPE="chain",h.TYPES[l.TYPE]=l,l.prototype._serialize=function(){const t={type:this.m_type,vertices:this.m_vertices,isLoop:this.m_isLoop,hasPrevVertex:this.m_hasPrevVertex,hasNextVertex:this.m_hasNextVertex};return this.m_prevVertex&&(t.prevVertex=this.m_prevVertex),this.m_nextVertex&&(t.nextVertex=this.m_nextVertex),t},l._deserialize=function(t){var e=new l(t.vertices.map(a._deserialize),t.isLoop);return t.prevVertex&&e._setPrevVertex(t.prevVertex),t.nextVertex&&e._setNextVertex(t.nextVertex),e},l.prototype._createLoop=function(t){o&&s.assert(0==this.m_vertices.length&&0==this.m_count),o&&s.assert(t.length>=3);for(var e=1;e<t.length;++e){var i=t[e-1],r=t[e];o&&s.assert(a.distanceSquared(i,r)>m.linearSlopSquared)}for(this.m_vertices=[],this.m_count=t.length+1,e=0;e<t.length;++e)this.m_vertices[e]=a.clone(t[e]);return this.m_vertices[t.length]=a.clone(t[0]),this.m_prevVertex=this.m_vertices[this.m_count-2],this.m_nextVertex=this.m_vertices[1],this.m_hasPrevVertex=!0,this.m_hasNextVertex=!0,this},l.prototype._createChain=function(t){o&&s.assert(0==this.m_vertices.length&&0==this.m_count),o&&s.assert(t.length>=2);for(var e=1;e<t.length;++e){var i=t[e-1],r=t[e];o&&s.assert(a.distanceSquared(i,r)>m.linearSlopSquared)}for(this.m_count=t.length,e=0;e<t.length;++e)this.m_vertices[e]=a.clone(t[e]);return this.m_hasPrevVertex=!1,this.m_hasNextVertex=!1,this.m_prevVertex=null,this.m_nextVertex=null,this},l.prototype._reset=function(){this.m_isLoop?this._createLoop(this.m_vertices):this._createChain(this.m_vertices)},l.prototype._setPrevVertex=function(t){this.m_prevVertex=t,this.m_hasPrevVertex=!0},l.prototype._setNextVertex=function(t){this.m_nextVertex=t,this.m_hasNextVertex=!0},l.prototype._clone=function(){var t=new l;return t.createChain(this.m_vertices),t.m_type=this.m_type,t.m_radius=this.m_radius,t.m_prevVertex=this.m_prevVertex,t.m_nextVertex=this.m_nextVertex,t.m_hasPrevVertex=this.m_hasPrevVertex,t.m_hasNextVertex=this.m_hasNextVertex,t},l.prototype.getChildCount=function(){return this.m_count-1},l.prototype.getChildEdge=function(t,e){o&&s.assert(0<=e&&e<this.m_count-1),t.m_type=c.TYPE,t.m_radius=this.m_radius,t.m_vertex1=this.m_vertices[e],t.m_vertex2=this.m_vertices[e+1],e>0?(t.m_vertex0=this.m_vertices[e-1],t.m_hasVertex0=!0):(t.m_vertex0=this.m_prevVertex,t.m_hasVertex0=this.m_hasPrevVertex),e<this.m_count-2?(t.m_vertex3=this.m_vertices[e+2],t.m_hasVertex3=!0):(t.m_vertex3=this.m_nextVertex,t.m_hasVertex3=this.m_hasNextVertex)},l.prototype.getVertex=function(t){return o&&s.assert(0<=t&&t<=this.m_count),t<this.m_count?this.m_vertices[t]:this.m_vertices[0]},l.prototype.testPoint=function(t,e){return!1},l.prototype.rayCast=function(t,e,i,r){return o&&s.assert(0<=r&&r<this.m_count),new c(this.getVertex(r),this.getVertex(r+1)).rayCast(t,e,i,0)},l.prototype.computeAABB=function(t,e,i){o&&s.assert(0<=i&&i<this.m_count);var r=n.mulVec2(e,this.getVertex(i)),a=n.mulVec2(e,this.getVertex(i+1));t.combinePoints(r,a)},l.prototype.computeMass=function(t,e){t.mass=0,t.center=a.neo(),t.I=0},l.prototype.computeDistanceProxy=function(t,e){o&&s.assert(0<=e&&e<this.m_count),t.m_buffer[0]=this.getVertex(e),t.m_buffer[1]=this.getVertex(e+1),t.m_vertices=t.m_buffer,t.m_count=2,t.m_radius=this.m_radius}},3335:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=c;var s=i(2274),r=i(4175),n=(i(4896),i(5387)),a=(i(8850),i(3766)),m=i(6306),h=(i(3406),i(1099),i(2322));function c(t,e){if(!(this instanceof c))return new c(t,e);c._super.call(this),this.m_type=c.TYPE,this.m_p=m.zero(),this.m_radius=1,"object"==typeof t&&m.isValid(t)?(this.m_p.set(t),"number"==typeof e&&(this.m_radius=e)):"number"==typeof t&&(this.m_radius=t)}c._super=h,c.prototype=r(c._super.prototype),c.TYPE="circle",h.TYPES[c.TYPE]=c,c.prototype._serialize=function(){return{type:this.m_type,p:this.m_p,radius:this.m_radius}},c._deserialize=function(t){return new c(t.p,t.radius)},c.prototype.getRadius=function(){return this.m_radius},c.prototype.getCenter=function(){return this.m_p},c.prototype.getVertex=function(t){return o&&s.assert(0==t),this.m_p},c.prototype.getVertexCount=function(t){return 1},c.prototype._clone=function(){var t=new c;return t.m_type=this.m_type,t.m_radius=this.m_radius,t.m_p=this.m_p.clone(),t},c.prototype.getChildCount=function(){return 1},c.prototype.testPoint=function(t,e){var i=m.add(t.p,a.mulVec2(t.q,this.m_p)),o=m.sub(e,i);return m.dot(o,o)<=this.m_radius*this.m_radius},c.prototype.rayCast=function(t,e,i,o){var s=m.add(i.p,a.mulVec2(i.q,this.m_p)),r=m.sub(e.p1,s),h=m.dot(r,r)-this.m_radius*this.m_radius,c=m.sub(e.p2,e.p1),l=m.dot(r,c),u=m.dot(c,c),_=l*l-u*h;if(_<0||u<n.EPSILON)return!1;var p=-(l+n.sqrt(_));return 0<=p&&p<=e.maxFraction*u&&(p/=u,t.fraction=p,t.normal=m.add(r,m.mul(p,c)),t.normal.normalize(),!0)},c.prototype.computeAABB=function(t,e,i){var o=m.add(e.p,a.mulVec2(e.q,this.m_p));t.lowerBound.set(o.x-this.m_radius,o.y-this.m_radius),t.upperBound.set(o.x+this.m_radius,o.y+this.m_radius)},c.prototype.computeMass=function(t,e){t.mass=e*n.PI*this.m_radius*this.m_radius,t.center=this.m_p,t.I=t.mass*(.5*this.m_radius*this.m_radius+m.dot(this.m_p,this.m_p))},c.prototype.computeDistanceProxy=function(t){t.m_vertices.push(this.m_p),t.m_count=1,t.m_radius=this.m_radius}},8871:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=(i(4175),i(5387),i(8850)),n=i(6306),a=(i(1099),i(2322),i(8730)),m=i(226),h=i(3335);function c(t,e,i,o,s){t.pointCount=0;var a=r.mulVec2(i,e.m_p),h=r.mulVec2(s,o.m_p),c=n.distanceSquared(h,a),l=e.m_radius+o.m_radius;c>l*l||(t.type=m.e_circles,t.localPoint.set(e.m_p),t.localNormal.setZero(),t.pointCount=1,t.points[0].localPoint.set(o.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,t.points[0].id.cf.typeB=m.e_vertex)}a.addType(h.TYPE,h.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==h.TYPE),o&&s.assert(a.getType()==h.TYPE),c(t,i.getShape(),e,a.getShape(),n)})),e.CollideCircles=c},9415:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=i(5387),n=i(8850),a=(i(3766),i(6306)),m=(i(3406),i(1099),i(226)),h=i(8730),c=(i(2322),i(3335)),l=i(8901);h.addType(l.TYPE,c.TYPE,(function(t,e,i,h,u,_,p){o&&s.assert(i.getType()==l.TYPE),o&&s.assert(_.getType()==c.TYPE),function(t,e,i,o,s){t.pointCount=0;for(var h=n.mulVec2(s,o.m_p),c=n.mulTVec2(i,h),l=0,u=-1/0,_=e.m_radius+o.m_radius,p=e.m_count,d=e.m_vertices,y=e.m_normals,f=0;f<p;++f){var v=a.dot(y[f],a.sub(c,d[f]));if(v>_)return;v>u&&(u=v,l=f)}var g=l,x=g+1<p?g+1:0,A=d[g],b=d[x];if(u<r.EPSILON)return t.pointCount=1,t.type=m.e_faceA,t.localNormal.set(y[l]),t.localPoint.setCombine(.5,A,.5,b),t.points[0].localPoint=o.m_p,t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,void(t.points[0].id.cf.typeB=m.e_vertex);var B=a.dot(a.sub(c,A),a.sub(b,A)),w=a.dot(a.sub(c,b),a.sub(A,b));if(B<=0){if(a.distanceSquared(c,A)>_*_)return;t.pointCount=1,t.type=m.e_faceA,t.localNormal.setCombine(1,c,-1,A),t.localNormal.normalize(),t.localPoint=A,t.points[0].localPoint.set(o.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,t.points[0].id.cf.typeB=m.e_vertex}else if(w<=0){if(a.distanceSquared(c,b)>_*_)return;t.pointCount=1,t.type=m.e_faceA,t.localNormal.setCombine(1,c,-1,b),t.localNormal.normalize(),t.localPoint.set(b),t.points[0].localPoint.set(o.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,t.points[0].id.cf.typeB=m.e_vertex}else{var S=a.mid(A,b);if((u=a.dot(c,y[g])-a.dot(S,y[g]))>_)return;t.pointCount=1,t.type=m.e_faceA,t.localNormal.set(y[g]),t.localPoint.set(S),t.points[0].localPoint.set(o.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,t.points[0].id.cf.typeB=m.e_vertex}}(t,i.getShape(),e,_.getShape(),u)}))},1867:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=(i(4175),i(5387),i(8850)),n=i(6306),a=(i(3766),i(1099),i(2322),i(8730)),m=i(226),h=i(3581),c=i(2642),l=i(3335);function u(t,e,i,a,h){t.pointCount=0;var c=r.mulTVec2(i,r.mulVec2(h,a.m_p)),l=e.m_vertex1,u=e.m_vertex2,_=n.sub(u,l),p=n.dot(_,n.sub(u,c)),d=n.dot(_,n.sub(c,l)),y=e.m_radius+a.m_radius;if(d<=0){var f=n.clone(l),v=n.sub(c,f);if(n.dot(v,v)>y*y)return;if(e.m_hasVertex0){var g=e.m_vertex0,x=l,A=n.sub(x,g);if(n.dot(A,n.sub(x,c))>0)return}return t.type=m.e_circles,t.localNormal.setZero(),t.localPoint.set(f),t.pointCount=1,t.points[0].localPoint.set(a.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,void(t.points[0].id.cf.typeB=m.e_vertex)}if(p<=0){if(f=n.clone(u),v=n.sub(c,f),n.dot(v,v)>y*y)return;if(e.m_hasVertex3){var b=e.m_vertex3,B=u,w=n.sub(b,B);if(n.dot(w,n.sub(c,B))>0)return}return t.type=m.e_circles,t.localNormal.setZero(),t.localPoint.set(f),t.pointCount=1,t.points[0].localPoint.set(a.m_p),t.points[0].id.cf.indexA=1,t.points[0].id.cf.typeA=m.e_vertex,t.points[0].id.cf.indexB=0,void(t.points[0].id.cf.typeB=m.e_vertex)}var S=n.dot(_,_);if(o&&s.assert(S>0),f=n.combine(p/S,l,d/S,u),v=n.sub(c,f),!(n.dot(v,v)>y*y)){var C=n.neo(-_.y,_.x);n.dot(C,n.sub(c,l))<0&&C.set(-C.x,-C.y),C.normalize(),t.type=m.e_faceA,t.localNormal=C,t.localPoint.set(l),t.pointCount=1,t.points[0].localPoint.set(a.m_p),t.points[0].id.cf.indexA=0,t.points[0].id.cf.typeA=m.e_face,t.points[0].id.cf.indexB=0,t.points[0].id.cf.typeB=m.e_vertex}}a.addType(h.TYPE,l.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==h.TYPE),o&&s.assert(a.getType()==l.TYPE),u(t,i.getShape(),e,a.getShape(),n)})),a.addType(c.TYPE,l.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==c.TYPE),o&&s.assert(a.getType()==l.TYPE);var _=i.getShape(),p=new h;_.getChildEdge(p,r),u(t,p,e,a.getShape(),n)}))},9221:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=(i(4175),i(5387)),n=i(8850),a=i(6306),m=i(3766),h=i(1099),c=(i(2322),i(8730)),l=i(226),u=i(3581),_=i(2642),p=i(8901);function d(){this.type,this.index,this.separation}c.addType(u.TYPE,p.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==u.TYPE),o&&s.assert(a.getType()==p.TYPE),x(t,i.getShape(),e,a.getShape(),n)})),c.addType(_.TYPE,p.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==_.TYPE),o&&s.assert(a.getType()==p.TYPE);var h=i.getShape(),c=new u;h.getChildEdge(c,r),x(t,c,e,a.getShape(),n)}));var y=new d,f=new d,v=new function(){this.vertices=[],this.normals=[],this.count=0},g=new function(){this.i1,this.i2,this.v1,this.v2,this.normal=a.zero(),this.sideNormal1=a.zero(),this.sideOffset1,this.sideNormal2=a.zero(),this.sideOffset2};function x(t,e,i,o,s){var c=n.mulTXf(i,s),u=n.mulVec2(c,o.m_centroid),_=e.m_vertex0,p=e.m_vertex1,d=e.m_vertex2,x=e.m_vertex3,A=e.m_hasVertex0,b=e.m_hasVertex3,B=a.sub(d,p);B.normalize();var w,S=a.neo(B.y,-B.x),C=a.dot(S,a.sub(u,p)),T=0,M=0,P=!1,E=!1;if(A){var I=a.sub(p,_);I.normalize();var V=a.neo(I.y,-I.x);P=a.cross(I,B)>=0,T=a.dot(V,u)-a.dot(V,_)}if(b){var z=a.sub(x,d);z.normalize();var F=a.neo(z.y,-z.x);E=a.cross(B,z)>0,M=a.dot(F,u)-a.dot(F,d)}var R=a.zero(),L=a.zero(),D=a.zero();A&&b?P&&E?(w=T>=0||C>=0||M>=0)?(R.set(S),L.set(V),D.set(F)):(R.setMul(-1,S),L.setMul(-1,S),D.setMul(-1,S)):P?(w=T>=0||C>=0&&M>=0)?(R.set(S),L.set(V),D.set(S)):(R.setMul(-1,S),L.setMul(-1,F),D.setMul(-1,S)):E?(w=M>=0||T>=0&&C>=0)?(R.set(S),L.set(S),D.set(F)):(R.setMul(-1,S),L.setMul(-1,S),D.setMul(-1,V)):(w=T>=0&&C>=0&&M>=0)?(R.set(S),L.set(S),D.set(S)):(R.setMul(-1,S),L.setMul(-1,F),D.setMul(-1,V)):A?P?(w=T>=0||C>=0)?(R.set(S),L.set(V),D.setMul(-1,S)):(R.setMul(-1,S),L.set(S),D.setMul(-1,S)):(w=T>=0&&C>=0)?(R.set(S),L.set(S),D.setMul(-1,S)):(R.setMul(-1,S),L.set(S),D.setMul(-1,V)):b?E?(w=C>=0||M>=0)?(R.set(S),L.setMul(-1,S),D.set(F)):(R.setMul(-1,S),L.setMul(-1,S),D.set(S)):(w=C>=0&&M>=0)?(R.set(S),L.setMul(-1,S),D.set(S)):(R.setMul(-1,S),L.setMul(-1,F),D.set(S)):(w=C>=0)?(R.set(S),L.setMul(-1,S),D.setMul(-1,S)):(R.setMul(-1,S),L.set(S),D.set(S)),v.count=o.m_count;for(var k=0;k<o.m_count;++k)v.vertices[k]=n.mulVec2(c,o.m_vertices[k]),v.normals[k]=m.mulVec2(c.q,o.m_normals[k]);var q=2*h.polygonRadius;for(t.pointCount=0,y.type=1,y.index=w?0:1,y.separation=1/0,k=0;k<v.count;++k)(O=a.dot(R,a.sub(v.vertices[k],p)))<y.separation&&(y.separation=O);if(-1!=y.type&&!(y.separation>q)){f.type=-1,f.index=-1,f.separation=-1/0;var U=a.neo(-R.y,R.x);for(k=0;k<v.count;++k){var O,j=a.neg(v.normals[k]),N=a.dot(j,a.sub(v.vertices[k],p)),Y=a.dot(j,a.sub(v.vertices[k],d));if((O=r.min(N,Y))>q){f.type=2,f.index=k,f.separation=O;break}if(a.dot(j,U)>=0){if(a.dot(a.sub(j,D),R)<-h.angularSlop)continue}else if(a.dot(a.sub(j,L),R)<-h.angularSlop)continue;O>f.separation&&(f.type=2,f.index=k,f.separation=O)}if(!(-1!=f.type&&f.separation>q)){var G;G=-1==f.type?y:f.separation>.98*y.separation+.001?f:y;var W=[new l.clipVertex,new l.clipVertex];if(1==G.type){t.type=l.e_faceA;var X=0,J=a.dot(R,v.normals[0]);for(k=1;k<v.count;++k){var Z=a.dot(R,v.normals[k]);Z<J&&(J=Z,X=k)}var H=X,K=H+1<v.count?H+1:0;W[0].v=v.vertices[H],W[0].id.cf.indexA=0,W[0].id.cf.indexB=H,W[0].id.cf.typeA=l.e_face,W[0].id.cf.typeB=l.e_vertex,W[1].v=v.vertices[K],W[1].id.cf.indexA=0,W[1].id.cf.indexB=K,W[1].id.cf.typeA=l.e_face,W[1].id.cf.typeB=l.e_vertex,w?(g.i1=0,g.i2=1,g.v1=p,g.v2=d,g.normal.set(S)):(g.i1=1,g.i2=0,g.v1=d,g.v2=p,g.normal.setMul(-1,S))}else t.type=l.e_faceB,W[0].v=p,W[0].id.cf.indexA=0,W[0].id.cf.indexB=G.index,W[0].id.cf.typeA=l.e_vertex,W[0].id.cf.typeB=l.e_face,W[1].v=d,W[1].id.cf.indexA=0,W[1].id.cf.indexB=G.index,W[1].id.cf.typeA=l.e_vertex,W[1].id.cf.typeB=l.e_face,g.i1=G.index,g.i2=g.i1+1<v.count?g.i1+1:0,g.v1=v.vertices[g.i1],g.v2=v.vertices[g.i2],g.normal.set(v.normals[g.i1]);g.sideNormal1.set(g.normal.y,-g.normal.x),g.sideNormal2.setMul(-1,g.sideNormal1),g.sideOffset1=a.dot(g.sideNormal1,g.v1),g.sideOffset2=a.dot(g.sideNormal2,g.v2);var Q=[new l.clipVertex,new l.clipVertex],$=[new l.clipVertex,new l.clipVertex];if(!(l.clipSegmentToLine(Q,W,g.sideNormal1,g.sideOffset1,g.i1)<h.maxManifoldPoints||l.clipSegmentToLine($,Q,g.sideNormal2,g.sideOffset2,g.i2)<h.maxManifoldPoints)){1==G.type?(t.localNormal=a.clone(g.normal),t.localPoint=a.clone(g.v1)):(t.localNormal=a.clone(o.m_normals[g.i1]),t.localPoint=a.clone(o.m_vertices[g.i1]));var tt=0;for(k=0;k<h.maxManifoldPoints;++k)if(a.dot(g.normal,a.sub($[k].v,g.v1))<=q){var et=t.points[tt];1==G.type?(et.localPoint=n.mulT(c,$[k].v),et.id=$[k].id):(et.localPoint=$[k].v,et.id.cf.typeA=$[k].id.cf.typeB,et.id.cf.typeB=$[k].id.cf.typeA,et.id.cf.indexA=$[k].id.cf.indexB,et.id.cf.indexB=$[k].id.cf.indexA),++tt}t.pointCount=tt}}}}},6891:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT,s=i(2274),r=(i(5387),i(8850)),n=i(3766),a=i(6306),m=(i(3406),i(1099)),h=i(226),c=i(8730),l=(i(2322),i(8901));function u(t,e,i,o){for(var s=t.m_count,m=i.m_count,h=t.m_normals,c=t.m_vertices,l=i.m_vertices,_=r.mulTXf(o,e),p=0,d=-1/0,y=0;y<s;++y){for(var f=n.mulVec2(_.q,h[y]),v=r.mulVec2(_,c[y]),g=1/0,x=0;x<m;++x){var A=a.dot(f,l[x])-a.dot(f,v);A<g&&(g=A)}g>d&&(d=g,p=y)}u._maxSeparation=d,u._bestIndex=p}function _(t,e,i,c,l){t.pointCount=0;var _=e.m_radius+c.m_radius;u(e,i,c,l);var p=u._bestIndex,d=u._maxSeparation;if(!(d>_)){u(c,l,e,i);var y=u._bestIndex,f=u._maxSeparation;if(!(f>_)){var v,g,x,A,b,B;f>d+.1*m.linearSlop?(v=c,g=e,x=l,A=i,b=y,t.type=h.e_faceB,B=1):(v=e,g=c,x=i,A=l,b=p,t.type=h.e_faceA,B=0);var w=[new h.clipVertex,new h.clipVertex];!function(t,e,i,m,c,l){var u=e.m_normals,_=c.m_count,p=c.m_vertices,d=c.m_normals;o&&s.assert(0<=m&&m<e.m_count);for(var y=n.mulT(l.q,n.mulVec2(i.q,u[m])),f=0,v=1/0,g=0;g<_;++g){var x=a.dot(y,d[g]);x<v&&(v=x,f=g)}var A=f,b=A+1<_?A+1:0;t[0].v=r.mulVec2(l,p[A]),t[0].id.cf.indexA=m,t[0].id.cf.indexB=A,t[0].id.cf.typeA=h.e_face,t[0].id.cf.typeB=h.e_vertex,t[1].v=r.mulVec2(l,p[b]),t[1].id.cf.indexA=m,t[1].id.cf.indexB=b,t[1].id.cf.typeA=h.e_face,t[1].id.cf.typeB=h.e_vertex}(w,v,x,b,g,A);var S=v.m_count,C=v.m_vertices,T=b,M=b+1<S?b+1:0,P=C[T],E=C[M],I=a.sub(E,P);I.normalize();var V=a.cross(I,1),z=a.combine(.5,P,.5,E),F=n.mulVec2(x.q,I),R=a.cross(F,1);P=r.mulVec2(x,P),E=r.mulVec2(x,E);var L=a.dot(R,P),D=-a.dot(F,P)+_,k=a.dot(F,E)+_,q=[new h.clipVertex,new h.clipVertex],U=[new h.clipVertex,new h.clipVertex];if(!(h.clipSegmentToLine(q,w,a.neg(F),D,T)<2||h.clipSegmentToLine(U,q,F,k,M)<2)){t.localNormal=V,t.localPoint=z;for(var O=0,j=0;j<U.length;++j)if(a.dot(R,U[j].v)-L<=_){var N=t.points[O];if(N.localPoint.set(r.mulTVec2(A,U[j].v)),N.id=U[j].id,B){var Y=N.id.cf,G=Y.indexA,W=Y.indexB,X=Y.typeA,J=Y.typeB;Y.indexA=W,Y.indexB=G,Y.typeA=J,Y.typeB=X}++O}t.pointCount=O}}}}t.exports=_,c.addType(l.TYPE,l.TYPE,(function(t,e,i,r,n,a,m){o&&s.assert(i.getType()==l.TYPE),o&&s.assert(a.getType()==l.TYPE),_(t,i.getShape(),e,a.getShape(),n)}))},3581:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=h;var o=i(4175),s=(i(4896),i(1099)),r=i(2322),n=(i(5387),i(8850)),a=i(3766),m=i(6306);function h(t,e){if(!(this instanceof h))return new h(t,e);h._super.call(this),this.m_type=h.TYPE,this.m_radius=s.polygonRadius,this.m_vertex1=t?m.clone(t):m.zero(),this.m_vertex2=e?m.clone(e):m.zero(),this.m_vertex0=m.zero(),this.m_vertex3=m.zero(),this.m_hasVertex0=!1,this.m_hasVertex3=!1}i(3406),h._super=r,h.prototype=o(h._super.prototype),h.TYPE="edge",r.TYPES[h.TYPE]=h,h.prototype._serialize=function(){return{type:this.m_type,vertex1:this.m_vertex1,vertex2:this.m_vertex2,vertex0:this.m_vertex0,vertex3:this.m_vertex3,hasVertex0:this.m_hasVertex0,hasVertex3:this.m_hasVertex3}},h._deserialize=function(t){var e=new h(t.vertex1,t.vertex2);return e.hasVertex0&&e.setPrev(t.vertex0),e.hasVertex3&&e.setNext(t.vertex3),e},h.prototype.setNext=function(t){return t?(this.m_vertex3.set(t),this.m_hasVertex3=!0):(this.m_vertex3.setZero(),this.m_hasVertex3=!1),this},h.prototype.setPrev=function(t){return t?(this.m_vertex0.set(t),this.m_hasVertex0=!0):(this.m_vertex0.setZero(),this.m_hasVertex0=!1),this},h.prototype._set=function(t,e){return this.m_vertex1.set(t),this.m_vertex2.set(e),this.m_hasVertex0=!1,this.m_hasVertex3=!1,this},h.prototype._clone=function(){var t=new h;return t.m_type=this.m_type,t.m_radius=this.m_radius,t.m_vertex1.set(this.m_vertex1),t.m_vertex2.set(this.m_vertex2),t.m_vertex0.set(this.m_vertex0),t.m_vertex3.set(this.m_vertex3),t.m_hasVertex0=this.m_hasVertex0,t.m_hasVertex3=this.m_hasVertex3,t},h.prototype.getChildCount=function(){return 1},h.prototype.testPoint=function(t,e){return!1},h.prototype.rayCast=function(t,e,i,o){var s=a.mulTVec2(i.q,m.sub(e.p1,i.p)),r=a.mulTVec2(i.q,m.sub(e.p2,i.p)),n=m.sub(r,s),h=this.m_vertex1,c=this.m_vertex2,l=m.sub(c,h),u=m.neo(l.y,-l.x);u.normalize();var _=m.dot(u,m.sub(h,s)),p=m.dot(u,n);if(0==p)return!1;var d=_/p;if(d<0||e.maxFraction<d)return!1;var y=m.add(s,m.mul(d,n)),f=m.sub(c,h),v=m.dot(f,f);if(0==v)return!1;var g=m.dot(m.sub(y,h),f)/v;return!(g<0||1<g||(t.fraction=d,t.normal=_>0?a.mulVec2(i.q,u).neg():a.mulVec2(i.q,u),0))},h.prototype.computeAABB=function(t,e,i){var o=n.mulVec2(e,this.m_vertex1),s=n.mulVec2(e,this.m_vertex2);t.combinePoints(o,s),t.extend(this.m_radius)},h.prototype.computeMass=function(t,e){t.mass=0,t.center.setCombine(.5,this.m_vertex1,.5,this.m_vertex2),t.I=0},h.prototype.computeDistanceProxy=function(t){t.m_vertices.push(this.m_vertex1),t.m_vertices.push(this.m_vertex2),t.m_count=2,t.m_radius=this.m_radius}},8901:(t,e,i)=>{"undefined"!=typeof DEBUG&&DEBUG;var o="undefined"!=typeof ASSERT&&ASSERT;t.exports=u;var s=i(2274),r=i(4175),n=(i(4896),i(5387)),a=i(8850),m=i(3766),h=i(6306),c=(i(3406),i(1099)),l=i(2322);function u(t){if(!(this instanceof u))return new u(t);u._super.call(this),this.m_type=u.TYPE,this.m_radius=c.polygonRadius,this.m_centroid=h.zero(),this.m_vertices=[],this.m_normals=[],this.m_count=0,t&&t.length&&this._set(t)}u._super=l,u.prototype=r(u._super.prototype),u.TYPE="polygon",l.TYPES[u.TYPE]=u,u.prototype._serialize=function(){return{type:this.m_type,vertices:this.m_vertices}},u._deserialize=function(t,e,i){return new u(t.vertices&&t.vertices.map((t=>h._deserialize(t))))},u.prototype.getVertex=function(t){return o&&s.assert(0<=t&&t<this.m_count),this.m_vertices[t]},u.prototype._clone=function(){var t=new u;t.m_type=this.m_type,t.m_radius=this.m_radius,t.m_count=this.m_count,t.m_centroid.set(this.m_centroid);for(var e=0;e<this.m_count;e++)t.m_vertices.push(this.m_vertices[e].clone());for(e=0;e<this.m_normals.length;e++)t.m_normals.push(this.m_normals[e].clone());return t},u.prototype.getChildCount=function(){return 1},u.prototype._reset=function(){this._set(this.m_vertices)},u.prototype._set=function(t){if(o&&s.assert(3<=t.length&&t.length<=c.maxPolygonVertices),t.length<3)this._setAsBox(1,1);else{for(var e=n.min(t.length,c.maxPolygonVertices),i=[],r=0;r<e;++r){for(var a=t[r],m=!0,l=0;l<i.length;++l)if(h.distanceSquared(a,i[l])<.25*c.linearSlopSquared){m=!1;break}m&&i.push(a)}if((e=i.length)<3)return o&&s.assert(!1),void this._setAsBox(1,1);var u=0,_=i[0].x;for(r=1;r<e;++r){var p=i[r].x;(p>_||p===_&&i[r].y<i[u].y)&&(u=r,_=p)}for(var d=[],y=0,f=u;;){d[y]=f;var v=0;for(l=1;l<e;++l)if(v!==f){var g=h.sub(i[v],i[d[y]]),x=(a=h.sub(i[l],i[d[y]]),h.cross(g,a));x<0&&(v=l),0===x&&a.lengthSquared()>g.lengthSquared()&&(v=l)}else v=l;if(++y,f=v,v===u)break}if(y<3)return o&&s.assert(!1),void this._setAsBox(1,1);for(this.m_count=y,this.m_vertices=[],r=0;r<y;++r)this.m_vertices[r]=i[d[r]];for(r=0;r<y;++r){var A=r,b=r+1<y?r+1:0,B=h.sub(this.m_vertices[b],this.m_vertices[A]);o&&s.assert(B.lengthSquared()>n.EPSILON*n.EPSILON),this.m_normals[r]=h.cross(B,1),this.m_normals[r].normalize()}this.m_centroid=function(t,e){o&&s.assert(e>=3);for(var i=h.zero(),r=0,a=h.zero(),m=1/3,c=0;c<e;++c){var l=a,u=t[c],_=c+1<e?t[c+1]:t[0],p=h.sub(u,l),d=h.sub(_,l),y=.5*h.cross(p,d);r+=y,i.addMul(y*m,l),i.addMul(y*m,u),i.addMul(y*m,_)}return o&&s.assert(r>n.EPSILON),i.mul(1/r),i}(this.m_vertices,y)}},u.prototype._setAsBox=function(t,e,i,o){if(this.m_vertices[0]=h.neo(t,-e),this.m_vertices[1]=h.neo(t,e),this.m_vertices[2]=h.neo(-t,e),this.m_vertices[3]=h.neo(-t,-e),this.m_normals[0]=h.neo(1,0),this.m_normals[1]=h.neo(0,1),this.m_normals[2]=h.neo(-1,0),this.m_normals[3]=h.neo(0,-1),this.m_count=4,h.isValid(i)){o=o||0,this.m_centroid.set(i);var s=a.identity();s.p.set(i),s.q.set(o);for(var r=0;r<this.m_count;++r)this.m_vertices[r]=a.mulVec2(s,this.m_vertices[r]),this.m_normals[r]=m.mulVec2(s.q,this.m_normals[r])}},u.prototype.testPoint=function(t,e){for(var i=m.mulTVec2(t.q,h.sub(e,t.p)),o=0;o<this.m_count;++o)if(h.dot(this.m_normals[o],h.sub(i,this.m_vertices[o]))>0)return!1;return!0},u.prototype.rayCast=function(t,e,i,r){for(var n=m.mulTVec2(i.q,h.sub(e.p1,i.p)),a=m.mulTVec2(i.q,h.sub(e.p2,i.p)),c=h.sub(a,n),l=0,u=e.maxFraction,_=-1,p=0;p<this.m_count;++p){var d=h.dot(this.m_normals[p],h.sub(this.m_vertices[p],n)),y=h.dot(this.m_normals[p],c);if(0==y){if(d<0)return!1}else y<0&&d<l*y?(l=d/y,_=p):y>0&&d<u*y&&(u=d/y);if(u<l)return!1}return o&&s.assert(0<=l&&l<=e.maxFraction),_>=0&&(t.fraction=l,t.normal=m.mulVec2(i.q,this.m_normals[_]),!0)},u.prototype.computeAABB=function(t,e,i){for(var o=1/0,s=1/0,r=-1/0,m=-1/0,h=0;h<this.m_count;++h){var c=a.mulVec2(e,this.m_vertices[h]);o=n.min(o,c.x),r=n.max(r,c.x),s=n.min(s,c.y),m=n.max(m,c.y)}t.lowerBound.set(o,s),t.upperBound.set(r,m),t.extend(this.m_radius)},u.prototype.computeMass=function(t,e){o&&s.assert(this.m_count>=3);for(var i=h.zero(),r=0,a=0,m=h.zero(),c=0;c<this.m_count;++c)m.add(this.m_vertices[c]);m.mul(1/this.m_count);var l=1/3;for(c=0;c<this.m_count;++c){var u=h.sub(this.m_vertices[c],m),_=c+1<this.m_count?h.sub(this.m_vertices[c+1],m):h.sub(this.m_vertices[0],m),p=h.cross(u,_),d=.5*p;r+=d,i.addCombine(d*l,u,d*l,_);var y=u.x,f=u.y,v=_.x,g=_.y;a+=.25*l*p*(y*y+v*y+v*v+(f*f+g*f+g*g))}t.mass=e*r,o&&s.assert(r>n.EPSILON),i.mul(1/r),t.center.setCombine(1,i,1,m),t.I=e*a,t.I+=t.mass*(h.dot(t.center,t.center)-h.dot(i,i))},u.prototype.validate=function(){for(var t=0;t<this.m_count;++t)for(var e=t,i=t<this.m_count-1?e+1:0,o=this.m_vertices[e],s=h.sub(this.m_vertices[i],o),r=0;r<this.m_count;++r)if(r!=e&&r!=i){var n=h.sub(this.m_vertices[r],o);if(h.cross(s,n)<0)return!1}return!0},u.prototype.computeDistanceProxy=function(t){t.m_vertices=this.m_vertices,t.m_count=this.m_count,t.m_radius=this.m_radius}},5706:t=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports=function(t){var e=[],i=t.max||1/0,o=t.create,s=t.allocate,r=t.release,n=t.discard,a=0,m=0,h=0,c=0;this.max=function(t){return"number"==typeof t?(i=t,this):i},this.size=function(){return e.length},this.allocate=function(){var t;return e.length>0?t=e.shift():(a++,t="function"==typeof o?o():{}),m++,"function"==typeof s&&s(t),t},this.release=function(t){e.length<i?(h++,"function"==typeof r&&r(t),e.push(t)):(c++,"function"==typeof n&&(t=n(t)))},this.toString=function(){return" +"+a+" >"+m+" <"+h+" -"+c+" ="+e.length+"/"+i}}},9205:t=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,t.exports.now=function(){return Date.now()},t.exports.diff=function(t){return Date.now()-t}},2274:(t,e)=>{var i="undefined"!=typeof DEBUG&&DEBUG,o="undefined"!=typeof ASSERT&&ASSERT;e.debug=function(){i&&console.log.apply(console,arguments)},e.assert=function(t,e,i){if(o&&!t)throw i&&console.log(i),new Error(e)}},4175:t=>{if("function"==typeof Object.create)t.exports=function(t,e){return Object.create.call(Object,t,e)};else{function e(){}t.exports=function(t,i){if(i)throw Error("Second argument is not supported!");if("object"!=typeof t||null===t)throw Error("Invalid prototype!");return e.prototype=t,new e}}},4896:t=>{"undefined"!=typeof DEBUG&&DEBUG,"undefined"!=typeof ASSERT&&ASSERT,Object.prototype.propertyIsEnumerable,t.exports=function(t,e){null==t&&(t={});var i=Object.assign({},t);for(var o in e)e.hasOwnProperty(o)&&void 0===t[o]&&(i[o]=e[o]);if("function"==typeof Object.getOwnPropertySymbols)for(var s=Object.getOwnPropertySymbols(e),r=0;r<s.length;r++){var n=s[r];e.propertyIsEnumerable(n)&&void 0===t[o]&&(i[n]=e[n])}return i}},1169:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nuniform sampler2D uSampler;\nuniform sampler2D uSecondaryCamera;\nuniform sampler2D uThirdCamera;\nuniform sampler2D uPerlinNoise;\n\nuniform vec2 uCharacterPos;\nuniform vec2 uPortal1Origin;\nuniform vec2 uPortal1Normal;\nuniform vec2 uPortal2Origin;\nuniform vec2 uPortal2Normal;\nuniform highp vec2 uScreenSize;\nuniform float uTime;\n\nvarying vec2 vUv;\nvarying vec2 vWorldCoord;\n\nconst float expansion = 0.9;\n\nconst vec3 portal1Color = vec3(0.0039, 0.9647, 0.9490);\nconst vec3 portal2Color = vec3(0.96, 0.93, 0.015);\n\n#define clamp(x) max(0.0, min(1.0, x))\n\nvec2 rotate90(in vec2 vec) {\n    return vec2(vec.y, -vec.x);\n}\nvec2 rotate270(in vec2 vec) {\n    return vec2(-vec.y, vec.x);\n}\n\n/**\n * Returns the z-value of the sample with respect to the provided portal.\n * z-value of 1 means fully inside the portal\n * z-value of 0 means fully outside the portal\n */\nfloat getPortalZ(in vec2 characterPos, in vec2 portalOrigin, in vec2 portalNormal) {\n    vec2 characterPortal = portalOrigin - characterPos;\n    vec2 portalFragment = portalOrigin - vWorldCoord;\n    vec2 portalTangent = rotate90(portalNormal);\n\n    // Prevent viewing the portal from behind\n    if (dot(characterPortal, portalNormal) > 0.0) {\n        return 0.0;\n    }\n\n    vec2 advance = normalize(characterPortal) * min(length(characterPortal), 1.0);\n    vec2 characterFragment = vWorldCoord - (characterPos + advance);\n\n    vec2 portalTopEdge = portalOrigin + portalTangent * expansion;\n    vec2 portalBottomEdge = portalOrigin - portalTangent * expansion;\n    vec2 characterTopEdge = normalize(portalTopEdge - (characterPos + advance));\n    vec2 characterBottomEdge = normalize(portalBottomEdge - (characterPos + advance));\n\n    float distanceToSide = clamp(1.0 * min(dot(characterFragment, rotate90(characterTopEdge)), dot(characterFragment, rotate270(characterBottomEdge)))\n        + clamp(0.75 - dot(-characterPortal, portalNormal) / 4.0));\n\n    float nearWall = clamp(clamp(dot(portalNormal, portalFragment) * 100.0) + clamp(length(portalFragment) - length(characterPortal)));\n    float farWall = clamp(5.0 - 1.0 * length(characterPortal) - length(portalFragment) / 4.0);\n    return farWall * nearWall * distanceToSide;\n}\n\nvec4 getPortalSample(in float deltaHeight, in vec2 characterPortal, in vec2 portalNormal, in sampler2D camera, in vec3 portalColor, in vec3 otherPortalColor) {\n    float gain = 4.0 * (length(characterPortal) + 1.0);\n    vec3 theTint = mix(otherPortalColor, portalColor, clamp(length(characterPortal) / 3.0 + 0.5));\n    // TODO: What does this mean? Can simplify?\n    vec3 color = mix(theTint, vec3(texture2D(camera, vUv)), clamp(10.0 * deltaHeight * gain - 9.0));\n    vec3 colorOpposite = mix(theTint, vec3(texture2D(camera, vUv)), clamp(deltaHeight * gain));\n    vec3 colorComposite = mix(colorOpposite, color, clamp(length(characterPortal)));\n    return mix(texture2D(uSampler, vUv), vec4(colorComposite, 1.0), clamp(deltaHeight * gain));\n}\n\nfloat easing(float value) {\n    // 6*Math.pow(t,5) - 15*Math.pow(t,4) + 10*Math.pow(t,3)\n    float p3 = value*value*value;\n    float p4 = p3 * value;\n    float p5 = p4 * value;\n    return 6.0 * p5 - 15.0 * p4 + 10.0 * p3;\n}\n\nfloat getGroundHeight(vec2 characterPos) {\n    vec3 noiseCoords = vec3((vWorldCoord - characterPos) * 1.6, uTime / 1000.0);\n    vec3 minXYZ = floor(noiseCoords);\n    vec3 topLeft =      vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z, 4.0), mod(minXYZ.z / 4.0, 4.0)), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 topRight =     vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z, 4.0), mod(minXYZ.z / 4.0, 4.0)) + vec2(1.0, 0.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 bottomLeft =   vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z, 4.0), mod(minXYZ.z / 4.0, 4.0)) + vec2(0.0, 1.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 bottomRight =  vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z, 4.0), mod(minXYZ.z / 4.0, 4.0)) + vec2(1.0, 1.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 topLeftB =     vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z + 1.0, 4.0), mod((minXYZ.z + 1.0) / 4.0, 4.0)), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 topRightB =    vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z + 1.0, 4.0), mod((minXYZ.z + 1.0) / 4.0, 4.0)) + vec2(1.0, 0.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 bottomLeftB =  vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z + 1.0, 4.0), mod((minXYZ.z + 1.0) / 4.0, 4.0)) + vec2(0.0, 1.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n    vec3 bottomRightB = vec3(texture2D(uPerlinNoise, mod(vec2(minXYZ) + vec2(mod(minXYZ.z + 1.0, 4.0), mod((minXYZ.z + 1.0) / 4.0, 4.0)) + vec2(1.0, 1.0), 16.0)/ 16.0)) * 2.0 - 1.0;\n\n    float s = dot(topLeft, noiseCoords - minXYZ);\n    float t = dot(topRight, noiseCoords - minXYZ - vec3(1.0, 0.0, 0.0));\n    float u = dot(bottomLeft, noiseCoords - minXYZ - vec3(0.0, 1.0, 0.0));\n    float v = dot(bottomRight, noiseCoords - minXYZ - vec3(1.0, 1.0, 0.0));\n    float w = dot(topLeftB, noiseCoords - minXYZ - vec3(0.0, 0.0, 1.0));\n    float x = dot(topRightB, noiseCoords - minXYZ - vec3(1.0, 0.0, 1.0));\n    float y = dot(bottomLeftB, noiseCoords - minXYZ - vec3(0.0, 1.0, 1.0));\n    float z = dot(bottomRightB, noiseCoords - minXYZ - vec3(1.0, 1.0, 1.0));\n\n    float sx = easing(noiseCoords.x - minXYZ.x);\n    float sy = easing(noiseCoords.y - minXYZ.y);\n    float sz = easing(noiseCoords.z - minXYZ.z);\n\n    float a = s + sx * (t - s);\n    float b = u + sx * (v - u);\n    float c = w + sx * (x - w);\n    float d = y + sx * (z - y);\n\n    float front = a + sy * (b - a);\n    float back = c + sy * (d - c);\n\n    float noise = front + sz * (back - front);\n\n    return noise * 0.4 + 0.5; // (sin(vWorldCoord.x * 15.0 + uTime / 200.0) / 2.0 + cos(vWorldCoord.y * 15.0) / 2.0) / 4.0 + 0.5;\n}\n\nvoid main() {\n    // gl_FragColor = vec4((vWorldCoord - uCharacterPos) / 32.0, 0.0, 1.0);\n    float height1 = getPortalZ(uCharacterPos, uPortal1Origin, uPortal1Normal);\n    float height2 = getPortalZ(uCharacterPos, uPortal2Origin, uPortal2Normal);\n\n    // Shortcuts, avoid useless texture lookups and noise computations\n    if (height1 == 0.0 && height2 == 0.0) {\n        gl_FragColor = texture2D(uSampler, vUv);\n    } else if (height1 == 1.0) {\n        gl_FragColor = texture2D(uSecondaryCamera, vUv);\n    } else if (height2 == 1.0) {\n        gl_FragColor = texture2D(uThirdCamera, vUv);\n    } else if (height1 > height2) {\n        gl_FragColor = getPortalSample(height1 - getGroundHeight(uCharacterPos), uPortal1Origin - uCharacterPos, uPortal1Normal, uSecondaryCamera, portal1Color, portal2Color);\n    } else {\n        gl_FragColor = getPortalSample(height2 - 1.0 + getGroundHeight(uCharacterPos), uPortal2Origin - uCharacterPos, uPortal2Normal, uThirdCamera, portal2Color, portal1Color);\n    }\n}\n"},6374:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nattribute vec4 aVertexPosition;\nattribute vec2 aScreenPosition;\n\nuniform highp vec2 uScreenSize;\nuniform mat4 uViewMatrix;\n\nvarying vec2 vUv;\nvarying vec2 vWorldCoord;\n\n\nvec2 displayToWorldCoordinates(in vec4 displayCoords) {\n    return vec2(uViewMatrix * displayCoords); // vec4(displayCoords, 1.0, 1.0));\n}\n\nvoid main() {\n    gl_Position = aVertexPosition;\n    vec2 uvPosition = vec2((aVertexPosition.x + 1.0) / 2.0, (aVertexPosition.y + 1.0) / 2.0);\n    vUv = uvPosition;\n    // vWorldCoord = displayToWorldCoordinates(vec2(uvPosition.x * uScreenSize.x, (1.0 - uvPosition.y) * uScreenSize.y));\n    vWorldCoord = displayToWorldCoordinates(aVertexPosition);\n}\n"},1170:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nuniform vec4 uColor;\n\nvoid main() {\n    gl_FragColor = uColor;\n}\n"},2303:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nattribute vec4 aVertexPosition;\n\nuniform mat4 uModel;\nuniform mat4 uPV;\n\nvoid main() {\n    gl_Position = uPV * uModel * aVertexPosition;\n}\n"},8029:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nuniform sampler2D uSampler;\n\nvarying vec2 vUv;\n\nvoid main() {\n    gl_FragColor = texture2D(uSampler, vUv);\n}\n"},2761:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});const o="precision lowp float;\n\nattribute vec4 aVertexPosition;\nattribute vec2 aUV;\n\nuniform mat4 uModel;\nuniform mat4 uPV;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec2 uvPosition = vec2((aVertexPosition.x + 1.0) / 2.0, (aVertexPosition.y + 1.0) / 2.0);\n    vUv = aUV;\n    gl_Position = uPV * uModel * aVertexPosition;\n}\n"},36:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AsyncContract=void 0;var o=i(888);e.AsyncContract=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=t.length-1,s=t.slice(0,i),r=t[i];return{enforce:function(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];if(e.length<s.length)throw new o.ValidationError("Expected "+s.length+" arguments but only received "+e.length);for(var n=0;n<s.length;n++)s[n].check(e[n]);var a=t.apply(void 0,e);if(!(a instanceof Promise))throw new o.ValidationError("Expected function to return a promise, but instead got "+a);return a.then(r.check)}}}}},361:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Contract=void 0;var o=i(888);e.Contract=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=t.length-1,s=t.slice(0,i),r=t[i];return{enforce:function(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];if(e.length<s.length)throw new o.ValidationError("Expected "+s.length+" arguments but only received "+e.length);for(var n=0;n<s.length;n++)s[n].check(e[n]);return r.check(t.apply(void 0,e))}}}}},6316:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.checked=e.check=void 0;var o=i(888),s=new WeakMap;function r(t,e,i){var o=s.get(t),r=o&&o.get(e);if(r)return r;for(var n=[],a=0;a<i;a++)n.push(a);return n}e.check=function(t,e,i){var o=s.get(t)||new Map;s.set(t,o);var r=o.get(e)||[];o.set(e,r),r.push(i)},e.checked=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)throw new Error("No runtype provided to `@checked`. Please remove the decorator.");return function(e,i,s){var n=s.value,a=(e.name||e.constructor.name+".prototype")+("string"==typeof i?'["'+i+'"]':"["+String(i)+"]"),m=r(e,i,t.length);if(m.length!==t.length)throw new Error("Number of `@checked` runtypes and @check parameters not matched.");if(m.length>n.length)throw new Error("Number of `@checked` runtypes exceeds actual parameter length.");s.value=function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];return t.forEach((function(t,i){var s=m[i],r=t.validate(e[s]);if(!r.success)throw new o.ValidationError(a+", argument #"+s+": "+r.message,r.key)})),n.apply(this,e)}}}},888:function(t,e){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0}),e.ValidationError=void 0;var s=function(t){function e(i,o){var s=t.call(this,o?i+" in "+o:i)||this;return s.key=o,s.name="ValidationError",Object.setPrototypeOf(s,e.prototype),s}return o(e,t),e}(Error);e.ValidationError=s},5529:function(t,e,i){"use strict";var o=this&&this.__createBinding||(Object.create?function(t,e,i,o){void 0===o&&(o=i),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,o){void 0===o&&(o=i),t[o]=e[i]}),s=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||o(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),e.Brand=e.InstanceOf=e.Null=e.Undefined=e.Literal=void 0,s(i(5550),e),s(i(7691),e),s(i(361),e),s(i(36),e),s(i(9074),e),s(i(888),e),s(i(2101),e),s(i(4913),e),s(i(6203),e);var r=i(7275);Object.defineProperty(e,"Literal",{enumerable:!0,get:function(){return r.Literal}}),Object.defineProperty(e,"Undefined",{enumerable:!0,get:function(){return r.Undefined}}),Object.defineProperty(e,"Null",{enumerable:!0,get:function(){return r.Null}}),s(i(4019),e),s(i(1257),e),s(i(4304),e),s(i(7333),e),s(i(6380),e),s(i(4226),e),s(i(9695),e),s(i(3132),e),s(i(3036),e),s(i(8239),e),s(i(559),e);var n=i(2867);Object.defineProperty(e,"InstanceOf",{enumerable:!0,get:function(){return n.InstanceOf}}),s(i(8802),e),s(i(8845),e);var a=i(6111);Object.defineProperty(e,"Brand",{enumerable:!0,get:function(){return a.Brand}}),s(i(6316),e)},9074:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.match=void 0,e.match=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){for(var i=0,o=t;i<o.length;i++){var s=o[i],r=s[0],n=s[1];if(r.guard(e))return n(e)}throw new Error("No alternatives were matched")}}},5550:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},7691:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0})},1732:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.innerValidate=e.create=void 0;var o=i(5529),s=i(8233),r=i(888);e.create=function(t,e){return e.check=i,e.assert=i,e._innerValidate=function(i,o){return o.has(i,e)?{success:!0,value:i}:t(i,o)},e.validate=function(t){return e._innerValidate(t,(i=new WeakMap,o=function(t,e){if(null!==t&&"object"==typeof t){var o=i.get(t);i.set(t,o?o.set(e,!0):(new WeakMap).set(e,!0))}},{has:function(t,e){var s=i.get(t),r=s&&s.get(e)||!1;return o(t,e),r}}));var i,o},e.guard=function(t){return e.validate(t).success},e.Or=function(t){return o.Union(e,t)},e.And=function(t){return o.Intersect(e,t)},e.withConstraint=function(t,i){return o.Constraint(e,t,i)},e.withGuard=function(t,i){return o.Constraint(e,t,i)},e.withBrand=function(t){return o.Brand(t,e)},e.reflect=e,e.toString=function(){return"Runtype<"+s.default(e)+">"},e;function i(t){var i=e.validate(t);if(i.success)return i.value;throw new r.ValidationError(i.message,i.key)}},e.innerValidate=function(t,e,i){return t._innerValidate(e,i)}},8233:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t,e){return function(s){var r=function(e){return t?"("+e+")":e};if(e.has(s))return r("CIRCULAR "+s.tag);e.add(s);try{switch(s.tag){case"unknown":case"never":case"void":case"boolean":case"number":case"string":case"symbol":case"function":return s.tag;case"literal":var n=s.value;return"string"==typeof n?'"'+n+'"':String(n);case"array":return""+o(s)+i(!0,e)(s.element)+"[]";case"dictionary":return"{ [_: "+s.key+"]: "+i(!1,e)(s.value)+" }";case"record":var a=Object.keys(s.fields);return a.length?"{ "+a.map((function(t){return""+o(s)+t+(s.isPartial?"?":"")+": "+i(!1,e)(s.fields[t])+";"})).join(" ")+" }":"{}";case"tuple":return"["+s.components.map(i(!1,e)).join(", ")+"]";case"union":return r(""+s.alternatives.map(i(!0,e)).join(" | "));case"intersect":return r(""+s.intersectees.map(i(!0,e)).join(" & "));case"constraint":return s.name||i(t,e)(s.underlying);case"instanceof":return"InstanceOf<"+s.ctor.name+">";case"brand":return i(t,e)(s.entity)}}finally{e.delete(s)}throw Error("impossible")}};function o(t){return t.isReadonly?"readonly ":""}e.default=i(!1,new Set)},6380:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Array=void 0;var o=i(1732);function s(t,e){return(i=o.create((function(e,i){if(!Array.isArray(e))return{success:!1,message:"Expected array, but was "+(null===e?e:typeof e)};for(var s=0,r=e;s<r.length;s++){var n=r[s],a=o.innerValidate(t,n,i);if(!a.success)return{success:!1,message:a.message,key:a.key?"["+e.indexOf(n)+"]."+a.key:"["+e.indexOf(n)+"]"}}return{success:!0,value:e}}),{tag:"array",isReadonly:e,element:t})).asReadonly=function(){return s(i.element,!0)},i;var i}e.Array=function(t){return s(t,!1)}},4019:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Boolean=void 0;var o=i(1732);e.Boolean=o.create((function(t){return"boolean"==typeof t?{success:!0,value:t}:{success:!1,message:"Expected boolean, but was "+(null===t?t:typeof t)}}),{tag:"boolean"})},6111:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Brand=void 0;var o=i(1732);e.Brand=function(t,e){return o.create((function(t){var i=e.validate(t);return i.success?{success:!0,value:i.value}:i}),{tag:"brand",brand:t,entity:e})}},8845:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Guard=e.Constraint=void 0;var o=i(1732),s=i(4304),r=i(2101);e.Constraint=function(t,e,i){return o.create((function(o){var r=i&&i.name,n=t.validate(o);if(!n.success)return n;var a=e(n.value);return s.String.guard(a)?{success:!1,message:a}:a?{success:!0,value:n.value}:{success:!1,message:"Failed "+(r||"constraint")+" check"}}),{tag:"constraint",underlying:t,constraint:e,name:i&&i.name,args:i&&i.args})},e.Guard=function(t,e){return r.Unknown.withGuard(t,e)}},3132:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Dictionary=void 0;var o=i(1732),s=i(8233);e.Dictionary=function(t,e){return void 0===e&&(e="string"),o.create((function(i,r){if(null==i){var n=o.create(i,{tag:"dictionary",key:e,value:t});return{success:!1,message:"Expected "+s.default(n)+", but was "+i}}if("object"!=typeof i)return n=o.create(i,{tag:"dictionary",key:e,value:t}),{success:!1,message:"Expected "+s.default(n.reflect)+", but was "+typeof i};if(Object.getPrototypeOf(i)!==Object.prototype){if(!Array.isArray(i))return n=o.create(i,{tag:"dictionary",key:e,value:t}),{success:!1,message:"Expected "+s.default(n.reflect)+", but was "+Object.getPrototypeOf(i)};if("string"===e)return{success:!1,message:"Expected dictionary, but was array"}}for(var a in i){if("number"===e&&isNaN(+a))return{success:!1,message:"Expected dictionary key to be a number, but was string"};var m=o.innerValidate(t,i[a],r);if(!m.success)return{success:!1,message:m.message,key:m.key?a+"."+m.key:a}}return{success:!0,value:i}}),{tag:"dictionary",key:e,value:t})}},559:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Function=void 0;var o=i(1732);e.Function=o.create((function(t){return"function"==typeof t?{success:!0,value:t}:{success:!1,message:"Expected function, but was "+(null===t?t:typeof t)}}),{tag:"function"})},2867:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InstanceOf=void 0;var o=i(1732);e.InstanceOf=function(t){return o.create((function(e){return e instanceof t?{success:!0,value:e}:{success:!1,message:"Expected "+t.name+", but was "+(null===e?e:typeof e)}}),{tag:"instanceof",ctor:t})}},8239:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Intersect=void 0;var o=i(1732);e.Intersect=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.create((function(e,i){for(var s=0,r=t;s<r.length;s++){var n=r[s],a=o.innerValidate(n,e,i);if(!a.success)return a}return{success:!0,value:e}}),{tag:"intersect",intersectees:t})}},8802:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Lazy=void 0;var o=i(1732);e.Lazy=function(t){var e,i={get tag(){return s().tag}};function s(){if(!e)for(var o in e=t())"tag"!==o&&(i[o]=e[o]);return e}return o.create((function(t){return s().validate(t)}),i)}},7275:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Null=e.Undefined=e.Literal=void 0;var o=i(1732);function s(t){return Array.isArray(t)?String(t.map(String)):String(t)}function r(t){return o.create((function(e){return e===t?{success:!0,value:e}:{success:!1,message:"Expected literal '"+s(t)+"', but was '"+s(e)+"'"}}),{tag:"literal",value:t})}e.Literal=r,e.Undefined=r(void 0),e.Null=r(null)},4913:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Never=void 0;var o=i(1732);e.Never=o.create((function(t){return{success:!1,message:"Expected nothing, but was "+(null===t?t:typeof t)}}),{tag:"never"})},1257:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Number=void 0;var o=i(1732);e.Number=o.create((function(t){return"number"==typeof t?{success:!0,value:t}:{success:!1,message:"Expected number, but was "+(null===t?t:typeof t)}}),{tag:"number"})},9695:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Partial=e.Record=e.InternalRecord=void 0;var o=i(1732),s=i(5611),r=i(8233);function n(t,e,i){return(a=o.create((function(i,n){if(null==i){var a=o.create((function(t){return{success:!0,value:t}}),{tag:"record",fields:t});return{success:!1,message:"Expected "+r.default(a)+", but was "+i}}for(var m in t)if(!e||s.hasKey(m,i)&&void 0!==i[m]){var h=e||s.hasKey(m,i)?i[m]:void 0,c=o.innerValidate(t[m],h,n);if(!c.success)return{success:!1,message:c.message,key:c.key?m+"."+c.key:m}}return{success:!0,value:i}}),{tag:"record",isPartial:e,isReadonly:i,fields:t})).asPartial=function(){return n(a.fields,!0,a.isReadonly)},a.asReadonly=function(){return n(a.fields,a.isPartial,!0)},a;var a}e.InternalRecord=n,e.Record=function(t){return n(t,!1,!1)},e.Partial=function(t){return n(t,!0,!1)}},4304:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.String=void 0;var o=i(1732);e.String=o.create((function(t){return"string"==typeof t?{success:!0,value:t}:{success:!1,message:"Expected string, but was "+(null===t?t:typeof t)}}),{tag:"string"})},7333:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Symbol=void 0;var o=i(1732).create((function(t){return"symbol"==typeof t?{success:!0,value:t}:{success:!1,message:"Expected symbol, but was "+(null===t?t:typeof t)}}),{tag:"symbol"});e.Symbol=o},4226:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Tuple=void 0;var o=i(1732),s=i(6380),r=i(2101);e.Tuple=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.create((function(e,i){var n=o.innerValidate(s.Array(r.Unknown),e,i);if(!n.success)return{success:!1,message:"Expected tuple to be an array: "+n.message,key:n.key};if(n.value.length!==t.length)return{success:!1,message:"Expected an array of length "+t.length+", but was "+n.value.length};for(var a=0;a<t.length;a++){var m=o.innerValidate(t[a],n.value[a],i);if(!m.success)return{success:!1,message:m.message,key:m.key?"["+a+"]."+m.key:"["+a+"]"}}return{success:!0,value:e}}),{tag:"tuple",components:t})}},3036:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Union=void 0;var o=i(1732),s=i(8233),r=i(5611);e.Union=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];return function(i){for(var o=0;o<t.length;o++)if(t[o].guard(i))return e[o](i)}};return o.create((function(e,i){for(var n={},a=0,m=t;a<m.length;a++)if("record"===(_=m[a]).reflect.tag){var h=function(t){var e=_.reflect.fields[t];"literal"===e.tag&&(n[t]?n[t].every((function(t){return t!==e.value}))&&n[t].push(e.value):n[t]=[e.value])};for(var c in _.reflect.fields)h(c)}for(var c in n)if(n[c].length===t.length)for(var l=0,u=t;l<u.length;l++){var _;if("record"===(_=u[l]).reflect.tag){var p=_.reflect.fields[c];if("literal"===p.tag&&r.hasKey(c,e)&&e[c]===p.value)return o.innerValidate(_,e,i)}}for(var d=0,y=t;d<y.length;d++){var f=y[d];if(o.innerValidate(f,e,i).success)return{success:!0,value:e}}var v=o.create(e,{tag:"union",alternatives:t});return{success:!1,message:"Expected "+s.default(v)+", but was "+(null===e?e:typeof e)}}),{tag:"union",alternatives:t,match:i})}},2101:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Unknown=void 0;var o=i(1732);e.Unknown=o.create((function(t){return{success:!0,value:t}}),{tag:"unknown"})},6203:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Void=void 0;var o=i(2101);e.Void=o.Unknown},5611:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasKey=void 0,e.hasKey=function(t,e){return"object"==typeof e&&t in e}}},e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o].call(s.exports,s,s.exports,i),s.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};function e(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}function o(t,e,i,o){return new(i||(i=Promise))((function(s,r){function n(t){try{m(o.next(t))}catch(t){r(t)}}function a(t){try{m(o.throw(t))}catch(t){r(t)}}function m(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,a)}m((o=o.apply(t,e||[])).next())}))}function s(t,e){var i,o,s,r,n={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;n;)try{if(i=1,o&&(s=2&r[0]?o.return:r[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,r[1])).done)return s;switch(o=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return n.label++,{value:r[1],done:!1};case 5:n.label++,o=r[1],r=[0];continue;case 7:r=n.ops.pop(),n.trys.pop();continue;default:if(!((s=(s=n.trys).length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){n=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){n.label=r[1];break}if(6===r[0]&&n.label<s[1]){n.label=s[1],s=r;break}if(s&&n.label<s[2]){n.label=s[2],n.ops.push(r);break}s[2]&&n.ops.pop(),n.trys.pop();continue}r=e.call(t,n)}catch(t){r=[6,t],o=0}finally{i=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],o=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function n(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var o,s,r=i.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(o=r.next()).done;)n.push(o.value)}catch(t){s={error:t}}finally{try{o&&!o.done&&(i=r.return)&&i.call(r)}finally{if(s)throw s.error}}return n}function a(t){return{src:t}}Object.create,Object.create;var m=function(){function t(){this.images=new Map}return t.prototype.load=function(t){return o(this,void 0,void 0,(function(){var e=this;return s(this,(function(i){switch(i.label){case 0:return[4,Promise.all(Object.keys(t).map((function(e){return[e,t[e]]})).map((function(t){var i=n(t,2),o=i[0],s=i[1];return e.loadImage(s.src.replace(/^\//,"./")).then((function(t){return[o,t,s]}))})))];case 1:return[2,i.sent().reduce((function(t,e){var i=n(e,3),o=i[0],s=i[1];return i[2],t[o]=s,t}),{})]}}))}))},t.prototype.loadImage=function(t){var e=this.images.get(t);if(e)return e;var i=new Promise((function(e,i){var o=new Image;o.onload=function(){e(o)},o.onerror=i,o.src=t}));return this.images.set(t,i),i},t}(),h={wallFull:a("/static/spritesheet-1.png"),box:a("/static/tiles-pack-1/Box.png"),barrel:a("/static/tiles-pack-1/Barrel (1).png"),background:a("/static/level1.png"),foreground:a("/static/level1_fg.png"),characterIdle:a("/static/idle.png"),characterRun:a("/static/run.png"),characterJump:a("/static/jump.png"),characterGun:a("/static/gun.png")},c=function(t,e,i,o){this.physics=t,this.graphics=e,this.events=i,this.assets=o},l=function(){function t(){this.listeners=new Map}return t.prototype.on=function(t,e){var i;(null!==(i=this.listeners.get(t))&&void 0!==i?i:this.createBucket(t)).push(e)},t.prototype.emit=function(t){var e=this.listeners.get(t.type);null!=e&&e.forEach((function(e){return e(t)}))},t.prototype.createBucket=function(t){var e=[];return this.listeners.set(t,e),e},t}(),u={type:"before-physics",data:void 0},_={type:"after-physics",data:void 0},p={type:"before-render",data:void 0},d={type:"after-render",data:void 0},y=function(){function t(t){var e=this;this.context=t,this._running=!1,this._animFrame=null,this.lastTime=0,this.stoppedInBackground=!1,this.onVisibilityChange=function(){document.hidden&&e._running?(e.stop(),e.stoppedInBackground=!0):!document.hidden&&e.stoppedInBackground&&(e.start(),e.stoppedInBackground=!1)},this.step=function(){e._animFrame=null;var t=Date.now(),i=t-e.lastTime;e.lastTime=t,e.context.events.emit(u),e.context.physics.step(i),e.context.events.emit(_),e.context.events.emit(p),e.context.graphics.draw(),e.context.events.emit(d),e.scheduleNext()},document.addEventListener("visibilitychange",this.onVisibilityChange)}return t.prototype.start=function(){this._running||(document.hidden?this.stoppedInBackground=!0:(this._running=!0,this.lastTime=Date.now(),this.scheduleNext()))},t.prototype.stop=function(){null!=this._animFrame&&(console.log("Stopping"),cancelAnimationFrame(this._animFrame),this._animFrame=null,this._running=!1)},t.prototype.scheduleNext=function(){this._running&&null==this._animFrame&&(this._animFrame=requestAnimationFrame(this.step))},t}(),f=1e-6,v="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;function x(){var t=new v(16);return v!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function A(t,e,i){var o,s,r,n,a,m,h,c,l,u,_,p,d=i[0],y=i[1],f=i[2];return e===t?(t[12]=e[0]*d+e[4]*y+e[8]*f+e[12],t[13]=e[1]*d+e[5]*y+e[9]*f+e[13],t[14]=e[2]*d+e[6]*y+e[10]*f+e[14],t[15]=e[3]*d+e[7]*y+e[11]*f+e[15]):(o=e[0],s=e[1],r=e[2],n=e[3],a=e[4],m=e[5],h=e[6],c=e[7],l=e[8],u=e[9],_=e[10],p=e[11],t[0]=o,t[1]=s,t[2]=r,t[3]=n,t[4]=a,t[5]=m,t[6]=h,t[7]=c,t[8]=l,t[9]=u,t[10]=_,t[11]=p,t[12]=o*d+a*y+l*f+e[12],t[13]=s*d+m*y+u*f+e[13],t[14]=r*d+h*y+_*f+e[14],t[15]=n*d+c*y+p*f+e[15]),t}function b(t,e,i){var o=i[0],s=i[1],r=i[2];return t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t[3]=e[3]*o,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function B(t,e,i,o,s,r,n){var a=1/(e-i),m=1/(o-s),h=1/(r-n);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*m,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+i)*a,t[13]=(s+o)*m,t[14]=(n+r)*h,t[15]=1,t}Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var w=function(t,e,i){var o=e[0],s=e[1],r=e[2],n=e[3],a=e[4],m=e[5],h=e[6],c=e[7],l=e[8],u=e[9],_=e[10],p=e[11],d=e[12],y=e[13],f=e[14],v=e[15],g=i[0],x=i[1],A=i[2],b=i[3];return t[0]=g*o+x*a+A*l+b*d,t[1]=g*s+x*m+A*u+b*y,t[2]=g*r+x*h+A*_+b*f,t[3]=g*n+x*c+A*p+b*v,g=i[4],x=i[5],A=i[6],b=i[7],t[4]=g*o+x*a+A*l+b*d,t[5]=g*s+x*m+A*u+b*y,t[6]=g*r+x*h+A*_+b*f,t[7]=g*n+x*c+A*p+b*v,g=i[8],x=i[9],A=i[10],b=i[11],t[8]=g*o+x*a+A*l+b*d,t[9]=g*s+x*m+A*u+b*y,t[10]=g*r+x*h+A*_+b*f,t[11]=g*n+x*c+A*p+b*v,g=i[12],x=i[13],A=i[14],b=i[15],t[12]=g*o+x*a+A*l+b*d,t[13]=g*s+x*m+A*u+b*y,t[14]=g*r+x*h+A*_+b*f,t[15]=g*n+x*c+A*p+b*v,t};function S(){var t=new v(9);return v!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function C(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function T(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function M(t,e,i){var o=e[0],s=e[1],r=e[2],n=e[3],a=e[4],m=e[5],h=e[6],c=e[7],l=e[8],u=i[0],_=i[1],p=i[2],d=i[3],y=i[4],f=i[5],v=i[6],g=i[7],x=i[8];return t[0]=u*o+_*n+p*h,t[1]=u*s+_*a+p*c,t[2]=u*r+_*m+p*l,t[3]=d*o+y*n+f*h,t[4]=d*s+y*a+f*c,t[5]=d*r+y*m+f*l,t[6]=v*o+g*n+x*h,t[7]=v*s+g*a+x*c,t[8]=v*r+g*m+x*l,t}function P(t,e,i){var o=e[0],s=e[1],r=e[2],n=e[3],a=e[4],m=e[5],h=e[6],c=e[7],l=e[8],u=i[0],_=i[1];return t[0]=o,t[1]=s,t[2]=r,t[3]=n,t[4]=a,t[5]=m,t[6]=u*o+_*n+h,t[7]=u*s+_*a+c,t[8]=u*r+_*m+l,t}function E(t,e,i){var o=e[0],s=e[1],r=e[2],n=e[3],a=e[4],m=e[5],h=e[6],c=e[7],l=e[8],u=Math.sin(i),_=Math.cos(i);return t[0]=_*o+u*n,t[1]=_*s+u*a,t[2]=_*r+u*m,t[3]=_*n-u*o,t[4]=_*a-u*s,t[5]=_*m-u*r,t[6]=h,t[7]=c,t[8]=l,t}function I(t,e,i){var o=i[0],s=i[1];return t[0]=o*e[0],t[1]=o*e[1],t[2]=o*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}var V=M;function z(){var t=new v(2);return v!=Float32Array&&(t[0]=0,t[1]=0),t}function F(t,e){var i=new v(2);return i[0]=t,i[1]=e,i}function R(t,e,i){return t[0]=e,t[1]=i,t}var L,D=function(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t};function k(){var t=new v(3);return v!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function q(t,e,i){var o=new v(3);return o[0]=t,o[1]=e,o[2]=i,o}function U(t,e){e=e||1;var i=2*g()*Math.PI,o=2*g()-1,s=Math.sqrt(1-o*o)*e;return t[0]=Math.cos(i)*s,t[1]=Math.sin(i)*s,t[2]=o*e,t}function O(t,e,i,o){var s=new v(4);return s[0]=t,s[1]=e,s[2]=i,s[3]=o,s}z(),k(),L=new v(4),v!=Float32Array&&(L[0]=0,L[1]=0,L[2]=0,L[3]=0);var j=function(){function t(){}return Object.defineProperty(t,"isMirror",{get:function(){return e=t.portal1Normal,i=t.portal2Normal,e[0]*i[0]+e[1]*i[1]>.1;var e,i},enumerable:!1,configurable:!0}),t.playerPos=z(),t.playerTransform=S(),t.portal1Position=z(),t.portal1Normal=z(),t.portal2Position=z(),t.portal2Normal=z(),t}(),N=O(1/256,246/256,242/256,1),Y=O(245/256,249/256,4/256,1);function G(t,e,i){var o=W(t,t.VERTEX_SHADER,e),s=W(t,t.FRAGMENT_SHADER,i),r=t.createProgram();if(null==r)throw new Error("Cant initialize shader");if(t.attachShader(r,o),t.attachShader(r,s),t.linkProgram(r),!t.getProgramParameter(r,t.LINK_STATUS))throw new Error("Unable to initialize the shader program: "+t.getProgramInfoLog(r));return r}function W(t,e,i){var o=t.createShader(e);if(null==o)throw new Error("Failed to create shader");if(t.shaderSource(o,i),t.compileShader(o),!t.getShaderParameter(o,t.COMPILE_STATUS)){var s=t.getShaderInfoLog(o);throw t.deleteShader(o),new Error(String(s))}return o}var X=z();function J(t,e){var i=e.getPosition();return T(t),P(t,t,R(X,i.x,i.y)),E(t,t,e.getAngle()),t}function Z(t,e){return function(t,e,i,o,s,r,n,a,m,h,c,l,u,_,p,d,y){t[0]=e,t[1]=i,t[2]=0,t[3]=s,t[4]=r,t[5]=n,t[6]=0,t[7]=m,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=_,t[13]=p,t[14]=0,t[15]=y}(t,e[0],e[1],0,e[2],e[3],e[4],0,e[5],0,0,0,0,e[6],e[7],0,e[8]),t}function H(t,e,i){var o=t.getUniformLocation(e,i);if(null==o)throw new Error('Failed to get uniform location for "'+i+'"');return o}var K=20,Q=function(){function t(t,e,i){this.gl=t,this.buffer=e,this.texture=i,this.pvMatrix=x(),this.transform=S(),this.angle=0}return t.prototype.resetTransform=function(){T(this.transform),this.angle=0},t.prototype.translate=function(t,e){P(this.transform,this.transform,F(t,e))},t.prototype.getAngle=function(){return this.angle},t.prototype.rotate=function(t){this.angle=t,E(this.transform,this.transform,t)},t}(),$=function(){function t(){this.displayMatrix=S(),this.width=0,this.height=0,this.pixelRatio=1,this.sprites=[],this.pvMatrix=x(),this.cameras=[],this.perlinNoise=this.createPerlinNoise(),this.el=document.createElement("canvas"),this.el.addEventListener("contextmenu",(function(t){return t.preventDefault()}));var t=this.el.getContext("webgl");if(null==t)throw new Error("Canvas not supported in this browser");this.gl=t,document.getElementById("app").append(this.el),this.resizeCanvasToDisplaySize();var e=G(t,i(6374).Z,i(1169).Z);this.programInfo={program:e,attribLocations:{vertexPosition:t.getAttribLocation(e,"aVertexPosition"),screenPosition:t.getAttribLocation(e,"aScreenPosition")},uniformLocations:{uSampler:t.getUniformLocation(e,"uSampler"),uSecondCamera:t.getUniformLocation(e,"uSecondaryCamera"),uThirdCamera:t.getUniformLocation(e,"uThirdCamera"),portal1Origin:t.getUniformLocation(e,"uPortal1Origin"),portal1Normal:t.getUniformLocation(e,"uPortal1Normal"),portal2Origin:t.getUniformLocation(e,"uPortal2Origin"),portal2Normal:t.getUniformLocation(e,"uPortal2Normal"),uScreenSize:t.getUniformLocation(e,"uScreenSize"),uViewMatrix:t.getUniformLocation(e,"uViewMatrix"),uTime:t.getUniformLocation(e,"uTime"),uPerlinNoise:t.getUniformLocation(e,"uPerlinNoise"),uCharacterPos:t.getUniformLocation(e,"uCharacterPos")}};var o=t.createBuffer();if(null==o)throw new Error("Cant create position buffer");t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),t.STATIC_DRAW),this.buffers={position:o},this.perlinTexture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this.perlinTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,64,64,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array(this.perlinNoise.buffer))}return t.prototype.createPerlinNoise=function(){for(var t=k(),e=new Uint32Array(4096),i=0;i<4096;i++)U(t),e[i]=((128*t[0]+128&255)<<0)+((128*t[1]+128&255)<<8)+((128*t[2]+128&255)<<16);return e},t.prototype.addSprite=function(t){var e,i=null!==(e=t.zIndex)&&void 0!==e?e:1;if(this.sprites.length<=i)for(var o=this.sprites.length;o<=i;o++)this.sprites[o]=[];this.sprites[i].push(t)},t.prototype.removeSprite=function(t){var e,i=null!==(e=t.zIndex)&&void 0!==e?e:1,o=this.sprites[i];if(o){var s=o.indexOf(t);s>=0&&o.splice(s,1)}},t.prototype.mapToWorldCoordinates=function(t,e){var i=this.el.parentElement.getBoundingClientRect();t-=i.x,e-=i.y;var o,s,r,n,a,m,h,c,l,u,_,p,d,y,f,v=M(S(),this.displayMatrix,this.cameras[0].transform);o=v,r=(s=v)[0],n=s[1],a=s[2],m=s[3],h=s[4],c=s[5],l=s[6],u=s[7],(f=r*(p=(_=s[8])*h-c*u)+n*(d=-_*m+c*l)+a*(y=u*m-h*l))&&(f=1/f,o[0]=p*f,o[1]=(-_*n+a*u)*f,o[2]=(c*n-a*h)*f,o[3]=d*f,o[4]=(_*r-a*l)*f,o[5]=(-c*r+a*m)*f,o[6]=y*f,o[7]=(-u*r+n*l)*f,o[8]=(h*r-n*m)*f);var g=F(t,e);return function(t,e,i){t[0]=e[0]*i,t[1]=e[1]*i}(g,g,this.pixelRatio),function(t,e,i){var o=e[0],s=e[1];return t[0]=i[0]*o+i[3]*s+i[6],t[1]=i[1]*o+i[4]*s+i[7],t}(g,g,v)},t.prototype.createCamera=function(){var t=this.gl,e=t.createFramebuffer(),i=t.createTexture();if(null==e||null==i)throw new Error("Could not create render buffer or texture.");t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,this.width,this.height,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.bindFramebuffer(t.FRAMEBUFFER,e),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,i,0);var o=new Q(this.gl,e,i);return this.cameras.push(o),o},t.prototype.draw=function(){var t,e;this.resizeCanvasToDisplaySize();try{for(var i=r(this.cameras),o=i.next();!o.done;o=i.next()){var s=o.value;this.render(s)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}var a=this.gl;a.bindFramebuffer(a.FRAMEBUFFER,null),a.bindRenderbuffer(a.RENDERBUFFER,null),a.clearDepth(1),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),B(x(),-1,1,-1,1,.1,100);var m=x();A(m,m,[0,0,-2]);var h=a.FLOAT,c=0;a.bindBuffer(a.ARRAY_BUFFER,this.buffers.position),a.vertexAttribPointer(this.programInfo.attribLocations.vertexPosition,2,h,!1,0,c),a.enableVertexAttribArray(this.programInfo.attribLocations.vertexPosition),a.useProgram(this.programInfo.program);var l=n(this.cameras,3),u=l[0],_=l[1],p=l[2];a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,u.texture),a.uniform1i(this.programInfo.uniformLocations.uSecondCamera,0),_&&(a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,_.texture),a.uniform1i(this.programInfo.uniformLocations.uSecondCamera,1)),p&&(a.activeTexture(a.TEXTURE2),a.bindTexture(a.TEXTURE_2D,p.texture),a.uniform1i(this.programInfo.uniformLocations.uThirdCamera,2)),a.uniform2f(this.programInfo.uniformLocations.portal1Normal,j.portal1Normal[0],j.portal1Normal[1]),a.uniform2f(this.programInfo.uniformLocations.portal1Origin,j.portal1Position[0],j.portal1Position[1]),a.uniform2f(this.programInfo.uniformLocations.portal2Normal,j.portal2Normal[0],j.portal2Normal[1]),a.uniform2f(this.programInfo.uniformLocations.portal2Origin,j.portal2Position[0],j.portal2Position[1]),a.uniform1f(this.programInfo.uniformLocations.uTime,Date.now()%16e3),a.uniform2f(this.programInfo.uniformLocations.uCharacterPos,j.playerPos[0],j.playerPos[1]),a.activeTexture(a.TEXTURE3),a.bindTexture(a.TEXTURE_2D,this.perlinTexture),a.uniform1i(this.programInfo.uniformLocations.uPerlinNoise,3);var d,y,f,v,g,b,w,S,C,T,M,P,E,I,V,z,F,R,L,D,k,q,U,O,N,Y,G,W,X,J,Z,H=x();if(d=H,f=(y=u.pvMatrix)[0],v=y[1],g=y[2],b=y[3],w=y[4],S=y[5],C=y[6],T=y[7],M=y[8],P=y[9],E=y[10],I=y[11],V=y[12],z=y[13],F=y[14],!(Z=(L=f*S-v*w)*(J=E*(R=y[15])-I*F)-(D=f*C-g*w)*(X=P*R-I*z)+(k=f*T-b*w)*(W=P*F-E*z)+(q=v*C-g*S)*(G=M*R-I*V)-(U=v*T-b*S)*(Y=M*F-E*V)+(O=g*T-b*C)*(N=M*z-P*V))||(Z=1/Z,d[0]=(S*J-C*X+T*W)*Z,d[1]=(g*X-v*J-b*W)*Z,d[2]=(z*O-F*U+R*q)*Z,d[3]=(E*U-P*O-I*q)*Z,d[4]=(C*G-w*J-T*Y)*Z,d[5]=(f*J-g*G+b*Y)*Z,d[6]=(F*k-V*O-R*D)*Z,d[7]=(M*O-E*k+I*D)*Z,d[8]=(w*X-S*G+T*N)*Z,d[9]=(v*G-f*X-b*N)*Z,d[10]=(V*U-z*k+R*L)*Z,d[11]=(P*k-M*U-I*L)*Z,d[12]=(S*Y-w*W-C*N)*Z,d[13]=(f*W-v*Y+g*N)*Z,d[14]=(z*D-V*q-F*L)*Z,d[15]=(M*q-P*D+E*L)*Z,!d))throw new Error("Cant inverse matrix");a.uniformMatrix4fv(this.programInfo.uniformLocations.uViewMatrix,!1,H),a.uniform2f(this.programInfo.uniformLocations.uScreenSize,this.width,this.height),c=0,a.drawArrays(a.TRIANGLE_STRIP,c,4)},t.prototype.render=function(t){var e,i,o,s,n=t.transform,a=S();this.width/K<this.height/9?(I(a,a,F(.05,1/(this.height/this.width*K))),P(a,a,F(0,(this.height/this.width*K-9)/2))):(I(a,a,F(1/(this.width/this.height*9),1/9)),P(a,a,F((this.width/this.height*9-K)/2,0))),V(a,a,n);var m=x();B(m,-.5,.5,-.5,.5,.1,100);var h,c,l,u,_,p,d,y,g,A,b=x();!function(t,e,i,o){var s,r,n,a,m,h,c,l,u,_,p=e[0],d=e[1],y=e[2],v=o[0],g=o[1],x=o[2],A=i[0],b=i[1],B=i[2];Math.abs(p-A)<f&&Math.abs(d-b)<f&&Math.abs(y-B)<f?function(t){t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1}(t):(c=p-A,l=d-b,u=y-B,s=g*(u*=_=1/Math.hypot(c,l,u))-x*(l*=_),r=x*(c*=_)-v*u,n=v*l-g*c,(_=Math.hypot(s,r,n))?(s*=_=1/_,r*=_,n*=_):(s=0,r=0,n=0),a=l*n-u*r,m=u*s-c*n,h=c*r-l*s,(_=Math.hypot(a,m,h))?(a*=_=1/_,m*=_,h*=_):(a=0,m=0,h=0),t[0]=s,t[1]=a,t[2]=c,t[3]=0,t[4]=r,t[5]=m,t[6]=l,t[7]=0,t[8]=n,t[9]=h,t[10]=u,t[11]=0,t[12]=-(s*p+r*d+n*y),t[13]=-(a*p+m*d+h*y),t[14]=-(c*p+l*d+u*y),t[15]=1)}(b,q(.5,.5,-1),q(.5,.5,0),q(0,-1,0)),w(b,b,(h=a[0],c=a[1],0,l=a[2],u=a[3],_=a[4],0,p=a[5],0,0,1,0,d=a[6],y=a[7],0,g=a[8],(A=new v(16))[0]=h,A[1]=c,A[2]=0,A[3]=l,A[4]=u,A[5]=_,A[6]=0,A[7]=p,A[8]=0,A[9]=0,A[10]=1,A[11]=0,A[12]=d,A[13]=y,A[14]=0,A[15]=g,A)),w(this.pvMatrix,m,b),function(t,e){t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(t.pvMatrix,this.pvMatrix);var C=this.gl;C.bindFramebuffer(C.FRAMEBUFFER,t.buffer),C.clearColor(0,0,0,1),C.disable(C.DEPTH_TEST),C.enable(C.BLEND),C.blendFunc(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA),C.clear(C.COLOR_BUFFER_BIT|C.DEPTH_BUFFER_BIT),C.clearDepth(1);try{for(var T=r(this.sprites),M=T.next();!M.done;M=T.next()){var E=M.value;try{for(var z=(o=void 0,r(E)),R=z.next();!R.done;R=z.next())R.value.draw()}catch(t){o={error:t}}finally{try{R&&!R.done&&(s=z.return)&&s.call(z)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{M&&!M.done&&(i=T.return)&&i.call(T)}finally{if(e)throw e.error}}},t.prototype.resizeCanvasToDisplaySize=function(){var t=this.gl,e=this.el.getBoundingClientRect();if(this.pixelRatio=window.devicePixelRatio,this.width=e.width*this.pixelRatio,this.height=e.height*this.pixelRatio,t.canvas.width!=this.width||t.canvas.height!=this.height){this.el.style.transformOrigin="0 0",t.canvas.width=this.width,t.canvas.height=this.height,t.viewport(0,0,this.width,this.height);var i=this.width/K,o=this.height/9;T(this.displayMatrix),i<o?(P(this.displayMatrix,this.displayMatrix,F(0,(this.height-9*i)/2)),I(this.displayMatrix,this.displayMatrix,F(i,i))):(P(this.displayMatrix,this.displayMatrix,F((this.width-K*o)/2,0)),I(this.displayMatrix,this.displayMatrix,F(o,o)))}},t}(),tt=i(5529),et=tt.Record({x:tt.Number,y:tt.Number,sX:tt.Number,sY:tt.Number,a:tt.Number}),it=tt.Intersect(tt.Record({name:tt.String,src:tt.String,transform:et}),tt.Partial({background:tt.Boolean})),ot=tt.Record({x:tt.Number,y:tt.Number}),st=tt.Record({name:tt.String,vertices:tt.Array(ot)}),rt=tt.Record({sprites:tt.Array(it),geometries:tt.Array(st),name:tt.String,transform:et}),nt=tt.Record({version:tt.Literal(2),objects:tt.Array(rt)}),at=tt.Union(nt),mt=function(){function t(t,e,i,o,s,r){var n,a,m,h,c,l,u;this.graphics=t,this.spriteSheet=e,this.width=i,this.height=o,this.frames=s,this.startTime=Date.now(),this.transform=T(S()),this.modelTransform=T(S()),0===s.length&&(this.frames=[{x:0,y:0,w:e.width,h:e.height}]),this.zIndex=null!==(n=null==r?void 0:r.zIndex)&&void 0!==n?n:0,this.animationFPS=null!==(a=null==r?void 0:r.animationFPS)&&void 0!==a?a:60,this.oneShot=null!==(m=null==r?void 0:r.oneShot)&&void 0!==m&&m,this.offset=q(null!==(c=null===(h=null==r?void 0:r.offset)||void 0===h?void 0:h[0])&&void 0!==c?c:0,null!==(u=null===(l=null==r?void 0:r.offset)||void 0===l?void 0:l[1])&&void 0!==u?u:0,0);var _=t.gl;this.initStatic(_);var p=_.createTexture();if(null==p)throw new Error("Failed to create texture");this.texture=p,_.bindTexture(_.TEXTURE_2D,p),_.texParameteri(_.TEXTURE_2D,_.TEXTURE_WRAP_S,_.CLAMP_TO_EDGE),_.texParameteri(_.TEXTURE_2D,_.TEXTURE_WRAP_T,_.CLAMP_TO_EDGE),_.texParameteri(_.TEXTURE_2D,_.TEXTURE_MIN_FILTER,_.LINEAR),_.texImage2D(_.TEXTURE_2D,0,_.RGBA,_.RGBA,_.UNSIGNED_BYTE,e)}return t.prototype.initStatic=function(e){if(!t.initialized){var o=e.createBuffer();if(null==o)throw new Error("Cant create position buffer");e.bindBuffer(e.ARRAY_BUFFER,o),t.vertexData=new Float32Array([-1,1,0,1,1,1,1,1,-1,-1,0,0,1,-1,1,0]),e.bufferData(e.ARRAY_BUFFER,t.vertexData,e.STATIC_DRAW),t.modelMatrix=x(),t.positions=o,t.program=G(e,i(2761).Z,i(8029).Z),t.modelMatrixUniform=H(e,t.program,"uModel"),t.pvMatrixUniform=H(e,t.program,"uPV"),t.positionAttribute=e.getAttribLocation(t.program,"aVertexPosition"),t.uvAttribute=e.getAttribLocation(t.program,"aUV"),t.initialized=!0}},t.prototype.resetAnimation=function(){this.startTime=Date.now()},t.prototype.draw=function(){var e=Math.round((Date.now()-this.startTime)*this.animationFPS/1e3),i=this.oneShot?Math.min(e,this.frames.length-1):e%this.frames.length,o=this.frames[i],s=o.y/this.spriteSheet.height,r=(o.y+o.h)/this.spriteSheet.height,n=o.x/this.spriteSheet.width,a=(o.x+o.w)/this.spriteSheet.width;t.vertexData[2]=n,t.vertexData[3]=r,t.vertexData[6]=a,t.vertexData[7]=r,t.vertexData[10]=n,t.vertexData[11]=s,t.vertexData[14]=a,t.vertexData[15]=s;var m=this.graphics.gl;m.useProgram(t.program),m.bindBuffer(m.ARRAY_BUFFER,t.positions),m.bufferData(m.ARRAY_BUFFER,t.vertexData,m.STATIC_DRAW);var h=4*Float32Array.BYTES_PER_ELEMENT;m.vertexAttribPointer(t.positionAttribute,2,m.FLOAT,!1,h,0),m.enableVertexAttribArray(t.positionAttribute),m.vertexAttribPointer(t.uvAttribute,2,m.FLOAT,!1,h,2*Float32Array.BYTES_PER_ELEMENT),m.enableVertexAttribArray(t.uvAttribute),Z(t.modelMatrix,V(t.tmp3,this.modelTransform,this.transform)),A(t.modelMatrix,t.modelMatrix,this.offset),b(t.modelMatrix,t.modelMatrix,q(this.width/2,this.height/2,1)),m.uniformMatrix4fv(t.modelMatrixUniform,!1,t.modelMatrix),m.uniformMatrix4fv(t.pvMatrixUniform,!1,this.graphics.pvMatrix),m.activeTexture(m.TEXTURE0),m.bindTexture(m.TEXTURE_2D,this.texture),m.drawArrays(m.TRIANGLE_STRIP,0,4)},t.initialized=!1,t.tmp3=S(),t}(),ht=i(3875),ct=function(){function t(t){this.context=t}return t.prototype.createObject=function(t,e){var i=new t(this.context);return i.init(e),i},t.prototype.on=function(t,e){this.context.events.on(t,e)},t.prototype.init=function(t){},t}(),lt=function(){function t(t,e,i,o,s){this.gl=t,this.graphics=e,this.width=i,this.height=o,this.color=s,this.modelTransform=T(S()),this.initStatic(t)}return t.prototype.initStatic=function(e){if(!t.initialized){var o=e.createBuffer();if(null==o)throw new Error("Cant create position buffer");e.bindBuffer(e.ARRAY_BUFFER,o);var s=new Float32Array([-1,1,1,1,-1,-1,1,-1]);e.bufferData(e.ARRAY_BUFFER,s,e.STATIC_DRAW),t.modelMatrix=x(),t.positions=o,t.program=G(e,i(2303).Z,i(1170).Z),t.colorUniform=H(e,t.program,"uColor"),t.modelMatrixUniform=H(e,t.program,"uModel"),t.pvMatrixUniform=H(e,t.program,"uPV"),t.positionAttribute=e.getAttribLocation(t.program,"aVertexPosition"),t.initialized=!0}},t.prototype.draw=function(){var e=this.gl;e.useProgram(t.program),e.bindBuffer(e.ARRAY_BUFFER,t.positions),e.vertexAttribPointer(t.positionAttribute,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t.positionAttribute),Z(t.modelMatrix,this.modelTransform),b(t.modelMatrix,t.modelMatrix,q(this.width/2,this.height/2,1)),e.uniformMatrix4fv(t.modelMatrixUniform,!1,t.modelMatrix),e.uniformMatrix4fv(t.pvMatrixUniform,!1,this.graphics.pvMatrix),e.uniform4fv(t.colorUniform,this.color),e.drawArrays(e.TRIANGLE_STRIP,0,4)},t.initialized=!1,t}();function ut(t){return"object"==typeof t&&null!=t&&"portalSurrogate"in t}var _t=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.zIndex=2,e.portalingBodies=new Map,e.portalingToRemove=[],e.modelTransform=S(),e.cleanup=function(){var t,i,o,s;try{for(var a=r(e.portalingToRemove),m=a.next();!m.done;m=a.next()){var h=m.value,c=e.portalingBodies.get(h);console.log("removing"),c&&c.count<=0&&e.portalingBodies.delete(h)}}catch(e){t={error:e}}finally{try{m&&!m.done&&(i=a.return)&&i.call(a)}finally{if(t)throw t.error}}e.portalingToRemove.length=0;try{for(var l=r(e.portalingBodies),u=l.next();!u.done;u=l.next()){var _=n(u.value,2);if(h=_[0],_[1].count<=0){var p=h.getUserData(),d=p.portalSurrogate;null!=d&&(p.portalSurrogate=null,e.context.physics.world.destroyBody(d.body),e.context.graphics.removeSprite(d.sprite)),e.portalingToRemove.push(h)}}}catch(t){o={error:t}}finally{try{u&&!u.done&&(s=l.return)&&s.call(l)}finally{if(o)throw o.error}}},e.update=function(){var t,i,o;try{for(var s=r(e.portalingBodies),a=s.next();!a.done;a=s.next()){var m=n(a.value,2),h=m[0],c=m[1],l=c.portal,u=e.portal1===l?e.portal2:e.portal1;if(null==u)return;var _=e.solveTeleportation(h.getPosition(),h.getLinearVelocity(),h.getAngle(),h.getAngularVelocity(),l,u),p=h.getUserData();if(null==p.portalSurrogate&&(p.portalSurrogate=e.createSurrogate(p)),_.primaryDisplacement<0){null===(o=p.onPortal)||void 0===o||o.call(p);for(var d=h.getJointList();null!=d;){var y=d.other,f=e.solveTeleportation(y.getPosition(),y.getLinearVelocity(),y.getAngle(),y.getAngularVelocity(),l,u);e.teleportBody(y,f.pos,f.velocity,f.rotation,f.angularVelocity),d=d.next}e.teleportBody(p.portalSurrogate.body,h.getPosition().clone(),h.getLinearVelocity().clone(),h.getAngle(),h.getAngularVelocity()),e.teleportBody(h,_.pos,_.velocity,_.rotation,_.angularVelocity),c.portal=1===c.portal.index?e.portal2:e.portal1,c.count=0}else e.teleportBody(p.portalSurrogate.body,_.pos,_.velocity,_.rotation,_.angularVelocity)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(t)throw t.error}}},e.updateCameras=function(){e.portal1&&e.portal2&&(e.updatePortalCamera(e.portal1.camera,e.portal2,e.portal1),e.updatePortalCamera(e.portal2.camera,e.portal1,e.portal2))},e}return e(i,t),i.prototype.init=function(){var t=this;this.context.graphics.addSprite(this),this.context.physics.world.on("begin-contact",(function(e){var i,o,s,r;"portal"===e.getFixtureA().getUserData()&&e.getFixtureA().getBody()===(null===(i=t.portal1)||void 0===i?void 0:i.body)?t.startPortal(e.getFixtureB().getBody(),t.portal1):"portal"===e.getFixtureA().getUserData()&&e.getFixtureA().getBody()===(null===(o=t.portal2)||void 0===o?void 0:o.body)?t.startPortal(e.getFixtureB().getBody(),t.portal2):"portal"===e.getFixtureB().getUserData()&&e.getFixtureB().getBody()===(null===(s=t.portal1)||void 0===s?void 0:s.body)?t.startPortal(e.getFixtureA().getBody(),t.portal1):"portal"===e.getFixtureB().getUserData()&&e.getFixtureB().getBody()===(null===(r=t.portal2)||void 0===r?void 0:r.body)&&t.startPortal(e.getFixtureA().getBody(),t.portal2)})),this.context.physics.world.on("end-contact",(function(e){var i,o,s,r;"portal"===e.getFixtureA().getUserData()&&e.getFixtureA().getBody()===(null===(i=t.portal1)||void 0===i?void 0:i.body)?t.stopPortal(e.getFixtureB().getBody(),t.portal1):"portal"===e.getFixtureA().getUserData()&&e.getFixtureA().getBody()===(null===(o=t.portal2)||void 0===o?void 0:o.body)?t.stopPortal(e.getFixtureB().getBody(),t.portal2):"portal"===e.getFixtureB().getUserData()&&e.getFixtureB().getBody()===(null===(s=t.portal1)||void 0===s?void 0:s.body)?t.stopPortal(e.getFixtureA().getBody(),t.portal1):"portal"===e.getFixtureB().getUserData()&&e.getFixtureB().getBody()===(null===(r=t.portal2)||void 0===r?void 0:r.body)&&t.stopPortal(e.getFixtureA().getBody(),t.portal2)})),this.context.physics.world.on("pre-solve",(function(e,i){var o,s,n,a=null===(n=e.getWorldManifold(null))||void 0===n?void 0:n.points;if(null!=a&&t.portal1&&t.portal2){if("portal-gate"===(e.getFixtureA().getBody().isStatic()?e.getFixtureA():e.getFixtureB()).getUserData())return;try{for(var m=r(a),h=m.next();!h.done;h=m.next()){var c=h.value;if(!t.portal1.sensor.getShape().testPoint(t.portal1.body.getTransform(),c)&&!t.portal2.sensor.getShape().testPoint(t.portal2.body.getTransform(),c))return}}catch(t){o={error:t}}finally{try{h&&!h.done&&(s=m.return)&&s.call(m)}finally{if(o)throw o.error}}e.setEnabled(!1)}})),this.on("after-physics",this.update),this.on("after-render",this.cleanup),this.on("before-render",this.updateCameras)},i.prototype.stopPortal=function(t,e){if(ut(t.getUserData())){var i=this.portalingBodies.get(t);console.log("stop "+e.index+" current: "+(null==i?void 0:i.portal.index)),i&&i.portal!==e&&console.log("Bad portal sequence"),i&&i.portal===e&&i.count--,console.log(this.portalingBodies.size)}},i.prototype.startPortal=function(t,e){var i;if(ut(t.getUserData())){var o=null!==(i=this.portalingBodies.get(t))&&void 0!==i?i:{count:0,portal:e};console.log("start "+e.index+" current: "+(null==o?void 0:o.portal.index)),o.portal!==e&&(o.count=0,o.portal=e),o.count++,this.portalingBodies.set(t,o),console.log(this.portalingBodies.size)}},i.prototype.createSurrogate=function(t){var e=t.createBody();e.setUserData("portal-surrogate");var i=S(),o={get zIndex(){return t.sprite.zIndex},modelTransform:S(),draw:function(){C(i,t.sprite.modelTransform),C(t.sprite.modelTransform,J(this.modelTransform,e)),j.isMirror&&(t.sprite.modelTransform=I(S(),t.sprite.modelTransform,F(-1,1))),t.sprite.draw(),C(t.sprite.modelTransform,i)}};return this.context.graphics.addSprite(o),{body:e,sprite:o}},i.prototype.solveTeleportation=function(t,e,i,o,s,r){var n=j.isMirror,a=(0,ht.Vec2)(-s.normal.y,s.normal.x),m=t.clone().sub(s.body.getPosition().clone()),h=this.dot(m,s.normal),c=this.dot(m,a)*(n?-1:1),l=this.dot(e,s.normal),u=this.dot(e,a)*(n?-1:1);Math.abs(l)<.1&&(l=0),Math.abs(u)<.1&&(u=0);var _=F(-s.normal.x,-s.normal.y),p=F(r.normal.x,r.normal.y);n&&D(p,p,F(-1,1));var d=n?Math.atan2(_[1],_[0])-Math.atan2(p[1],p[0]):Math.atan2(p[1],p[0])-Math.atan2(_[1],_[0]),y=(0,ht.Vec2)(-r.normal.y,r.normal.x),f=r.normal.clone().mul(-h).add(y.mul(-c)).add(r.body.getPosition().clone()),v=(d+i*(n?-1:1))%(2*Math.PI);return{pos:f,velocity:r.normal.clone().mul(-l).add(y.clone().mul(u)),rotation:v,primaryDisplacement:h,angularVelocity:n?-o:o}},i.prototype.teleportBody=function(t,e,i,o,s){t.setPosition(e),t.setLinearVelocity(i),t.setAngle(o),t.setAngularVelocity(s)},i.prototype.createPortal=function(t){var e=this.context.physics.world.createBody({type:"static"}),i=e.createFixture({shape:ht.Box(.55,1.1,(0,ht.Vec2)(-.45,0)),isSensor:!0,userData:"portal"});e.createFixture({shape:ht.Box(.5,.1,(0,ht.Vec2)(-.55,-1.1)),userData:"portal-gate"}),e.createFixture({shape:ht.Box(.5,.1,(0,ht.Vec2)(-.55,1.1)),userData:"portal-gate"});var o=this.context.graphics.createCamera(),s=new lt(this.context.graphics.gl,this.context.graphics,.2,2,O(1,0,0,1));return{body:e,sensor:i,normal:(0,ht.Vec2)(1,0),index:t,camera:o,sprite:s}},i.prototype.dot=function(t,e){return t.x*e.x+t.y*e.y},i.prototype.setPortal1=function(t,e){this.portal1||(this.portal1=this.createPortal(1)),this.portal1.body.setPosition(t),this.portal1.body.setAngle(Math.atan2(e.y,e.x)),this.portal1.normal=e,R(j.portal1Position,t.x,t.y),R(j.portal1Normal,e.x,e.y)},i.prototype.setPortal2=function(t,e){this.portal2||(this.portal2=this.createPortal(2)),this.portal2.body.setPosition(t),this.portal2.body.setAngle(Math.atan2(e.y,e.x)),this.portal2.normal=e,R(j.portal2Position,t.x,t.y),R(j.portal2Normal,e.x,e.y)},i.prototype.draw=function(){this.portal1&&this.drawPortal(this.context.graphics.gl,this.portal1,N),this.portal2&&this.drawPortal(this.context.graphics.gl,this.portal2,Y)},i.prototype.updatePortalCamera=function(t,e,i){var o=F(-i.normal.x,-i.normal.y),s=F(e.normal.x,e.normal.y);j.isMirror&&D(s,s,F(-1,1));var r=Math.atan2(o[1],o[0])-Math.atan2(s[1],s[0]);t.resetTransform(),C(t.transform,j.playerTransform),t.translate(i.body.getPosition().x,i.body.getPosition().y),t.rotate(r),j.isMirror&&I(t.transform,t.transform,F(-1,1)),t.translate(-e.body.getPosition().x,-e.body.getPosition().y)},i.prototype.drawPortal=function(t,e,i){e.sprite.color=i,J(e.sprite.modelTransform,e.body),e.sprite.draw()},i}(ct),pt=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.modelTransform=T(S()),e.type=1,e.body=e.context.physics.world.createDynamicBody({bullet:!0,gravityScale:0}),e.zIndex=3,e}return e(i,t),i.resolveCollision=function(t,e,o,s){i.toRemove.push(t),s&&i.portalToCreate.push({pos:e,normal:o,type:t.type})},i.prototype.draw=function(){J(this.solid.modelTransform,this.body),this.solid.draw()},i.prototype.resolveFixtures=function(t){var e=t.getFixtureA(),o=t.getFixtureB(),s=t.getWorldManifold(null);if(!(null==s||s.points.length<1)){var r=s.points[0],n=s.normal,a=e.getUserData(),m=o.getUserData();return a instanceof i?{point:r,normal:n.mul(-1),fixture:o,projectile:a}:m instanceof i?{point:r,normal:n,fixture:e,projectile:m}:void 0}},i.prototype.correctImpactPoint=function(t,e,i){var o=t.clone().sub(e).length();return o<1?t.add(i.clone().mul(1-o)):t},i.prototype.correctImpactNormal=function(t,e){var i=(0,ht.Vec2)(-e.y,e.x);return this.dot(t,i)<0?i.mul(-1):i},i.prototype.getBounds=function(t,e,i){if("chain"===e.m_type){var o=new ht.Edge((0,ht.Vec2)(0,0),(0,ht.Vec2)(0,0));e.getChildEdge(o,t.getChildIndexA());var s=i.getPosition();return[o.m_vertex1.clone().add(s),o.m_vertex2.clone().add(s)]}return null},i.prototype.dot=function(t,e){return t.x*e.x+t.y*e.y},i.prototype.init=function(t){var e=this;this.type=t.type,this.portal=t.portal,this.body.createFixture({shape:(0,ht.Circle)(.1),filterCategoryBits:2,filterMaskBits:2,userData:this,density:.01}),this.color=1===t.type?N:Y,this.solid=new lt(this.context.graphics.gl,this.context.graphics,.2,.2,this.color),this.body.setPosition(t.position),this.body.setLinearVelocity(t.direction),this.context.graphics.addSprite(this),i.physicsInitialized||(i.physicsInitialized=!0,this.context.physics.world.on("pre-solve",(function(t,o){var s=e.resolveFixtures(t);if(null!=s){var r=s.fixture.getShape(),n=e.getBounds(t,r,s.fixture.getBody()),a=s.point,m=s.normal;if(null!=n){var h=n[1].clone().sub(n[0]);if(h.normalize(),m=e.correctImpactNormal(m,h),a=e.correctImpactPoint(a,n[0],h),1-(a=e.correctImpactPoint(a,n[1],h.mul(-1))).clone().sub(n[0]).length()>.001)return console.log("abort"),void i.resolveCollision(s.projectile,a,m,!1)}i.resolveCollision(s.projectile,a,m,!0)}})),this.on("after-physics",(function(){var t,o,s,n;try{for(var a=r(i.toRemove),m=a.next();!m.done;m=a.next()){var h=m.value;e.context.physics.world.destroyBody(h.body),e.context.graphics.removeSprite(h)}}catch(e){t={error:e}}finally{try{m&&!m.done&&(o=a.return)&&o.call(a)}finally{if(t)throw t.error}}i.toRemove.length=0;try{for(var c=r(i.portalToCreate),l=c.next();!l.done;l=c.next()){var u=l.value;1===u.type?e.portal.setPortal1(u.pos,u.normal):e.portal.setPortal2(u.pos,u.normal)}}catch(t){s={error:t}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(s)throw s.error}}i.portalToCreate.length=0})))},i.physicsInitialized=!1,i.toRemove=[],i.portalToCreate=[],i}(ct);function dt(t,e,i){for(var o=[],s=0;s<i;s++)o.push({x:s*t,y:0,w:t,h:e});return o}var yt=function(t){function i(){var e=null!==t&&t.apply(this,arguments)||this;return e.portalSurrogate=null,e.keys={up:0,down:0,left:0,right:0},e.body=e.createBody(),e.gunSprite=new mt(e.context.graphics,e.context.assets.characterGun,.8,.4,[]),e.idleSprite=new mt(e.context.graphics,e.context.assets.characterIdle,1.1199999999999999,1.6,dt(454,649,12),{zIndex:2,animationFPS:12}),e.runSprite=new mt(e.context.graphics,e.context.assets.characterRun,1.1890748898678412,1.6912172573189523,dt(482,686,8),{zIndex:2,animationFPS:20}),e.jumpSprite=new mt(e.context.graphics,e.context.assets.characterJump,610.4/454,1126.4/649,dt(545,704,8),{zIndex:2,animationFPS:20,oneShot:!0}),e.sprite=e,e.bodySprite=e.idleSprite,e.modelTransform=T(S()),e.zIndex=2,e.mirror=!1,e.direction="left",e.portal=e.createObject(_t,void 0),e.propeller=e.createPropeller(),e.motorJoint=e.createMotor(),e.mouseCoords=[0,0],e.trackView=function(){var t=e.camera;t.resetTransform(),t.translate(10,4.5),e.mirror&&I(t.transform,t.transform,F(-1,1)),t.rotate(-e.body.getAngle()),t.translate(-e.body.getPosition().x,-e.body.getPosition().y),T(e.bodySprite.transform),T(e.gunSprite.transform),J(e.modelTransform,e.body);var i=e.context.graphics.mapToWorldCoordinates(e.mouseCoords[0],e.mouseCoords[1]),o=Math.atan2(i[1]-j.playerPos[1],i[0]-j.playerPos[0])-e.body.getAngle(),s=o<-Math.PI/2||o>Math.PI/2;e.setDirection((e.mirror?!s:s)?"left":"right");var r=F(s?.2:-.2,-.1);P(e.gunSprite.transform,e.gunSprite.transform,F(s?-.3:.3,.2)),P(e.gunSprite.transform,e.gunSprite.transform,r),E(e.gunSprite.transform,e.gunSprite.transform,s?o-Math.PI:o),P(e.gunSprite.transform,e.gunSprite.transform,D(r,r,F(-1,-1)));var n=e.isPlayerTouchingTheGround();n||e.bodySprite===e.jumpSprite?n&&(e.keys.left-e.keys.right!=0?e.bodySprite=e.runSprite:e.bodySprite=e.idleSprite):(e.bodySprite=e.jumpSprite,e.bodySprite.resetAnimation()),(e.mirror?"right"===e.direction:"left"===e.direction)&&(I(e.bodySprite.transform,e.bodySprite.transform,F(-1,1)),I(e.gunSprite.transform,e.gunSprite.transform,F(-1,1))),C(j.playerTransform,t.transform),R(j.playerPos,e.body.getPosition().x,e.body.getPosition().y)},e.update=function(){var t=e.body.getAngle();0!=t&&(Math.abs(t)<.1?e.body.setAngle(0):e.body.setAngle(e.body.getAngle()-.05*Math.sign(e.body.getAngle())));var i=e.keys.right-e.keys.left;0!=i?e.motorJoint.setMotorSpeed(15*i*(e.mirror?-1:1)):e.motorJoint.setMotorSpeed(0)},e.onMouseMove=function(t){e.mouseCoords[0]=t.x,e.mouseCoords[1]=t.y},e.onMouseDown=function(t){t.preventDefault(),t.stopPropagation();var i=n(e.context.graphics.mapToWorldCoordinates(t.clientX,t.clientY),2),o=i[0],s=i[1],r=e.body.getPosition(),a=ht.Vec2(o-r.x,s-r.y);a.normalize();var m=r.clone();return e.createObject(pt,{position:m,direction:a.clone().mul(30).add(e.body.getLinearVelocity()),type:0===t.button?1:2,portal:e.portal}),!1},e.onKeydown=function(t){switch(t.key){case"ArrowRight":case"d":e.keys.right=1;break;case"ArrowUp":case"w":if(e.isPlayerTouchingTheGround()){var i=ht.Vec2(0,-600);e.body.applyForce(i,e.body.getPosition(),!0)}break;case"ArrowLeft":case"a":e.keys.left=1;break;case"s":case"ArrowDown":e.keys.down=1}},e.onKeyUp=function(t){switch(t.key){case"ArrowRight":case"d":e.keys.right=0;break;case"ArrowUp":case"w":e.keys.up=0;break;case"a":case"ArrowLeft":e.keys.left=0;break;case"s":case"ArrowDown":e.keys.down=0}},e}return e(i,t),i.prototype.init=function(){this.context.graphics.addSprite(this),this.camera=this.context.graphics.createCamera(),this.body.setPosition(ht.Vec2(4,0)),this.propeller.setPosition(ht.Vec2(0,0)),window.addEventListener("keydown",this.onKeydown),window.addEventListener("keyup",this.onKeyUp),window.addEventListener("mousemove",this.onMouseMove),window.addEventListener("mousedown",this.onMouseDown),this.on("before-physics",this.update),this.on("after-physics",this.trackView)},i.prototype.onPortal=function(){console.log("portalizing"),this.mirror=j.isMirror?!this.mirror:this.mirror},i.prototype.isPlayerTouchingTheGround=function(){return this.isTouchingTheGround(this.propeller)||this.isTouchingTheGround(this.body)},i.prototype.isTouchingTheGround=function(t){for(var e,i,o,s,n,a=t.getContactList();null!=a;a=null!==(o=a.next)&&void 0!==o?o:null){var m=a.contact;if(m.isEnabled()){var h=null===(s=m.getWorldManifold(null))||void 0===s?void 0:s.normal;if(!(h&&h.y>=0)){var c=null===(n=m.getWorldManifold(null))||void 0===n?void 0:n.points;if(c)try{for(var l=(e=void 0,r(c)),u=l.next();!u.done;u=l.next())if(u.value.y>t.getPosition().y)return!0}catch(t){e={error:t}}finally{try{u&&!u.done&&(i=l.return)&&i.call(l)}finally{if(e)throw e.error}}}}}return!1},i.prototype.createBody=function(){var t=this.context.physics.world.createBody({type:"dynamic",position:ht.Vec2(0,0),allowSleep:!1,angle:0,fixedRotation:!0,userData:this,linearDamping:.8});return t.createFixture({shape:ht.Box(.4,.4),density:.6,friction:.3}),t.createFixture({shape:ht.Circle((0,ht.Vec2)(0,0),.4),density:.6,friction:.3}),t.createFixture({shape:ht.Circle((0,ht.Vec2)(0,.4-.1),.4),density:.6,friction:.3}),t},i.prototype.createPropeller=function(){var t=this.context.physics.world.createDynamicBody(ht.Vec2(0,.4));return t.createFixture(ht.Circle(.4),{friction:10,density:.6}),t},i.prototype.createMotor=function(){return this.context.physics.world.createJoint(ht.WheelJoint({motorSpeed:0,maxMotorTorque:50,enableMotor:!0,frequencyHz:10,dampingRatio:1},this.body,this.propeller,this.propeller.getPosition(),ht.Vec2(0,1)))},i.prototype.setDirection=function(t){this.direction=t},i.prototype.draw=function(){C(this.bodySprite.modelTransform,this.modelTransform),C(this.gunSprite.modelTransform,this.modelTransform),this.bodySprite.draw(),this.gunSprite.draw()},i}(ct);function ft(t){return o(this,void 0,void 0,(function(){var e,i,r,n,a,m=this;return s(this,(function(h){switch(h.label){case 0:return[4,fetch("./static/level.json")];case 1:return e=h.sent(),n=(r=at).validate,[4,e.json()];case 2:if(!(i=n.apply(r,[h.sent()])).success)throw new Error(i.message);return a=i.value,[4,Promise.all(a.objects.map((function(e){return o(m,void 0,void 0,(function(){var i,o;return s(this,(function(s){switch(s.label){case 0:return i=t.physics.world.createBody((0,ht.Vec2)(e.transform.x,e.transform.y)),o=new Map,[4,Promise.all(e.sprites.map((function(t){if(!o.has(t.src)){var e=new Image;return e.src=t.src.replace(/^\//,"./"),o.set(t.src,e),new Promise((function(t,i){e.onload=t,e.onerror=i}))}})))];case 1:return s.sent(),e.sprites.forEach((function(i){var s=o.get(i.src);if(!s)throw new Error("Cannot load sprite "+i.src);t.graphics.addSprite(new mt(t.graphics,s,i.transform.sX,i.transform.sY,[],{zIndex:i.background?1:3,offset:F(i.transform.x+e.transform.x,i.transform.y+e.transform.y)}))})),e.geometries.forEach((function(t){i.createFixture({filterCategoryBits:3,shape:(0,ht.Chain)(t.vertices.map((function(t){return(0,ht.Vec2)(t.x,t.y)})))})})),[2]}}))}))})))];case 3:return h.sent(),new yt(t).init(),[2]}}))}))}var vt=1/60,gt=function(){function t(){this.rest=0,this.world=(0,ht.World)({gravity:(0,ht.Vec2)(0,20)})}return t.prototype.step=function(t){this.rest+=t;for(var e=0;e<3&&this.rest>1e3*vt;e++)this.world.step(vt,6,2),this.rest-=1e3*vt;this.rest=Math.min(50,this.rest)},t}();document.addEventListener("DOMContentLoaded",(function(){return o(this,void 0,void 0,(function(){var t,e,i,o,r,n;return s(this,(function(s){switch(s.label){case 0:return[4,(new m).load(h)];case 1:return t=s.sent(),e=new $,i=new gt,o=new l,r=new c(i,e,o,t),n=new y(r),[4,ft(r)];case 2:return s.sent(),n.start(),[2]}}))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,